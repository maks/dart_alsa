// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class ALSA {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ALSA(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ALSA.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int access(
    ffi.Pointer<ffi.Int8> __name,
    int __type,
  ) {
    return _access(
      __name,
      __type,
    );
  }

  late final _access_ptr = _lookup<ffi.NativeFunction<_c_access>>('access');
  late final _dart_access _access = _access_ptr.asFunction<_dart_access>();

  int faccessat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __type,
    int __flag,
  ) {
    return _faccessat(
      __fd,
      __file,
      __type,
      __flag,
    );
  }

  late final _faccessat_ptr =
      _lookup<ffi.NativeFunction<_c_faccessat>>('faccessat');
  late final _dart_faccessat _faccessat =
      _faccessat_ptr.asFunction<_dart_faccessat>();

  int lseek(
    int __fd,
    int __offset,
    int __whence,
  ) {
    return _lseek(
      __fd,
      __offset,
      __whence,
    );
  }

  late final _lseek_ptr = _lookup<ffi.NativeFunction<_c_lseek>>('lseek');
  late final _dart_lseek _lseek = _lseek_ptr.asFunction<_dart_lseek>();

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _close_ptr = _lookup<ffi.NativeFunction<_c_close>>('close');
  late final _dart_close _close = _close_ptr.asFunction<_dart_close>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _read_ptr = _lookup<ffi.NativeFunction<_c_read>>('read');
  late final _dart_read _read = _read_ptr.asFunction<_dart_read>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  late final _write_ptr = _lookup<ffi.NativeFunction<_c_write>>('write');
  late final _dart_write _write = _write_ptr.asFunction<_dart_write>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbytes,
      __offset,
    );
  }

  late final _pread_ptr = _lookup<ffi.NativeFunction<_c_pread>>('pread');
  late final _dart_pread _pread = _pread_ptr.asFunction<_dart_pread>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __n,
      __offset,
    );
  }

  late final _pwrite_ptr = _lookup<ffi.NativeFunction<_c_pwrite>>('pwrite');
  late final _dart_pwrite _pwrite = _pwrite_ptr.asFunction<_dart_pwrite>();

  int pipe(
    ffi.Pointer<ffi.Int32> __pipedes,
  ) {
    return _pipe(
      __pipedes,
    );
  }

  late final _pipe_ptr = _lookup<ffi.NativeFunction<_c_pipe>>('pipe');
  late final _dart_pipe _pipe = _pipe_ptr.asFunction<_dart_pipe>();

  int alarm(
    int __seconds,
  ) {
    return _alarm(
      __seconds,
    );
  }

  late final _alarm_ptr = _lookup<ffi.NativeFunction<_c_alarm>>('alarm');
  late final _dart_alarm _alarm = _alarm_ptr.asFunction<_dart_alarm>();

  int sleep(
    int __seconds,
  ) {
    return _sleep(
      __seconds,
    );
  }

  late final _sleep_ptr = _lookup<ffi.NativeFunction<_c_sleep>>('sleep');
  late final _dart_sleep _sleep = _sleep_ptr.asFunction<_dart_sleep>();

  int ualarm(
    int __value,
    int __interval,
  ) {
    return _ualarm(
      __value,
      __interval,
    );
  }

  late final _ualarm_ptr = _lookup<ffi.NativeFunction<_c_ualarm>>('ualarm');
  late final _dart_ualarm _ualarm = _ualarm_ptr.asFunction<_dart_ualarm>();

  int usleep(
    int __useconds,
  ) {
    return _usleep(
      __useconds,
    );
  }

  late final _usleep_ptr = _lookup<ffi.NativeFunction<_c_usleep>>('usleep');
  late final _dart_usleep _usleep = _usleep_ptr.asFunction<_dart_usleep>();

  int pause() {
    return _pause();
  }

  late final _pause_ptr = _lookup<ffi.NativeFunction<_c_pause>>('pause');
  late final _dart_pause _pause = _pause_ptr.asFunction<_dart_pause>();

  int chown(
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
  ) {
    return _chown(
      __file,
      __owner,
      __group,
    );
  }

  late final _chown_ptr = _lookup<ffi.NativeFunction<_c_chown>>('chown');
  late final _dart_chown _chown = _chown_ptr.asFunction<_dart_chown>();

  int fchown(
    int __fd,
    int __owner,
    int __group,
  ) {
    return _fchown(
      __fd,
      __owner,
      __group,
    );
  }

  late final _fchown_ptr = _lookup<ffi.NativeFunction<_c_fchown>>('fchown');
  late final _dart_fchown _fchown = _fchown_ptr.asFunction<_dart_fchown>();

  int lchown(
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
  ) {
    return _lchown(
      __file,
      __owner,
      __group,
    );
  }

  late final _lchown_ptr = _lookup<ffi.NativeFunction<_c_lchown>>('lchown');
  late final _dart_lchown _lchown = _lchown_ptr.asFunction<_dart_lchown>();

  int fchownat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
    int __flag,
  ) {
    return _fchownat(
      __fd,
      __file,
      __owner,
      __group,
      __flag,
    );
  }

  late final _fchownat_ptr =
      _lookup<ffi.NativeFunction<_c_fchownat>>('fchownat');
  late final _dart_fchownat _fchownat =
      _fchownat_ptr.asFunction<_dart_fchownat>();

  int chdir(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    return _chdir(
      __path,
    );
  }

  late final _chdir_ptr = _lookup<ffi.NativeFunction<_c_chdir>>('chdir');
  late final _dart_chdir _chdir = _chdir_ptr.asFunction<_dart_chdir>();

  int fchdir(
    int __fd,
  ) {
    return _fchdir(
      __fd,
    );
  }

  late final _fchdir_ptr = _lookup<ffi.NativeFunction<_c_fchdir>>('fchdir');
  late final _dart_fchdir _fchdir = _fchdir_ptr.asFunction<_dart_fchdir>();

  ffi.Pointer<ffi.Int8> getcwd(
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _getcwd(
      __buf,
      __size,
    );
  }

  late final _getcwd_ptr = _lookup<ffi.NativeFunction<_c_getcwd>>('getcwd');
  late final _dart_getcwd _getcwd = _getcwd_ptr.asFunction<_dart_getcwd>();

  ffi.Pointer<ffi.Int8> getwd(
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _getwd(
      __buf,
    );
  }

  late final _getwd_ptr = _lookup<ffi.NativeFunction<_c_getwd>>('getwd');
  late final _dart_getwd _getwd = _getwd_ptr.asFunction<_dart_getwd>();

  int dup(
    int __fd,
  ) {
    return _dup(
      __fd,
    );
  }

  late final _dup_ptr = _lookup<ffi.NativeFunction<_c_dup>>('dup');
  late final _dart_dup _dup = _dup_ptr.asFunction<_dart_dup>();

  int dup2(
    int __fd,
    int __fd2,
  ) {
    return _dup2(
      __fd,
      __fd2,
    );
  }

  late final _dup2_ptr = _lookup<ffi.NativeFunction<_c_dup2>>('dup2');
  late final _dart_dup2 _dup2 = _dup2_ptr.asFunction<_dart_dup2>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> ___environ =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('__environ');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get __environ => ___environ.value;

  set __environ(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      ___environ.value = value;

  int execve(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
  ) {
    return _execve(
      __path,
      __argv,
      __envp,
    );
  }

  late final _execve_ptr = _lookup<ffi.NativeFunction<_c_execve>>('execve');
  late final _dart_execve _execve = _execve_ptr.asFunction<_dart_execve>();

  int fexecve(
    int __fd,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
  ) {
    return _fexecve(
      __fd,
      __argv,
      __envp,
    );
  }

  late final _fexecve_ptr = _lookup<ffi.NativeFunction<_c_fexecve>>('fexecve');
  late final _dart_fexecve _fexecve = _fexecve_ptr.asFunction<_dart_fexecve>();

  int execv(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execv_ptr = _lookup<ffi.NativeFunction<_c_execv>>('execv');
  late final _dart_execv _execv = _execv_ptr.asFunction<_dart_execv>();

  int execle(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    return _execle(
      __path,
      __arg,
    );
  }

  late final _execle_ptr = _lookup<ffi.NativeFunction<_c_execle>>('execle');
  late final _dart_execle _execle = _execle_ptr.asFunction<_dart_execle>();

  int execl(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    return _execl(
      __path,
      __arg,
    );
  }

  late final _execl_ptr = _lookup<ffi.NativeFunction<_c_execl>>('execl');
  late final _dart_execl _execl = _execl_ptr.asFunction<_dart_execl>();

  int execvp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvp_ptr = _lookup<ffi.NativeFunction<_c_execvp>>('execvp');
  late final _dart_execvp _execvp = _execvp_ptr.asFunction<_dart_execvp>();

  int execlp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    return _execlp(
      __file,
      __arg,
    );
  }

  late final _execlp_ptr = _lookup<ffi.NativeFunction<_c_execlp>>('execlp');
  late final _dart_execlp _execlp = _execlp_ptr.asFunction<_dart_execlp>();

  int nice(
    int __inc,
  ) {
    return _nice(
      __inc,
    );
  }

  late final _nice_ptr = _lookup<ffi.NativeFunction<_c_nice>>('nice');
  late final _dart_nice _nice = _nice_ptr.asFunction<_dart_nice>();

  void _exit(
    int __status,
  ) {
    return __exit(
      __status,
    );
  }

  late final __exit_ptr = _lookup<ffi.NativeFunction<_c__exit>>('_exit');
  late final _dart__exit __exit = __exit_ptr.asFunction<_dart__exit>();

  int pathconf(
    ffi.Pointer<ffi.Int8> __path,
    int __name,
  ) {
    return _pathconf(
      __path,
      __name,
    );
  }

  late final _pathconf_ptr =
      _lookup<ffi.NativeFunction<_c_pathconf>>('pathconf');
  late final _dart_pathconf _pathconf =
      _pathconf_ptr.asFunction<_dart_pathconf>();

  int fpathconf(
    int __fd,
    int __name,
  ) {
    return _fpathconf(
      __fd,
      __name,
    );
  }

  late final _fpathconf_ptr =
      _lookup<ffi.NativeFunction<_c_fpathconf>>('fpathconf');
  late final _dart_fpathconf _fpathconf =
      _fpathconf_ptr.asFunction<_dart_fpathconf>();

  int sysconf(
    int __name,
  ) {
    return _sysconf(
      __name,
    );
  }

  late final _sysconf_ptr = _lookup<ffi.NativeFunction<_c_sysconf>>('sysconf');
  late final _dart_sysconf _sysconf = _sysconf_ptr.asFunction<_dart_sysconf>();

  int confstr(
    int __name,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _confstr(
      __name,
      __buf,
      __len,
    );
  }

  late final _confstr_ptr = _lookup<ffi.NativeFunction<_c_confstr>>('confstr');
  late final _dart_confstr _confstr = _confstr_ptr.asFunction<_dart_confstr>();

  int getpid() {
    return _getpid();
  }

  late final _getpid_ptr = _lookup<ffi.NativeFunction<_c_getpid>>('getpid');
  late final _dart_getpid _getpid = _getpid_ptr.asFunction<_dart_getpid>();

  int getppid() {
    return _getppid();
  }

  late final _getppid_ptr = _lookup<ffi.NativeFunction<_c_getppid>>('getppid');
  late final _dart_getppid _getppid = _getppid_ptr.asFunction<_dart_getppid>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrp_ptr = _lookup<ffi.NativeFunction<_c_getpgrp>>('getpgrp');
  late final _dart_getpgrp _getpgrp = _getpgrp_ptr.asFunction<_dart_getpgrp>();

  int __getpgid(
    int __pid,
  ) {
    return ___getpgid(
      __pid,
    );
  }

  late final ___getpgid_ptr =
      _lookup<ffi.NativeFunction<_c___getpgid>>('__getpgid');
  late final _dart___getpgid ___getpgid =
      ___getpgid_ptr.asFunction<_dart___getpgid>();

  int getpgid(
    int __pid,
  ) {
    return _getpgid(
      __pid,
    );
  }

  late final _getpgid_ptr = _lookup<ffi.NativeFunction<_c_getpgid>>('getpgid');
  late final _dart_getpgid _getpgid = _getpgid_ptr.asFunction<_dart_getpgid>();

  int setpgid(
    int __pid,
    int __pgid,
  ) {
    return _setpgid(
      __pid,
      __pgid,
    );
  }

  late final _setpgid_ptr = _lookup<ffi.NativeFunction<_c_setpgid>>('setpgid');
  late final _dart_setpgid _setpgid = _setpgid_ptr.asFunction<_dart_setpgid>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrp_ptr = _lookup<ffi.NativeFunction<_c_setpgrp>>('setpgrp');
  late final _dart_setpgrp _setpgrp = _setpgrp_ptr.asFunction<_dart_setpgrp>();

  int setsid() {
    return _setsid();
  }

  late final _setsid_ptr = _lookup<ffi.NativeFunction<_c_setsid>>('setsid');
  late final _dart_setsid _setsid = _setsid_ptr.asFunction<_dart_setsid>();

  int getsid(
    int __pid,
  ) {
    return _getsid(
      __pid,
    );
  }

  late final _getsid_ptr = _lookup<ffi.NativeFunction<_c_getsid>>('getsid');
  late final _dart_getsid _getsid = _getsid_ptr.asFunction<_dart_getsid>();

  int getuid() {
    return _getuid();
  }

  late final _getuid_ptr = _lookup<ffi.NativeFunction<_c_getuid>>('getuid');
  late final _dart_getuid _getuid = _getuid_ptr.asFunction<_dart_getuid>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuid_ptr = _lookup<ffi.NativeFunction<_c_geteuid>>('geteuid');
  late final _dart_geteuid _geteuid = _geteuid_ptr.asFunction<_dart_geteuid>();

  int getgid() {
    return _getgid();
  }

  late final _getgid_ptr = _lookup<ffi.NativeFunction<_c_getgid>>('getgid');
  late final _dart_getgid _getgid = _getgid_ptr.asFunction<_dart_getgid>();

  int getegid() {
    return _getegid();
  }

  late final _getegid_ptr = _lookup<ffi.NativeFunction<_c_getegid>>('getegid');
  late final _dart_getegid _getegid = _getegid_ptr.asFunction<_dart_getegid>();

  int getgroups(
    int __size,
    ffi.Pointer<ffi.Uint32> __list,
  ) {
    return _getgroups(
      __size,
      __list,
    );
  }

  late final _getgroups_ptr =
      _lookup<ffi.NativeFunction<_c_getgroups>>('getgroups');
  late final _dart_getgroups _getgroups =
      _getgroups_ptr.asFunction<_dart_getgroups>();

  int setuid(
    int __uid,
  ) {
    return _setuid(
      __uid,
    );
  }

  late final _setuid_ptr = _lookup<ffi.NativeFunction<_c_setuid>>('setuid');
  late final _dart_setuid _setuid = _setuid_ptr.asFunction<_dart_setuid>();

  int setreuid(
    int __ruid,
    int __euid,
  ) {
    return _setreuid(
      __ruid,
      __euid,
    );
  }

  late final _setreuid_ptr =
      _lookup<ffi.NativeFunction<_c_setreuid>>('setreuid');
  late final _dart_setreuid _setreuid =
      _setreuid_ptr.asFunction<_dart_setreuid>();

  int seteuid(
    int __uid,
  ) {
    return _seteuid(
      __uid,
    );
  }

  late final _seteuid_ptr = _lookup<ffi.NativeFunction<_c_seteuid>>('seteuid');
  late final _dart_seteuid _seteuid = _seteuid_ptr.asFunction<_dart_seteuid>();

  int setgid(
    int __gid,
  ) {
    return _setgid(
      __gid,
    );
  }

  late final _setgid_ptr = _lookup<ffi.NativeFunction<_c_setgid>>('setgid');
  late final _dart_setgid _setgid = _setgid_ptr.asFunction<_dart_setgid>();

  int setregid(
    int __rgid,
    int __egid,
  ) {
    return _setregid(
      __rgid,
      __egid,
    );
  }

  late final _setregid_ptr =
      _lookup<ffi.NativeFunction<_c_setregid>>('setregid');
  late final _dart_setregid _setregid =
      _setregid_ptr.asFunction<_dart_setregid>();

  int setegid(
    int __gid,
  ) {
    return _setegid(
      __gid,
    );
  }

  late final _setegid_ptr = _lookup<ffi.NativeFunction<_c_setegid>>('setegid');
  late final _dart_setegid _setegid = _setegid_ptr.asFunction<_dart_setegid>();

  int fork() {
    return _fork();
  }

  late final _fork_ptr = _lookup<ffi.NativeFunction<_c_fork>>('fork');
  late final _dart_fork _fork = _fork_ptr.asFunction<_dart_fork>();

  int vfork() {
    return _vfork();
  }

  late final _vfork_ptr = _lookup<ffi.NativeFunction<_c_vfork>>('vfork');
  late final _dart_vfork _vfork = _vfork_ptr.asFunction<_dart_vfork>();

  ffi.Pointer<ffi.Int8> ttyname(
    int __fd,
  ) {
    return _ttyname(
      __fd,
    );
  }

  late final _ttyname_ptr = _lookup<ffi.NativeFunction<_c_ttyname>>('ttyname');
  late final _dart_ttyname _ttyname = _ttyname_ptr.asFunction<_dart_ttyname>();

  int ttyname_r(
    int __fd,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    return _ttyname_r(
      __fd,
      __buf,
      __buflen,
    );
  }

  late final _ttyname_r_ptr =
      _lookup<ffi.NativeFunction<_c_ttyname_r>>('ttyname_r');
  late final _dart_ttyname_r _ttyname_r =
      _ttyname_r_ptr.asFunction<_dart_ttyname_r>();

  int isatty(
    int __fd,
  ) {
    return _isatty(
      __fd,
    );
  }

  late final _isatty_ptr = _lookup<ffi.NativeFunction<_c_isatty>>('isatty');
  late final _dart_isatty _isatty = _isatty_ptr.asFunction<_dart_isatty>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslot_ptr = _lookup<ffi.NativeFunction<_c_ttyslot>>('ttyslot');
  late final _dart_ttyslot _ttyslot = _ttyslot_ptr.asFunction<_dart_ttyslot>();

  int link(
    ffi.Pointer<ffi.Int8> __from,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    return _link(
      __from,
      __to,
    );
  }

  late final _link_ptr = _lookup<ffi.NativeFunction<_c_link>>('link');
  late final _dart_link _link = _link_ptr.asFunction<_dart_link>();

  int linkat(
    int __fromfd,
    ffi.Pointer<ffi.Int8> __from,
    int __tofd,
    ffi.Pointer<ffi.Int8> __to,
    int __flags,
  ) {
    return _linkat(
      __fromfd,
      __from,
      __tofd,
      __to,
      __flags,
    );
  }

  late final _linkat_ptr = _lookup<ffi.NativeFunction<_c_linkat>>('linkat');
  late final _dart_linkat _linkat = _linkat_ptr.asFunction<_dart_linkat>();

  int symlink(
    ffi.Pointer<ffi.Int8> __from,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    return _symlink(
      __from,
      __to,
    );
  }

  late final _symlink_ptr = _lookup<ffi.NativeFunction<_c_symlink>>('symlink');
  late final _dart_symlink _symlink = _symlink_ptr.asFunction<_dart_symlink>();

  int readlink(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _readlink(
      __path,
      __buf,
      __len,
    );
  }

  late final _readlink_ptr =
      _lookup<ffi.NativeFunction<_c_readlink>>('readlink');
  late final _dart_readlink _readlink =
      _readlink_ptr.asFunction<_dart_readlink>();

  int symlinkat(
    ffi.Pointer<ffi.Int8> __from,
    int __tofd,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    return _symlinkat(
      __from,
      __tofd,
      __to,
    );
  }

  late final _symlinkat_ptr =
      _lookup<ffi.NativeFunction<_c_symlinkat>>('symlinkat');
  late final _dart_symlinkat _symlinkat =
      _symlinkat_ptr.asFunction<_dart_symlinkat>();

  int readlinkat(
    int __fd,
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _readlinkat(
      __fd,
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkat_ptr =
      _lookup<ffi.NativeFunction<_c_readlinkat>>('readlinkat');
  late final _dart_readlinkat _readlinkat =
      _readlinkat_ptr.asFunction<_dart_readlinkat>();

  int unlink(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _unlink(
      __name,
    );
  }

  late final _unlink_ptr = _lookup<ffi.NativeFunction<_c_unlink>>('unlink');
  late final _dart_unlink _unlink = _unlink_ptr.asFunction<_dart_unlink>();

  int unlinkat(
    int __fd,
    ffi.Pointer<ffi.Int8> __name,
    int __flag,
  ) {
    return _unlinkat(
      __fd,
      __name,
      __flag,
    );
  }

  late final _unlinkat_ptr =
      _lookup<ffi.NativeFunction<_c_unlinkat>>('unlinkat');
  late final _dart_unlinkat _unlinkat =
      _unlinkat_ptr.asFunction<_dart_unlinkat>();

  int rmdir(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    return _rmdir(
      __path,
    );
  }

  late final _rmdir_ptr = _lookup<ffi.NativeFunction<_c_rmdir>>('rmdir');
  late final _dart_rmdir _rmdir = _rmdir_ptr.asFunction<_dart_rmdir>();

  int tcgetpgrp(
    int __fd,
  ) {
    return _tcgetpgrp(
      __fd,
    );
  }

  late final _tcgetpgrp_ptr =
      _lookup<ffi.NativeFunction<_c_tcgetpgrp>>('tcgetpgrp');
  late final _dart_tcgetpgrp _tcgetpgrp =
      _tcgetpgrp_ptr.asFunction<_dart_tcgetpgrp>();

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  late final _tcsetpgrp_ptr =
      _lookup<ffi.NativeFunction<_c_tcsetpgrp>>('tcsetpgrp');
  late final _dart_tcsetpgrp _tcsetpgrp =
      _tcsetpgrp_ptr.asFunction<_dart_tcsetpgrp>();

  ffi.Pointer<ffi.Int8> getlogin() {
    return _getlogin();
  }

  late final _getlogin_ptr =
      _lookup<ffi.NativeFunction<_c_getlogin>>('getlogin');
  late final _dart_getlogin _getlogin =
      _getlogin_ptr.asFunction<_dart_getlogin>();

  int getlogin_r(
    ffi.Pointer<ffi.Int8> __name,
    int __name_len,
  ) {
    return _getlogin_r(
      __name,
      __name_len,
    );
  }

  late final _getlogin_r_ptr =
      _lookup<ffi.NativeFunction<_c_getlogin_r>>('getlogin_r');
  late final _dart_getlogin_r _getlogin_r =
      _getlogin_r_ptr.asFunction<_dart_getlogin_r>();

  int setlogin(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _setlogin(
      __name,
    );
  }

  late final _setlogin_ptr =
      _lookup<ffi.NativeFunction<_c_setlogin>>('setlogin');
  late final _dart_setlogin _setlogin =
      _setlogin_ptr.asFunction<_dart_setlogin>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _optarg =
      _lookup<ffi.Pointer<ffi.Int8>>('optarg');

  ffi.Pointer<ffi.Int8> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Int8> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int32> _optind = _lookup<ffi.Int32>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int32> _opterr = _lookup<ffi.Int32>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int32> _optopt = _lookup<ffi.Int32>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  int getopt(
    int ___argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
    ffi.Pointer<ffi.Int8> __shortopts,
  ) {
    return _getopt(
      ___argc,
      ___argv,
      __shortopts,
    );
  }

  late final _getopt_ptr = _lookup<ffi.NativeFunction<_c_getopt>>('getopt');
  late final _dart_getopt _getopt = _getopt_ptr.asFunction<_dart_getopt>();

  int gethostname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    return _gethostname(
      __name,
      __len,
    );
  }

  late final _gethostname_ptr =
      _lookup<ffi.NativeFunction<_c_gethostname>>('gethostname');
  late final _dart_gethostname _gethostname =
      _gethostname_ptr.asFunction<_dart_gethostname>();

  int sethostname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    return _sethostname(
      __name,
      __len,
    );
  }

  late final _sethostname_ptr =
      _lookup<ffi.NativeFunction<_c_sethostname>>('sethostname');
  late final _dart_sethostname _sethostname =
      _sethostname_ptr.asFunction<_dart_sethostname>();

  int sethostid(
    int __id,
  ) {
    return _sethostid(
      __id,
    );
  }

  late final _sethostid_ptr =
      _lookup<ffi.NativeFunction<_c_sethostid>>('sethostid');
  late final _dart_sethostid _sethostid =
      _sethostid_ptr.asFunction<_dart_sethostid>();

  int getdomainname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    return _getdomainname(
      __name,
      __len,
    );
  }

  late final _getdomainname_ptr =
      _lookup<ffi.NativeFunction<_c_getdomainname>>('getdomainname');
  late final _dart_getdomainname _getdomainname =
      _getdomainname_ptr.asFunction<_dart_getdomainname>();

  int setdomainname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    return _setdomainname(
      __name,
      __len,
    );
  }

  late final _setdomainname_ptr =
      _lookup<ffi.NativeFunction<_c_setdomainname>>('setdomainname');
  late final _dart_setdomainname _setdomainname =
      _setdomainname_ptr.asFunction<_dart_setdomainname>();

  int vhangup() {
    return _vhangup();
  }

  late final _vhangup_ptr = _lookup<ffi.NativeFunction<_c_vhangup>>('vhangup');
  late final _dart_vhangup _vhangup = _vhangup_ptr.asFunction<_dart_vhangup>();

  int revoke(
    ffi.Pointer<ffi.Int8> __file,
  ) {
    return _revoke(
      __file,
    );
  }

  late final _revoke_ptr = _lookup<ffi.NativeFunction<_c_revoke>>('revoke');
  late final _dart_revoke _revoke = _revoke_ptr.asFunction<_dart_revoke>();

  int profil(
    ffi.Pointer<ffi.Uint16> __sample_buffer,
    int __size,
    int __offset,
    int __scale,
  ) {
    return _profil(
      __sample_buffer,
      __size,
      __offset,
      __scale,
    );
  }

  late final _profil_ptr = _lookup<ffi.NativeFunction<_c_profil>>('profil');
  late final _dart_profil _profil = _profil_ptr.asFunction<_dart_profil>();

  int acct(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _acct(
      __name,
    );
  }

  late final _acct_ptr = _lookup<ffi.NativeFunction<_c_acct>>('acct');
  late final _dart_acct _acct = _acct_ptr.asFunction<_dart_acct>();

  ffi.Pointer<ffi.Int8> getusershell() {
    return _getusershell();
  }

  late final _getusershell_ptr =
      _lookup<ffi.NativeFunction<_c_getusershell>>('getusershell');
  late final _dart_getusershell _getusershell =
      _getusershell_ptr.asFunction<_dart_getusershell>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershell_ptr =
      _lookup<ffi.NativeFunction<_c_endusershell>>('endusershell');
  late final _dart_endusershell _endusershell =
      _endusershell_ptr.asFunction<_dart_endusershell>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershell_ptr =
      _lookup<ffi.NativeFunction<_c_setusershell>>('setusershell');
  late final _dart_setusershell _setusershell =
      _setusershell_ptr.asFunction<_dart_setusershell>();

  int daemon(
    int __nochdir,
    int __noclose,
  ) {
    return _daemon(
      __nochdir,
      __noclose,
    );
  }

  late final _daemon_ptr = _lookup<ffi.NativeFunction<_c_daemon>>('daemon');
  late final _dart_daemon _daemon = _daemon_ptr.asFunction<_dart_daemon>();

  int chroot(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    return _chroot(
      __path,
    );
  }

  late final _chroot_ptr = _lookup<ffi.NativeFunction<_c_chroot>>('chroot');
  late final _dart_chroot _chroot = _chroot_ptr.asFunction<_dart_chroot>();

  ffi.Pointer<ffi.Int8> getpass(
    ffi.Pointer<ffi.Int8> __prompt,
  ) {
    return _getpass(
      __prompt,
    );
  }

  late final _getpass_ptr = _lookup<ffi.NativeFunction<_c_getpass>>('getpass');
  late final _dart_getpass _getpass = _getpass_ptr.asFunction<_dart_getpass>();

  int fsync(
    int __fd,
  ) {
    return _fsync(
      __fd,
    );
  }

  late final _fsync_ptr = _lookup<ffi.NativeFunction<_c_fsync>>('fsync');
  late final _dart_fsync _fsync = _fsync_ptr.asFunction<_dart_fsync>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostid_ptr =
      _lookup<ffi.NativeFunction<_c_gethostid>>('gethostid');
  late final _dart_gethostid _gethostid =
      _gethostid_ptr.asFunction<_dart_gethostid>();

  void sync_1() {
    return _sync_1();
  }

  late final _sync_1_ptr = _lookup<ffi.NativeFunction<_c_sync_1>>('sync');
  late final _dart_sync_1 _sync_1 = _sync_1_ptr.asFunction<_dart_sync_1>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesize_ptr =
      _lookup<ffi.NativeFunction<_c_getpagesize>>('getpagesize');
  late final _dart_getpagesize _getpagesize =
      _getpagesize_ptr.asFunction<_dart_getpagesize>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesize_ptr =
      _lookup<ffi.NativeFunction<_c_getdtablesize>>('getdtablesize');
  late final _dart_getdtablesize _getdtablesize =
      _getdtablesize_ptr.asFunction<_dart_getdtablesize>();

  int truncate(
    ffi.Pointer<ffi.Int8> __file,
    int __length,
  ) {
    return _truncate(
      __file,
      __length,
    );
  }

  late final _truncate_ptr =
      _lookup<ffi.NativeFunction<_c_truncate>>('truncate');
  late final _dart_truncate _truncate =
      _truncate_ptr.asFunction<_dart_truncate>();

  int ftruncate(
    int __fd,
    int __length,
  ) {
    return _ftruncate(
      __fd,
      __length,
    );
  }

  late final _ftruncate_ptr =
      _lookup<ffi.NativeFunction<_c_ftruncate>>('ftruncate');
  late final _dart_ftruncate _ftruncate =
      _ftruncate_ptr.asFunction<_dart_ftruncate>();

  int brk(
    ffi.Pointer<ffi.Void> __addr,
  ) {
    return _brk(
      __addr,
    );
  }

  late final _brk_ptr = _lookup<ffi.NativeFunction<_c_brk>>('brk');
  late final _dart_brk _brk = _brk_ptr.asFunction<_dart_brk>();

  ffi.Pointer<ffi.Void> sbrk(
    int __delta,
  ) {
    return _sbrk(
      __delta,
    );
  }

  late final _sbrk_ptr = _lookup<ffi.NativeFunction<_c_sbrk>>('sbrk');
  late final _dart_sbrk _sbrk = _sbrk_ptr.asFunction<_dart_sbrk>();

  int syscall(
    int __sysno,
  ) {
    return _syscall(
      __sysno,
    );
  }

  late final _syscall_ptr = _lookup<ffi.NativeFunction<_c_syscall>>('syscall');
  late final _dart_syscall _syscall = _syscall_ptr.asFunction<_dart_syscall>();

  int lockf(
    int __fd,
    int __cmd,
    int __len,
  ) {
    return _lockf(
      __fd,
      __cmd,
      __len,
    );
  }

  late final _lockf_ptr = _lookup<ffi.NativeFunction<_c_lockf>>('lockf');
  late final _dart_lockf _lockf = _lockf_ptr.asFunction<_dart_lockf>();

  int fdatasync(
    int __fildes,
  ) {
    return _fdatasync(
      __fildes,
    );
  }

  late final _fdatasync_ptr =
      _lookup<ffi.NativeFunction<_c_fdatasync>>('fdatasync');
  late final _dart_fdatasync _fdatasync =
      _fdatasync_ptr.asFunction<_dart_fdatasync>();

  ffi.Pointer<ffi.Int8> crypt(
    ffi.Pointer<ffi.Int8> __key,
    ffi.Pointer<ffi.Int8> __salt,
  ) {
    return _crypt(
      __key,
      __salt,
    );
  }

  late final _crypt_ptr = _lookup<ffi.NativeFunction<_c_crypt>>('crypt');
  late final _dart_crypt _crypt = _crypt_ptr.asFunction<_dart_crypt>();

  int getentropy(
    ffi.Pointer<ffi.Void> __buffer,
    int __length,
  ) {
    return _getentropy(
      __buffer,
      __length,
    );
  }

  late final _getentropy_ptr =
      _lookup<ffi.NativeFunction<_c_getentropy>>('getentropy');
  late final _dart_getentropy _getentropy =
      _getentropy_ptr.asFunction<_dart_getentropy>();

  late final ffi.Pointer<ffi.Pointer<IO_FILE_>> _stdin =
      _lookup<ffi.Pointer<IO_FILE_>>('stdin');

  ffi.Pointer<IO_FILE_> get stdin => _stdin.value;

  set stdin(ffi.Pointer<IO_FILE_> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<IO_FILE_>> _stdout =
      _lookup<ffi.Pointer<IO_FILE_>>('stdout');

  ffi.Pointer<IO_FILE_> get stdout => _stdout.value;

  set stdout(ffi.Pointer<IO_FILE_> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<IO_FILE_>> _stderr =
      _lookup<ffi.Pointer<IO_FILE_>>('stderr');

  ffi.Pointer<IO_FILE_> get stderr => _stderr.value;

  set stderr(ffi.Pointer<IO_FILE_> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _remove_ptr = _lookup<ffi.NativeFunction<_c_remove>>('remove');
  late final _dart_remove _remove = _remove_ptr.asFunction<_dart_remove>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _rename_ptr = _lookup<ffi.NativeFunction<_c_rename>>('rename');
  late final _dart_rename _rename = _rename_ptr.asFunction<_dart_rename>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat_ptr =
      _lookup<ffi.NativeFunction<_c_renameat>>('renameat');
  late final _dart_renameat _renameat =
      _renameat_ptr.asFunction<_dart_renameat>();

  ffi.Pointer<IO_FILE_> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfile_ptr = _lookup<ffi.NativeFunction<_c_tmpfile>>('tmpfile');
  late final _dart_tmpfile _tmpfile = _tmpfile_ptr.asFunction<_dart_tmpfile>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam(
      __s,
    );
  }

  late final _tmpnam_ptr = _lookup<ffi.NativeFunction<_c_tmpnam>>('tmpnam');
  late final _dart_tmpnam _tmpnam = _tmpnam_ptr.asFunction<_dart_tmpnam>();

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_r_ptr =
      _lookup<ffi.NativeFunction<_c_tmpnam_r>>('tmpnam_r');
  late final _dart_tmpnam_r _tmpnam_r =
      _tmpnam_r_ptr.asFunction<_dart_tmpnam_r>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnam_ptr = _lookup<ffi.NativeFunction<_c_tempnam>>('tempnam');
  late final _dart_tempnam _tempnam = _tempnam_ptr.asFunction<_dart_tempnam>();

  int fclose(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclose_ptr = _lookup<ffi.NativeFunction<_c_fclose>>('fclose');
  late final _dart_fclose _fclose = _fclose_ptr.asFunction<_dart_fclose>();

  int fflush(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflush_ptr = _lookup<ffi.NativeFunction<_c_fflush>>('fflush');
  late final _dart_fflush _fflush = _fflush_ptr.asFunction<_dart_fflush>();

  int fflush_unlocked(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fflush_unlocked>>('fflush_unlocked');
  late final _dart_fflush_unlocked _fflush_unlocked =
      _fflush_unlocked_ptr.asFunction<_dart_fflush_unlocked>();

  ffi.Pointer<IO_FILE_> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopen_ptr = _lookup<ffi.NativeFunction<_c_fopen>>('fopen');
  late final _dart_fopen _fopen = _fopen_ptr.asFunction<_dart_fopen>();

  ffi.Pointer<IO_FILE_> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen_ptr = _lookup<ffi.NativeFunction<_c_freopen>>('freopen');
  late final _dart_freopen _freopen = _freopen_ptr.asFunction<_dart_freopen>();

  ffi.Pointer<IO_FILE_> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopen_ptr = _lookup<ffi.NativeFunction<_c_fdopen>>('fdopen');
  late final _dart_fdopen _fdopen = _fdopen_ptr.asFunction<_dart_fdopen>();

  ffi.Pointer<IO_FILE_> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen_ptr =
      _lookup<ffi.NativeFunction<_c_fmemopen>>('fmemopen');
  late final _dart_fmemopen _fmemopen =
      _fmemopen_ptr.asFunction<_dart_fmemopen>();

  ffi.Pointer<IO_FILE_> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<ffi.Int32> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream_ptr =
      _lookup<ffi.NativeFunction<_c_open_memstream>>('open_memstream');
  late final _dart_open_memstream _open_memstream =
      _open_memstream_ptr.asFunction<_dart_open_memstream>();

  void setbuf(
    ffi.Pointer<IO_FILE_> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbuf_ptr = _lookup<ffi.NativeFunction<_c_setbuf>>('setbuf');
  late final _dart_setbuf _setbuf = _setbuf_ptr.asFunction<_dart_setbuf>();

  int setvbuf(
    ffi.Pointer<IO_FILE_> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf_ptr = _lookup<ffi.NativeFunction<_c_setvbuf>>('setvbuf');
  late final _dart_setvbuf _setvbuf = _setvbuf_ptr.asFunction<_dart_setvbuf>();

  void setbuffer(
    ffi.Pointer<IO_FILE_> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer_ptr =
      _lookup<ffi.NativeFunction<_c_setbuffer>>('setbuffer');
  late final _dart_setbuffer _setbuffer =
      _setbuffer_ptr.asFunction<_dart_setbuffer>();

  void setlinebuf(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebuf_ptr =
      _lookup<ffi.NativeFunction<_c_setlinebuf>>('setlinebuf');
  late final _dart_setlinebuf _setlinebuf =
      _setlinebuf_ptr.asFunction<_dart_setlinebuf>();

  int fprintf(
    ffi.Pointer<IO_FILE_> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintf_ptr = _lookup<ffi.NativeFunction<_c_fprintf>>('fprintf');
  late final _dart_fprintf _fprintf = _fprintf_ptr.asFunction<_dart_fprintf>();

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printf_ptr = _lookup<ffi.NativeFunction<_c_printf>>('printf');
  late final _dart_printf _printf = _printf_ptr.asFunction<_dart_printf>();

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintf_ptr = _lookup<ffi.NativeFunction<_c_sprintf>>('sprintf');
  late final _dart_sprintf _sprintf = _sprintf_ptr.asFunction<_dart_sprintf>();

  int vfprintf(
    ffi.Pointer<IO_FILE_> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vfprintf>>('vfprintf');
  late final _dart_vfprintf _vfprintf =
      _vfprintf_ptr.asFunction<_dart_vfprintf>();

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintf_ptr = _lookup<ffi.NativeFunction<_c_vprintf>>('vprintf');
  late final _dart_vprintf _vprintf = _vprintf_ptr.asFunction<_dart_vprintf>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vsprintf>>('vsprintf');
  late final _dart_vsprintf _vsprintf =
      _vsprintf_ptr.asFunction<_dart_vsprintf>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf_ptr =
      _lookup<ffi.NativeFunction<_c_snprintf>>('snprintf');
  late final _dart_snprintf _snprintf =
      _snprintf_ptr.asFunction<_dart_snprintf>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vsnprintf>>('vsnprintf');
  late final _dart_vsnprintf _vsnprintf =
      _vsnprintf_ptr.asFunction<_dart_vsnprintf>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    int __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vdprintf>>('vdprintf');
  late final _dart_vdprintf _vdprintf =
      _vdprintf_ptr.asFunction<_dart_vdprintf>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintf_ptr = _lookup<ffi.NativeFunction<_c_dprintf>>('dprintf');
  late final _dart_dprintf _dprintf = _dprintf_ptr.asFunction<_dart_dprintf>();

  int fscanf(
    ffi.Pointer<IO_FILE_> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanf_ptr = _lookup<ffi.NativeFunction<_c_fscanf>>('fscanf');
  late final _dart_fscanf _fscanf = _fscanf_ptr.asFunction<_dart_fscanf>();

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanf_ptr = _lookup<ffi.NativeFunction<_c_scanf>>('scanf');
  late final _dart_scanf _scanf = _scanf_ptr.asFunction<_dart_scanf>();

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanf_ptr = _lookup<ffi.NativeFunction<_c_sscanf>>('sscanf');
  late final _dart_sscanf _sscanf = _sscanf_ptr.asFunction<_dart_sscanf>();

  int vfscanf(
    ffi.Pointer<IO_FILE_> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf_ptr = _lookup<ffi.NativeFunction<_c_vfscanf>>('vfscanf');
  late final _dart_vfscanf _vfscanf = _vfscanf_ptr.asFunction<_dart_vfscanf>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanf_ptr = _lookup<ffi.NativeFunction<_c_vscanf>>('vscanf');
  late final _dart_vscanf _vscanf = _vscanf_ptr.asFunction<_dart_vscanf>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf_ptr = _lookup<ffi.NativeFunction<_c_vsscanf>>('vsscanf');
  late final _dart_vsscanf _vsscanf = _vsscanf_ptr.asFunction<_dart_vsscanf>();

  int fgetc(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetc_ptr = _lookup<ffi.NativeFunction<_c_fgetc>>('fgetc');
  late final _dart_fgetc _fgetc = _fgetc_ptr.asFunction<_dart_fgetc>();

  int getc(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getc_ptr = _lookup<ffi.NativeFunction<_c_getc>>('getc');
  late final _dart_getc _getc = _getc_ptr.asFunction<_dart_getc>();

  int getchar() {
    return _getchar();
  }

  late final _getchar_ptr = _lookup<ffi.NativeFunction<_c_getchar>>('getchar');
  late final _dart_getchar _getchar = _getchar_ptr.asFunction<_dart_getchar>();

  int getc_unlocked(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_getc_unlocked>>('getc_unlocked');
  late final _dart_getc_unlocked _getc_unlocked =
      _getc_unlocked_ptr.asFunction<_dart_getc_unlocked>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_getchar_unlocked>>('getchar_unlocked');
  late final _dart_getchar_unlocked _getchar_unlocked =
      _getchar_unlocked_ptr.asFunction<_dart_getchar_unlocked>();

  int fgetc_unlocked(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fgetc_unlocked>>('fgetc_unlocked');
  late final _dart_fgetc_unlocked _fgetc_unlocked =
      _fgetc_unlocked_ptr.asFunction<_dart_fgetc_unlocked>();

  int fputc(
    int __c,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputc_ptr = _lookup<ffi.NativeFunction<_c_fputc>>('fputc');
  late final _dart_fputc _fputc = _fputc_ptr.asFunction<_dart_fputc>();

  int putc(
    int __c,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putc_ptr = _lookup<ffi.NativeFunction<_c_putc>>('putc');
  late final _dart_putc _putc = _putc_ptr.asFunction<_dart_putc>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putchar_ptr = _lookup<ffi.NativeFunction<_c_putchar>>('putchar');
  late final _dart_putchar _putchar = _putchar_ptr.asFunction<_dart_putchar>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fputc_unlocked>>('fputc_unlocked');
  late final _dart_fputc_unlocked _fputc_unlocked =
      _fputc_unlocked_ptr.asFunction<_dart_fputc_unlocked>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_putc_unlocked>>('putc_unlocked');
  late final _dart_putc_unlocked _putc_unlocked =
      _putc_unlocked_ptr.asFunction<_dart_putc_unlocked>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_putchar_unlocked>>('putchar_unlocked');
  late final _dart_putchar_unlocked _putchar_unlocked =
      _putchar_unlocked_ptr.asFunction<_dart_putchar_unlocked>();

  int getw(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getw_ptr = _lookup<ffi.NativeFunction<_c_getw>>('getw');
  late final _dart_getw _getw = _getw_ptr.asFunction<_dart_getw>();

  int putw(
    int __w,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putw_ptr = _lookup<ffi.NativeFunction<_c_putw>>('putw');
  late final _dart_putw _putw = _putw_ptr.asFunction<_dart_putw>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets_ptr = _lookup<ffi.NativeFunction<_c_fgets>>('fgets');
  late final _dart_fgets _fgets = _fgets_ptr.asFunction<_dart_fgets>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    int __delimiter,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim_ptr =
      _lookup<ffi.NativeFunction<_c___getdelim>>('__getdelim');
  late final _dart___getdelim ___getdelim =
      ___getdelim_ptr.asFunction<_dart___getdelim>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    int __delimiter,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim_ptr =
      _lookup<ffi.NativeFunction<_c_getdelim>>('getdelim');
  late final _dart_getdelim _getdelim =
      _getdelim_ptr.asFunction<_dart_getdelim>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline_ptr = _lookup<ffi.NativeFunction<_c_getline>>('getline');
  late final _dart_getline _getline = _getline_ptr.asFunction<_dart_getline>();

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputs_ptr = _lookup<ffi.NativeFunction<_c_fputs>>('fputs');
  late final _dart_fputs _fputs = _fputs_ptr.asFunction<_dart_fputs>();

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _puts_ptr = _lookup<ffi.NativeFunction<_c_puts>>('puts');
  late final _dart_puts _puts = _puts_ptr.asFunction<_dart_puts>();

  int ungetc(
    int __c,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetc_ptr = _lookup<ffi.NativeFunction<_c_ungetc>>('ungetc');
  late final _dart_ungetc _ungetc = _ungetc_ptr.asFunction<_dart_ungetc>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_ptr = _lookup<ffi.NativeFunction<_c_fread>>('fread');
  late final _dart_fread _fread = _fread_ptr.asFunction<_dart_fread>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<IO_FILE_> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite_ptr = _lookup<ffi.NativeFunction<_c_fwrite>>('fwrite');
  late final _dart_fwrite _fwrite = _fwrite_ptr.asFunction<_dart_fwrite>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fread_unlocked>>('fread_unlocked');
  late final _dart_fread_unlocked _fread_unlocked =
      _fread_unlocked_ptr.asFunction<_dart_fread_unlocked>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fwrite_unlocked>>('fwrite_unlocked');
  late final _dart_fwrite_unlocked _fwrite_unlocked =
      _fwrite_unlocked_ptr.asFunction<_dart_fwrite_unlocked>();

  int fseek(
    ffi.Pointer<IO_FILE_> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek_ptr = _lookup<ffi.NativeFunction<_c_fseek>>('fseek');
  late final _dart_fseek _fseek = _fseek_ptr.asFunction<_dart_fseek>();

  int ftell(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftell_ptr = _lookup<ffi.NativeFunction<_c_ftell>>('ftell');
  late final _dart_ftell _ftell = _ftell_ptr.asFunction<_dart_ftell>();

  void rewind(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewind_ptr = _lookup<ffi.NativeFunction<_c_rewind>>('rewind');
  late final _dart_rewind _rewind = _rewind_ptr.asFunction<_dart_rewind>();

  int fseeko(
    ffi.Pointer<IO_FILE_> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko_ptr = _lookup<ffi.NativeFunction<_c_fseeko>>('fseeko');
  late final _dart_fseeko _fseeko = _fseeko_ptr.asFunction<_dart_fseeko>();

  int ftello(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftello_ptr = _lookup<ffi.NativeFunction<_c_ftello>>('ftello');
  late final _dart_ftello _ftello = _ftello_ptr.asFunction<_dart_ftello>();

  int fgetpos(
    ffi.Pointer<IO_FILE_> __stream,
    ffi.Pointer<_fpos_t_> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetpos_ptr = _lookup<ffi.NativeFunction<_c_fgetpos>>('fgetpos');
  late final _dart_fgetpos _fgetpos = _fgetpos_ptr.asFunction<_dart_fgetpos>();

  int fsetpos(
    ffi.Pointer<IO_FILE_> __stream,
    ffi.Pointer<_fpos_t_> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetpos_ptr = _lookup<ffi.NativeFunction<_c_fsetpos>>('fsetpos');
  late final _dart_fsetpos _fsetpos = _fsetpos_ptr.asFunction<_dart_fsetpos>();

  void clearerr(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerr_ptr =
      _lookup<ffi.NativeFunction<_c_clearerr>>('clearerr');
  late final _dart_clearerr _clearerr =
      _clearerr_ptr.asFunction<_dart_clearerr>();

  int feof(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feof_ptr = _lookup<ffi.NativeFunction<_c_feof>>('feof');
  late final _dart_feof _feof = _feof_ptr.asFunction<_dart_feof>();

  int ferror(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferror_ptr = _lookup<ffi.NativeFunction<_c_ferror>>('ferror');
  late final _dart_ferror _ferror = _ferror_ptr.asFunction<_dart_ferror>();

  void clearerr_unlocked(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_clearerr_unlocked>>('clearerr_unlocked');
  late final _dart_clearerr_unlocked _clearerr_unlocked =
      _clearerr_unlocked_ptr.asFunction<_dart_clearerr_unlocked>();

  int feof_unlocked(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_feof_unlocked>>('feof_unlocked');
  late final _dart_feof_unlocked _feof_unlocked =
      _feof_unlocked_ptr.asFunction<_dart_feof_unlocked>();

  int ferror_unlocked(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_ferror_unlocked>>('ferror_unlocked');
  late final _dart_ferror_unlocked _ferror_unlocked =
      _ferror_unlocked_ptr.asFunction<_dart_ferror_unlocked>();

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perror_ptr = _lookup<ffi.NativeFunction<_c_perror>>('perror');
  late final _dart_perror _perror = _perror_ptr.asFunction<_dart_perror>();

  int fileno(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _fileno_ptr = _lookup<ffi.NativeFunction<_c_fileno>>('fileno');
  late final _dart_fileno _fileno = _fileno_ptr.asFunction<_dart_fileno>();

  int fileno_unlocked(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fileno_unlocked>>('fileno_unlocked');
  late final _dart_fileno_unlocked _fileno_unlocked =
      _fileno_unlocked_ptr.asFunction<_dart_fileno_unlocked>();

  ffi.Pointer<IO_FILE_> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popen_ptr = _lookup<ffi.NativeFunction<_c_popen>>('popen');
  late final _dart_popen _popen = _popen_ptr.asFunction<_dart_popen>();

  int pclose(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclose_ptr = _lookup<ffi.NativeFunction<_c_pclose>>('pclose');
  late final _dart_pclose _pclose = _pclose_ptr.asFunction<_dart_pclose>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermid_ptr = _lookup<ffi.NativeFunction<_c_ctermid>>('ctermid');
  late final _dart_ctermid _ctermid = _ctermid_ptr.asFunction<_dart_ctermid>();

  void flockfile(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfile_ptr =
      _lookup<ffi.NativeFunction<_c_flockfile>>('flockfile');
  late final _dart_flockfile _flockfile =
      _flockfile_ptr.asFunction<_dart_flockfile>();

  int ftrylockfile(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfile_ptr =
      _lookup<ffi.NativeFunction<_c_ftrylockfile>>('ftrylockfile');
  late final _dart_ftrylockfile _ftrylockfile =
      _ftrylockfile_ptr.asFunction<_dart_ftrylockfile>();

  void funlockfile(
    ffi.Pointer<IO_FILE_> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfile_ptr =
      _lookup<ffi.NativeFunction<_c_funlockfile>>('funlockfile');
  late final _dart_funlockfile _funlockfile =
      _funlockfile_ptr.asFunction<_dart_funlockfile>();

  int __uflow(
    ffi.Pointer<IO_FILE_> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflow_ptr = _lookup<ffi.NativeFunction<_c___uflow>>('__uflow');
  late final _dart___uflow ___uflow = ___uflow_ptr.asFunction<_dart___uflow>();

  int __overflow(
    ffi.Pointer<IO_FILE_> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflow_ptr =
      _lookup<ffi.NativeFunction<_c___overflow>>('__overflow');
  late final _dart___overflow ___overflow =
      ___overflow_ptr.asFunction<_dart___overflow>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_max_ptr =
      _lookup<ffi.NativeFunction<_c___ctype_get_mb_cur_max>>(
          '__ctype_get_mb_cur_max');
  late final _dart___ctype_get_mb_cur_max ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_max_ptr.asFunction<_dart___ctype_get_mb_cur_max>();

  double atof(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atof_ptr = _lookup<ffi.NativeFunction<_c_atof>>('atof');
  late final _dart_atof _atof = _atof_ptr.asFunction<_dart_atof>();

  int atoi(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoi_ptr = _lookup<ffi.NativeFunction<_c_atoi>>('atoi');
  late final _dart_atoi _atoi = _atoi_ptr.asFunction<_dart_atoi>();

  int atol(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atol_ptr = _lookup<ffi.NativeFunction<_c_atol>>('atol');
  late final _dart_atol _atol = _atol_ptr.asFunction<_dart_atol>();

  int atoll(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atoll_ptr = _lookup<ffi.NativeFunction<_c_atoll>>('atoll');
  late final _dart_atoll _atoll = _atoll_ptr.asFunction<_dart_atoll>();

  double strtod(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtod_ptr = _lookup<ffi.NativeFunction<_c_strtod>>('strtod');
  late final _dart_strtod _strtod = _strtod_ptr.asFunction<_dart_strtod>();

  double strtof(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtof_ptr = _lookup<ffi.NativeFunction<_c_strtof>>('strtof');
  late final _dart_strtof _strtof = _strtof_ptr.asFunction<_dart_strtof>();

  int strtol(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol_ptr = _lookup<ffi.NativeFunction<_c_strtol>>('strtol');
  late final _dart_strtol _strtol = _strtol_ptr.asFunction<_dart_strtol>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul_ptr = _lookup<ffi.NativeFunction<_c_strtoul>>('strtoul');
  late final _dart_strtoul _strtoul = _strtoul_ptr.asFunction<_dart_strtoul>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq_ptr = _lookup<ffi.NativeFunction<_c_strtoq>>('strtoq');
  late final _dart_strtoq _strtoq = _strtoq_ptr.asFunction<_dart_strtoq>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq_ptr = _lookup<ffi.NativeFunction<_c_strtouq>>('strtouq');
  late final _dart_strtouq _strtouq = _strtouq_ptr.asFunction<_dart_strtouq>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll_ptr = _lookup<ffi.NativeFunction<_c_strtoll>>('strtoll');
  late final _dart_strtoll _strtoll = _strtoll_ptr.asFunction<_dart_strtoll>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull_ptr =
      _lookup<ffi.NativeFunction<_c_strtoull>>('strtoull');
  late final _dart_strtoull _strtoull =
      _strtoull_ptr.asFunction<_dart_strtoull>();

  ffi.Pointer<ffi.Int8> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64a_ptr = _lookup<ffi.NativeFunction<_c_l64a>>('l64a');
  late final _dart_l64a _l64a = _l64a_ptr.asFunction<_dart_l64a>();

  int a64l(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64l_ptr = _lookup<ffi.NativeFunction<_c_a64l>>('a64l');
  late final _dart_a64l _a64l = _a64l_ptr.asFunction<_dart_a64l>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select_ptr = _lookup<ffi.NativeFunction<_c_select>>('select');
  late final _dart_select _select = _select_ptr.asFunction<_dart_select>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<_sigset_t_> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect_ptr = _lookup<ffi.NativeFunction<_c_pselect>>('pselect');
  late final _dart_pselect _pselect = _pselect_ptr.asFunction<_dart_pselect>();

  int random() {
    return _random();
  }

  late final _random_ptr = _lookup<ffi.NativeFunction<_c_random>>('random');
  late final _dart_random _random = _random_ptr.asFunction<_dart_random>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandom_ptr = _lookup<ffi.NativeFunction<_c_srandom>>('srandom');
  late final _dart_srandom _srandom = _srandom_ptr.asFunction<_dart_srandom>();

  ffi.Pointer<ffi.Int8> initstate(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate_ptr =
      _lookup<ffi.NativeFunction<_c_initstate>>('initstate');
  late final _dart_initstate _initstate =
      _initstate_ptr.asFunction<_dart_initstate>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstate_ptr =
      _lookup<ffi.NativeFunction<_c_setstate>>('setstate');
  late final _dart_setstate _setstate =
      _setstate_ptr.asFunction<_dart_setstate>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_r_ptr =
      _lookup<ffi.NativeFunction<_c_random_r>>('random_r');
  late final _dart_random_r _random_r =
      _random_r_ptr.asFunction<_dart_random_r>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_r_ptr =
      _lookup<ffi.NativeFunction<_c_srandom_r>>('srandom_r');
  late final _dart_srandom_r _srandom_r =
      _srandom_r_ptr.asFunction<_dart_srandom_r>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r_ptr =
      _lookup<ffi.NativeFunction<_c_initstate_r>>('initstate_r');
  late final _dart_initstate_r _initstate_r =
      _initstate_r_ptr.asFunction<_dart_initstate_r>();

  int setstate_r(
    ffi.Pointer<ffi.Int8> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r_ptr =
      _lookup<ffi.NativeFunction<_c_setstate_r>>('setstate_r');
  late final _dart_setstate_r _setstate_r =
      _setstate_r_ptr.asFunction<_dart_setstate_r>();

  int rand() {
    return _rand();
  }

  late final _rand_ptr = _lookup<ffi.NativeFunction<_c_rand>>('rand');
  late final _dart_rand _rand = _rand_ptr.asFunction<_dart_rand>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srand_ptr = _lookup<ffi.NativeFunction<_c_srand>>('srand');
  late final _dart_srand _srand = _srand_ptr.asFunction<_dart_srand>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_r_ptr = _lookup<ffi.NativeFunction<_c_rand_r>>('rand_r');
  late final _dart_rand_r _rand_r = _rand_r_ptr.asFunction<_dart_rand_r>();

  double drand48() {
    return _drand48();
  }

  late final _drand48_ptr = _lookup<ffi.NativeFunction<_c_drand48>>('drand48');
  late final _dart_drand48 _drand48 = _drand48_ptr.asFunction<_dart_drand48>();

  double erand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48_ptr = _lookup<ffi.NativeFunction<_c_erand48>>('erand48');
  late final _dart_erand48 _erand48 = _erand48_ptr.asFunction<_dart_erand48>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48_ptr = _lookup<ffi.NativeFunction<_c_lrand48>>('lrand48');
  late final _dart_lrand48 _lrand48 = _lrand48_ptr.asFunction<_dart_lrand48>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48_ptr = _lookup<ffi.NativeFunction<_c_nrand48>>('nrand48');
  late final _dart_nrand48 _nrand48 = _nrand48_ptr.asFunction<_dart_nrand48>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48_ptr = _lookup<ffi.NativeFunction<_c_mrand48>>('mrand48');
  late final _dart_mrand48 _mrand48 = _mrand48_ptr.asFunction<_dart_mrand48>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48_ptr = _lookup<ffi.NativeFunction<_c_jrand48>>('jrand48');
  late final _dart_jrand48 _jrand48 = _jrand48_ptr.asFunction<_dart_jrand48>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48_ptr = _lookup<ffi.NativeFunction<_c_srand48>>('srand48');
  late final _dart_srand48 _srand48 = _srand48_ptr.asFunction<_dart_srand48>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48_ptr = _lookup<ffi.NativeFunction<_c_seed48>>('seed48');
  late final _dart_seed48 _seed48 = _seed48_ptr.asFunction<_dart_seed48>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48_ptr = _lookup<ffi.NativeFunction<_c_lcong48>>('lcong48');
  late final _dart_lcong48 _lcong48 = _lcong48_ptr.asFunction<_dart_lcong48>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_r_ptr =
      _lookup<ffi.NativeFunction<_c_drand48_r>>('drand48_r');
  late final _dart_drand48_r _drand48_r =
      _drand48_r_ptr.asFunction<_dart_drand48_r>();

  int erand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r_ptr =
      _lookup<ffi.NativeFunction<_c_erand48_r>>('erand48_r');
  late final _dart_erand48_r _erand48_r =
      _erand48_r_ptr.asFunction<_dart_erand48_r>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r_ptr =
      _lookup<ffi.NativeFunction<_c_lrand48_r>>('lrand48_r');
  late final _dart_lrand48_r _lrand48_r =
      _lrand48_r_ptr.asFunction<_dart_lrand48_r>();

  int nrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r_ptr =
      _lookup<ffi.NativeFunction<_c_nrand48_r>>('nrand48_r');
  late final _dart_nrand48_r _nrand48_r =
      _nrand48_r_ptr.asFunction<_dart_nrand48_r>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r_ptr =
      _lookup<ffi.NativeFunction<_c_mrand48_r>>('mrand48_r');
  late final _dart_mrand48_r _mrand48_r =
      _mrand48_r_ptr.asFunction<_dart_mrand48_r>();

  int jrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r_ptr =
      _lookup<ffi.NativeFunction<_c_jrand48_r>>('jrand48_r');
  late final _dart_jrand48_r _jrand48_r =
      _jrand48_r_ptr.asFunction<_dart_jrand48_r>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r_ptr =
      _lookup<ffi.NativeFunction<_c_srand48_r>>('srand48_r');
  late final _dart_srand48_r _srand48_r =
      _srand48_r_ptr.asFunction<_dart_srand48_r>();

  int seed48_r(
    ffi.Pointer<ffi.Uint16> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r_ptr =
      _lookup<ffi.NativeFunction<_c_seed48_r>>('seed48_r');
  late final _dart_seed48_r _seed48_r =
      _seed48_r_ptr.asFunction<_dart_seed48_r>();

  int lcong48_r(
    ffi.Pointer<ffi.Uint16> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r_ptr =
      _lookup<ffi.NativeFunction<_c_lcong48_r>>('lcong48_r');
  late final _dart_lcong48_r _lcong48_r =
      _lcong48_r_ptr.asFunction<_dart_lcong48_r>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _malloc_ptr = _lookup<ffi.NativeFunction<_c_malloc>>('malloc');
  late final _dart_malloc _malloc = _malloc_ptr.asFunction<_dart_malloc>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _calloc_ptr = _lookup<ffi.NativeFunction<_c_calloc>>('calloc');
  late final _dart_calloc _calloc = _calloc_ptr.asFunction<_dart_calloc>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _realloc_ptr = _lookup<ffi.NativeFunction<_c_realloc>>('realloc');
  late final _dart_realloc _realloc = _realloc_ptr.asFunction<_dart_realloc>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray_ptr =
      _lookup<ffi.NativeFunction<_c_reallocarray>>('reallocarray');
  late final _dart_reallocarray _reallocarray =
      _reallocarray_ptr.asFunction<_dart_reallocarray>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _free_ptr = _lookup<ffi.NativeFunction<_c_free>>('free');
  late final _dart_free _free = _free_ptr.asFunction<_dart_free>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _alloca_ptr = _lookup<ffi.NativeFunction<_c_alloca>>('alloca');
  late final _dart_alloca _alloca = _alloca_ptr.asFunction<_dart_alloca>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _valloc_ptr = _lookup<ffi.NativeFunction<_c_valloc>>('valloc');
  late final _dart_valloc _valloc = _valloc_ptr.asFunction<_dart_valloc>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign_ptr =
      _lookup<ffi.NativeFunction<_c_posix_memalign>>('posix_memalign');
  late final _dart_posix_memalign _posix_memalign =
      _posix_memalign_ptr.asFunction<_dart_posix_memalign>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_aligned_alloc>>('aligned_alloc');
  late final _dart_aligned_alloc _aligned_alloc =
      _aligned_alloc_ptr.asFunction<_dart_aligned_alloc>();

  void abort() {
    return _abort();
  }

  late final _abort_ptr = _lookup<ffi.NativeFunction<_c_abort>>('abort');
  late final _dart_abort _abort = _abort_ptr.asFunction<_dart_abort>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexit_ptr = _lookup<ffi.NativeFunction<_c_atexit>>('atexit');
  late final _dart_atexit _atexit = _atexit_ptr.asFunction<_dart_atexit>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exit_ptr =
      _lookup<ffi.NativeFunction<_c_at_quick_exit>>('at_quick_exit');
  late final _dart_at_quick_exit _at_quick_exit =
      _at_quick_exit_ptr.asFunction<_dart_at_quick_exit>();

  int on_exit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exit_ptr = _lookup<ffi.NativeFunction<_c_on_exit>>('on_exit');
  late final _dart_on_exit _on_exit = _on_exit_ptr.asFunction<_dart_on_exit>();

  void exit(
    int __status,
  ) {
    return _exit_1(
      __status,
    );
  }

  late final _exit_ptr = _lookup<ffi.NativeFunction<_c_exit>>('exit');
  late final _dart_exit _exit_1 = _exit_ptr.asFunction<_dart_exit>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exit_ptr =
      _lookup<ffi.NativeFunction<_c_quick_exit>>('quick_exit');
  late final _dart_quick_exit _quick_exit =
      _quick_exit_ptr.asFunction<_dart_quick_exit>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __Exit_ptr = _lookup<ffi.NativeFunction<_c__Exit>>('_Exit');
  late final _dart__Exit __Exit = __Exit_ptr.asFunction<_dart__Exit>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenv_ptr = _lookup<ffi.NativeFunction<_c_getenv>>('getenv');
  late final _dart_getenv _getenv = _getenv_ptr.asFunction<_dart_getenv>();

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenv_ptr = _lookup<ffi.NativeFunction<_c_putenv>>('putenv');
  late final _dart_putenv _putenv = _putenv_ptr.asFunction<_dart_putenv>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv_ptr = _lookup<ffi.NativeFunction<_c_setenv>>('setenv');
  late final _dart_setenv _setenv = _setenv_ptr.asFunction<_dart_setenv>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenv_ptr =
      _lookup<ffi.NativeFunction<_c_unsetenv>>('unsetenv');
  late final _dart_unsetenv _unsetenv =
      _unsetenv_ptr.asFunction<_dart_unsetenv>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenv_ptr =
      _lookup<ffi.NativeFunction<_c_clearenv>>('clearenv');
  late final _dart_clearenv _clearenv =
      _clearenv_ptr.asFunction<_dart_clearenv>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktemp_ptr = _lookup<ffi.NativeFunction<_c_mktemp>>('mktemp');
  late final _dart_mktemp _mktemp = _mktemp_ptr.asFunction<_dart_mktemp>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstemp_ptr = _lookup<ffi.NativeFunction<_c_mkstemp>>('mkstemp');
  late final _dart_mkstemp _mkstemp = _mkstemp_ptr.asFunction<_dart_mkstemp>();

  int mkstemps(
    ffi.Pointer<ffi.Int8> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps_ptr =
      _lookup<ffi.NativeFunction<_c_mkstemps>>('mkstemps');
  late final _dart_mkstemps _mkstemps =
      _mkstemps_ptr.asFunction<_dart_mkstemps>();

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtemp_ptr = _lookup<ffi.NativeFunction<_c_mkdtemp>>('mkdtemp');
  late final _dart_mkdtemp _mkdtemp = _mkdtemp_ptr.asFunction<_dart_mkdtemp>();

  int system(
    ffi.Pointer<ffi.Int8> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _system_ptr = _lookup<ffi.NativeFunction<_c_system>>('system');
  late final _dart_system _system = _system_ptr.asFunction<_dart_system>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpath_ptr =
      _lookup<ffi.NativeFunction<_c_realpath>>('realpath');
  late final _dart_realpath _realpath =
      _realpath_ptr.asFunction<_dart_realpath>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch_ptr = _lookup<ffi.NativeFunction<_c_bsearch>>('bsearch');
  late final _dart_bsearch _bsearch = _bsearch_ptr.asFunction<_dart_bsearch>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort_ptr = _lookup<ffi.NativeFunction<_c_qsort>>('qsort');
  late final _dart_qsort _qsort = _qsort_ptr.asFunction<_dart_qsort>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _abs_ptr = _lookup<ffi.NativeFunction<_c_abs>>('abs');
  late final _dart_abs _abs = _abs_ptr.asFunction<_dart_abs>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labs_ptr = _lookup<ffi.NativeFunction<_c_labs>>('labs');
  late final _dart_labs _labs = _labs_ptr.asFunction<_dart_labs>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabs_ptr = _lookup<ffi.NativeFunction<_c_llabs>>('llabs');
  late final _dart_llabs _llabs = _llabs_ptr.asFunction<_dart_llabs>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _div_ptr = _lookup<ffi.NativeFunction<_c_div>>('div');
  late final _dart_div _div = _div_ptr.asFunction<_dart_div>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldiv_ptr = _lookup<ffi.NativeFunction<_c_ldiv>>('ldiv');
  late final _dart_ldiv _ldiv = _ldiv_ptr.asFunction<_dart_ldiv>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldiv_ptr = _lookup<ffi.NativeFunction<_c_lldiv>>('lldiv');
  late final _dart_lldiv _lldiv = _lldiv_ptr.asFunction<_dart_lldiv>();

  ffi.Pointer<ffi.Int8> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt_ptr = _lookup<ffi.NativeFunction<_c_ecvt>>('ecvt');
  late final _dart_ecvt _ecvt = _ecvt_ptr.asFunction<_dart_ecvt>();

  ffi.Pointer<ffi.Int8> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt_ptr = _lookup<ffi.NativeFunction<_c_fcvt>>('fcvt');
  late final _dart_fcvt _fcvt = _fcvt_ptr.asFunction<_dart_fcvt>();

  ffi.Pointer<ffi.Int8> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt_ptr = _lookup<ffi.NativeFunction<_c_gcvt>>('gcvt');
  late final _dart_gcvt _gcvt = _gcvt_ptr.asFunction<_dart_gcvt>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r_ptr = _lookup<ffi.NativeFunction<_c_ecvt_r>>('ecvt_r');
  late final _dart_ecvt_r _ecvt_r = _ecvt_r_ptr.asFunction<_dart_ecvt_r>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r_ptr = _lookup<ffi.NativeFunction<_c_fcvt_r>>('fcvt_r');
  late final _dart_fcvt_r _fcvt_r = _fcvt_r_ptr.asFunction<_dart_fcvt_r>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblen_ptr = _lookup<ffi.NativeFunction<_c_mblen>>('mblen');
  late final _dart_mblen _mblen = _mblen_ptr.asFunction<_dart_mblen>();

  int mbtowc(
    ffi.Pointer<ffi.Int32> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc_ptr = _lookup<ffi.NativeFunction<_c_mbtowc>>('mbtowc');
  late final _dart_mbtowc _mbtowc = _mbtowc_ptr.asFunction<_dart_mbtowc>();

  int wctomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctomb_ptr = _lookup<ffi.NativeFunction<_c_wctomb>>('wctomb');
  late final _dart_wctomb _wctomb = _wctomb_ptr.asFunction<_dart_wctomb>();

  int mbstowcs(
    ffi.Pointer<ffi.Int32> __pwcs,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs_ptr =
      _lookup<ffi.NativeFunction<_c_mbstowcs>>('mbstowcs');
  late final _dart_mbstowcs _mbstowcs =
      _mbstowcs_ptr.asFunction<_dart_mbstowcs>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int32> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs_ptr =
      _lookup<ffi.NativeFunction<_c_wcstombs>>('wcstombs');
  late final _dart_wcstombs _wcstombs =
      _wcstombs_ptr.asFunction<_dart_wcstombs>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatch_ptr = _lookup<ffi.NativeFunction<_c_rpmatch>>('rpmatch');
  late final _dart_rpmatch _rpmatch = _rpmatch_ptr.asFunction<_dart_rpmatch>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt_ptr =
      _lookup<ffi.NativeFunction<_c_getsubopt>>('getsubopt');
  late final _dart_getsubopt _getsubopt =
      _getsubopt_ptr.asFunction<_dart_getsubopt>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg_ptr =
      _lookup<ffi.NativeFunction<_c_getloadavg>>('getloadavg');
  late final _dart_getloadavg _getloadavg =
      _getloadavg_ptr.asFunction<_dart_getloadavg>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy_ptr = _lookup<ffi.NativeFunction<_c_memcpy>>('memcpy');
  late final _dart_memcpy _memcpy = _memcpy_ptr.asFunction<_dart_memcpy>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove_ptr = _lookup<ffi.NativeFunction<_c_memmove>>('memmove');
  late final _dart_memmove _memmove = _memmove_ptr.asFunction<_dart_memmove>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy_ptr = _lookup<ffi.NativeFunction<_c_memccpy>>('memccpy');
  late final _dart_memccpy _memccpy = _memccpy_ptr.asFunction<_dart_memccpy>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memset_ptr = _lookup<ffi.NativeFunction<_c_memset>>('memset');
  late final _dart_memset _memset = _memset_ptr.asFunction<_dart_memset>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp_ptr = _lookup<ffi.NativeFunction<_c_memcmp>>('memcmp');
  late final _dart_memcmp _memcmp = _memcmp_ptr.asFunction<_dart_memcmp>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr_ptr = _lookup<ffi.NativeFunction<_c_memchr>>('memchr');
  late final _dart_memchr _memchr = _memchr_ptr.asFunction<_dart_memchr>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpy_ptr = _lookup<ffi.NativeFunction<_c_strcpy>>('strcpy');
  late final _dart_strcpy _strcpy = _strcpy_ptr.asFunction<_dart_strcpy>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy_ptr = _lookup<ffi.NativeFunction<_c_strncpy>>('strncpy');
  late final _dart_strncpy _strncpy = _strncpy_ptr.asFunction<_dart_strncpy>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcat_ptr = _lookup<ffi.NativeFunction<_c_strcat>>('strcat');
  late final _dart_strcat _strcat = _strcat_ptr.asFunction<_dart_strcat>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat_ptr = _lookup<ffi.NativeFunction<_c_strncat>>('strncat');
  late final _dart_strncat _strncat = _strncat_ptr.asFunction<_dart_strncat>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmp_ptr = _lookup<ffi.NativeFunction<_c_strcmp>>('strcmp');
  late final _dart_strcmp _strcmp = _strcmp_ptr.asFunction<_dart_strcmp>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp_ptr = _lookup<ffi.NativeFunction<_c_strncmp>>('strncmp');
  late final _dart_strncmp _strncmp = _strncmp_ptr.asFunction<_dart_strncmp>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcoll_ptr = _lookup<ffi.NativeFunction<_c_strcoll>>('strcoll');
  late final _dart_strcoll _strcoll = _strcoll_ptr.asFunction<_dart_strcoll>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm_ptr = _lookup<ffi.NativeFunction<_c_strxfrm>>('strxfrm');
  late final _dart_strxfrm _strxfrm = _strxfrm_ptr.asFunction<_dart_strxfrm>();

  int strcoll_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    ffi.Pointer<_locale_struct_> __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l_ptr =
      _lookup<ffi.NativeFunction<_c_strcoll_l>>('strcoll_l');
  late final _dart_strcoll_l _strcoll_l =
      _strcoll_l_ptr.asFunction<_dart_strcoll_l>();

  int strxfrm_l(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
    ffi.Pointer<_locale_struct_> __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l_ptr =
      _lookup<ffi.NativeFunction<_c_strxfrm_l>>('strxfrm_l');
  late final _dart_strxfrm_l _strxfrm_l =
      _strxfrm_l_ptr.asFunction<_dart_strxfrm_l>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdup_ptr = _lookup<ffi.NativeFunction<_c_strdup>>('strdup');
  late final _dart_strdup _strdup = _strdup_ptr.asFunction<_dart_strdup>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndup_ptr = _lookup<ffi.NativeFunction<_c_strndup>>('strndup');
  late final _dart_strndup _strndup = _strndup_ptr.asFunction<_dart_strndup>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchr_ptr = _lookup<ffi.NativeFunction<_c_strchr>>('strchr');
  late final _dart_strchr _strchr = _strchr_ptr.asFunction<_dart_strchr>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchr_ptr = _lookup<ffi.NativeFunction<_c_strrchr>>('strrchr');
  late final _dart_strrchr _strrchr = _strrchr_ptr.asFunction<_dart_strrchr>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspn_ptr = _lookup<ffi.NativeFunction<_c_strcspn>>('strcspn');
  late final _dart_strcspn _strcspn = _strcspn_ptr.asFunction<_dart_strcspn>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspn_ptr = _lookup<ffi.NativeFunction<_c_strspn>>('strspn');
  late final _dart_strspn _strspn = _strspn_ptr.asFunction<_dart_strspn>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrk_ptr = _lookup<ffi.NativeFunction<_c_strpbrk>>('strpbrk');
  late final _dart_strpbrk _strpbrk = _strpbrk_ptr.asFunction<_dart_strpbrk>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __haystack,
    ffi.Pointer<ffi.Int8> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstr_ptr = _lookup<ffi.NativeFunction<_c_strstr>>('strstr');
  late final _dart_strstr _strstr = _strstr_ptr.asFunction<_dart_strstr>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtok_ptr = _lookup<ffi.NativeFunction<_c_strtok>>('strtok');
  late final _dart_strtok _strtok = _strtok_ptr.asFunction<_dart_strtok>();

  ffi.Pointer<ffi.Int8> __strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r_ptr =
      _lookup<ffi.NativeFunction<_c___strtok_r>>('__strtok_r');
  late final _dart___strtok_r ___strtok_r =
      ___strtok_r_ptr.asFunction<_dart___strtok_r>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r_ptr =
      _lookup<ffi.NativeFunction<_c_strtok_r>>('strtok_r');
  late final _dart_strtok_r _strtok_r =
      _strtok_r_ptr.asFunction<_dart_strtok_r>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlen_ptr = _lookup<ffi.NativeFunction<_c_strlen>>('strlen');
  late final _dart_strlen _strlen = _strlen_ptr.asFunction<_dart_strlen>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlen_ptr = _lookup<ffi.NativeFunction<_c_strnlen>>('strnlen');
  late final _dart_strnlen _strnlen = _strnlen_ptr.asFunction<_dart_strnlen>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerror_ptr =
      _lookup<ffi.NativeFunction<_c_strerror>>('strerror');
  late final _dart_strerror _strerror =
      _strerror_ptr.asFunction<_dart_strerror>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r_ptr =
      _lookup<ffi.NativeFunction<_c_strerror_r>>('strerror_r');
  late final _dart_strerror_r _strerror_r =
      _strerror_r_ptr.asFunction<_dart_strerror_r>();

  ffi.Pointer<ffi.Int8> strerror_l(
    int __errnum,
    ffi.Pointer<_locale_struct_> __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_l_ptr =
      _lookup<ffi.NativeFunction<_c_strerror_l>>('strerror_l');
  late final _dart_strerror_l _strerror_l =
      _strerror_l_ptr.asFunction<_dart_strerror_l>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp_ptr = _lookup<ffi.NativeFunction<_c_bcmp>>('bcmp');
  late final _dart_bcmp _bcmp = _bcmp_ptr.asFunction<_dart_bcmp>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy_ptr = _lookup<ffi.NativeFunction<_c_bcopy>>('bcopy');
  late final _dart_bcopy _bcopy = _bcopy_ptr.asFunction<_dart_bcopy>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzero_ptr = _lookup<ffi.NativeFunction<_c_bzero>>('bzero');
  late final _dart_bzero _bzero = _bzero_ptr.asFunction<_dart_bzero>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _index_ptr = _lookup<ffi.NativeFunction<_c_index>>('index');
  late final _dart_index _index = _index_ptr.asFunction<_dart_index>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindex_ptr = _lookup<ffi.NativeFunction<_c_rindex>>('rindex');
  late final _dart_rindex _rindex = _rindex_ptr.asFunction<_dart_rindex>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffs_ptr = _lookup<ffi.NativeFunction<_c_ffs>>('ffs');
  late final _dart_ffs _ffs = _ffs_ptr.asFunction<_dart_ffs>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffsl_ptr = _lookup<ffi.NativeFunction<_c_ffsl>>('ffsl');
  late final _dart_ffsl _ffsl = _ffsl_ptr.asFunction<_dart_ffsl>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsll_ptr = _lookup<ffi.NativeFunction<_c_ffsll>>('ffsll');
  late final _dart_ffsll _ffsll = _ffsll_ptr.asFunction<_dart_ffsll>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strcasecmp>>('strcasecmp');
  late final _dart_strcasecmp _strcasecmp =
      _strcasecmp_ptr.asFunction<_dart_strcasecmp>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strncasecmp>>('strncasecmp');
  late final _dart_strncasecmp _strncasecmp =
      _strncasecmp_ptr.asFunction<_dart_strncasecmp>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    ffi.Pointer<_locale_struct_> __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l_ptr =
      _lookup<ffi.NativeFunction<_c_strcasecmp_l>>('strcasecmp_l');
  late final _dart_strcasecmp_l _strcasecmp_l =
      _strcasecmp_l_ptr.asFunction<_dart_strcasecmp_l>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
    ffi.Pointer<_locale_struct_> __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l_ptr =
      _lookup<ffi.NativeFunction<_c_strncasecmp_l>>('strncasecmp_l');
  late final _dart_strncasecmp_l _strncasecmp_l =
      _strncasecmp_l_ptr.asFunction<_dart_strncasecmp_l>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzero_ptr =
      _lookup<ffi.NativeFunction<_c_explicit_bzero>>('explicit_bzero');
  late final _dart_explicit_bzero _explicit_bzero =
      _explicit_bzero_ptr.asFunction<_dart_explicit_bzero>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsep_ptr = _lookup<ffi.NativeFunction<_c_strsep>>('strsep');
  late final _dart_strsep _strsep = _strsep_ptr.asFunction<_dart_strsep>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignal_ptr =
      _lookup<ffi.NativeFunction<_c_strsignal>>('strsignal');
  late final _dart_strsignal _strsignal =
      _strsignal_ptr.asFunction<_dart_strsignal>();

  ffi.Pointer<ffi.Int8> __stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpy_ptr =
      _lookup<ffi.NativeFunction<_c___stpcpy>>('__stpcpy');
  late final _dart___stpcpy ___stpcpy =
      ___stpcpy_ptr.asFunction<_dart___stpcpy>();

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpy_ptr = _lookup<ffi.NativeFunction<_c_stpcpy>>('stpcpy');
  late final _dart_stpcpy _stpcpy = _stpcpy_ptr.asFunction<_dart_stpcpy>();

  ffi.Pointer<ffi.Int8> __stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy_ptr =
      _lookup<ffi.NativeFunction<_c___stpncpy>>('__stpncpy');
  late final _dart___stpncpy ___stpncpy =
      ___stpncpy_ptr.asFunction<_dart___stpncpy>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy_ptr = _lookup<ffi.NativeFunction<_c_stpncpy>>('stpncpy');
  late final _dart_stpncpy _stpncpy = _stpncpy_ptr.asFunction<_dart_stpncpy>();

  int fcntl(
    int __fd,
    int __cmd,
  ) {
    return _fcntl(
      __fd,
      __cmd,
    );
  }

  late final _fcntl_ptr = _lookup<ffi.NativeFunction<_c_fcntl>>('fcntl');
  late final _dart_fcntl _fcntl = _fcntl_ptr.asFunction<_dart_fcntl>();

  int open(
    ffi.Pointer<ffi.Int8> __file,
    int __oflag,
  ) {
    return _open(
      __file,
      __oflag,
    );
  }

  late final _open_ptr = _lookup<ffi.NativeFunction<_c_open>>('open');
  late final _dart_open _open = _open_ptr.asFunction<_dart_open>();

  int openat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __oflag,
  ) {
    return _openat(
      __fd,
      __file,
      __oflag,
    );
  }

  late final _openat_ptr = _lookup<ffi.NativeFunction<_c_openat>>('openat');
  late final _dart_openat _openat = _openat_ptr.asFunction<_dart_openat>();

  int creat(
    ffi.Pointer<ffi.Int8> __file,
    int __mode,
  ) {
    return _creat(
      __file,
      __mode,
    );
  }

  late final _creat_ptr = _lookup<ffi.NativeFunction<_c_creat>>('creat');
  late final _dart_creat _creat = _creat_ptr.asFunction<_dart_creat>();

  int posix_fadvise(
    int __fd,
    int __offset,
    int __len,
    int __advise,
  ) {
    return _posix_fadvise(
      __fd,
      __offset,
      __len,
      __advise,
    );
  }

  late final _posix_fadvise_ptr =
      _lookup<ffi.NativeFunction<_c_posix_fadvise>>('posix_fadvise');
  late final _dart_posix_fadvise _posix_fadvise =
      _posix_fadvise_ptr.asFunction<_dart_posix_fadvise>();

  int posix_fallocate(
    int __fd,
    int __offset,
    int __len,
  ) {
    return _posix_fallocate(
      __fd,
      __offset,
      __len,
    );
  }

  late final _posix_fallocate_ptr =
      _lookup<ffi.NativeFunction<_c_posix_fallocate>>('posix_fallocate');
  late final _dart_posix_fallocate _posix_fallocate =
      _posix_fallocate_ptr.asFunction<_dart_posix_fallocate>();

  void __assert_fail(
    ffi.Pointer<ffi.Int8> __assertion,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
    ffi.Pointer<ffi.Int8> __function,
  ) {
    return ___assert_fail(
      __assertion,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_fail_ptr =
      _lookup<ffi.NativeFunction<_c___assert_fail>>('__assert_fail');
  late final _dart___assert_fail ___assert_fail =
      ___assert_fail_ptr.asFunction<_dart___assert_fail>();

  void __assert_perror_fail(
    int __errnum,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
    ffi.Pointer<ffi.Int8> __function,
  ) {
    return ___assert_perror_fail(
      __errnum,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_perror_fail_ptr =
      _lookup<ffi.NativeFunction<_c___assert_perror_fail>>(
          '__assert_perror_fail');
  late final _dart___assert_perror_fail ___assert_perror_fail =
      ___assert_perror_fail_ptr.asFunction<_dart___assert_perror_fail>();

  void __assert(
    ffi.Pointer<ffi.Int8> __assertion,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
  ) {
    return ___assert(
      __assertion,
      __file,
      __line,
    );
  }

  late final ___assert_ptr =
      _lookup<ffi.NativeFunction<_c___assert>>('__assert');
  late final _dart___assert ___assert =
      ___assert_ptr.asFunction<_dart___assert>();

  int poll(
    ffi.Pointer<pollfd> __fds,
    int __nfds,
    int __timeout,
  ) {
    return _poll(
      __fds,
      __nfds,
      __timeout,
    );
  }

  late final _poll_ptr = _lookup<ffi.NativeFunction<_c_poll>>('poll');
  late final _dart_poll _poll = _poll_ptr.asFunction<_dart_poll>();

  ffi.Pointer<ffi.Int32> __errno_location() {
    return ___errno_location();
  }

  late final ___errno_location_ptr =
      _lookup<ffi.NativeFunction<_c___errno_location>>('__errno_location');
  late final _dart___errno_location ___errno_location =
      ___errno_location_ptr.asFunction<_dart___errno_location>();

  int clock() {
    return _clock();
  }

  late final _clock_ptr = _lookup<ffi.NativeFunction<_c_clock>>('clock');
  late final _dart_clock _clock = _clock_ptr.asFunction<_dart_clock>();

  int time(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _time_ptr = _lookup<ffi.NativeFunction<_c_time>>('time');
  late final _dart_time _time = _time_ptr.asFunction<_dart_time>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftime_ptr =
      _lookup<ffi.NativeFunction<_c_difftime>>('difftime');
  late final _dart_difftime _difftime =
      _difftime_ptr.asFunction<_dart_difftime>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktime_ptr = _lookup<ffi.NativeFunction<_c_mktime>>('mktime');
  late final _dart_mktime _mktime = _mktime_ptr.asFunction<_dart_mktime>();

  int strftime(
    ffi.Pointer<ffi.Int8> __s,
    int __maxsize,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftime_ptr =
      _lookup<ffi.NativeFunction<_c_strftime>>('strftime');
  late final _dart_strftime _strftime =
      _strftime_ptr.asFunction<_dart_strftime>();

  int strftime_l(
    ffi.Pointer<ffi.Int8> __s,
    int __maxsize,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<tm> __tp,
    ffi.Pointer<_locale_struct_> __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_l_ptr =
      _lookup<ffi.NativeFunction<_c_strftime_l>>('strftime_l');
  late final _dart_strftime_l _strftime_l =
      _strftime_l_ptr.asFunction<_dart_strftime_l>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtime_ptr = _lookup<ffi.NativeFunction<_c_gmtime>>('gmtime');
  late final _dart_gmtime _gmtime = _gmtime_ptr.asFunction<_dart_gmtime>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtime_ptr =
      _lookup<ffi.NativeFunction<_c_localtime>>('localtime');
  late final _dart_localtime _localtime =
      _localtime_ptr.asFunction<_dart_localtime>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_r_ptr =
      _lookup<ffi.NativeFunction<_c_gmtime_r>>('gmtime_r');
  late final _dart_gmtime_r _gmtime_r =
      _gmtime_r_ptr.asFunction<_dart_gmtime_r>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_r_ptr =
      _lookup<ffi.NativeFunction<_c_localtime_r>>('localtime_r');
  late final _dart_localtime_r _localtime_r =
      _localtime_r_ptr.asFunction<_dart_localtime_r>();

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctime_ptr = _lookup<ffi.NativeFunction<_c_asctime>>('asctime');
  late final _dart_asctime _asctime = _asctime_ptr.asFunction<_dart_asctime>();

  ffi.Pointer<ffi.Int8> ctime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctime_ptr = _lookup<ffi.NativeFunction<_c_ctime>>('ctime');
  late final _dart_ctime _ctime = _ctime_ptr.asFunction<_dart_ctime>();

  ffi.Pointer<ffi.Int8> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_r_ptr =
      _lookup<ffi.NativeFunction<_c_asctime_r>>('asctime_r');
  late final _dart_asctime_r _asctime_r =
      _asctime_r_ptr.asFunction<_dart_asctime_r>();

  ffi.Pointer<ffi.Int8> ctime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_r_ptr = _lookup<ffi.NativeFunction<_c_ctime_r>>('ctime_r');
  late final _dart_ctime_r _ctime_r = _ctime_r_ptr.asFunction<_dart_ctime_r>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int32> ___daylight =
      _lookup<ffi.Int32>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Int64> ___timezone =
      _lookup<ffi.Int64>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzset_ptr = _lookup<ffi.NativeFunction<_c_tzset>>('tzset');
  late final _dart_tzset _tzset = _tzset_ptr.asFunction<_dart_tzset>();

  late final ffi.Pointer<ffi.Int32> _daylight = _lookup<ffi.Int32>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Int64> _timezone = _lookup<ffi.Int64>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegm_ptr = _lookup<ffi.NativeFunction<_c_timegm>>('timegm');
  late final _dart_timegm _timegm = _timegm_ptr.asFunction<_dart_timegm>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocal_ptr =
      _lookup<ffi.NativeFunction<_c_timelocal>>('timelocal');
  late final _dart_timelocal _timelocal =
      _timelocal_ptr.asFunction<_dart_timelocal>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysize_ptr = _lookup<ffi.NativeFunction<_c_dysize>>('dysize');
  late final _dart_dysize _dysize = _dysize_ptr.asFunction<_dart_dysize>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleep_ptr =
      _lookup<ffi.NativeFunction<_c_nanosleep>>('nanosleep');
  late final _dart_nanosleep _nanosleep =
      _nanosleep_ptr.asFunction<_dart_nanosleep>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getres_ptr =
      _lookup<ffi.NativeFunction<_c_clock_getres>>('clock_getres');
  late final _dart_clock_getres _clock_getres =
      _clock_getres_ptr.asFunction<_dart_clock_getres>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettime_ptr =
      _lookup<ffi.NativeFunction<_c_clock_gettime>>('clock_gettime');
  late final _dart_clock_gettime _clock_gettime =
      _clock_gettime_ptr.asFunction<_dart_clock_gettime>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settime_ptr =
      _lookup<ffi.NativeFunction<_c_clock_settime>>('clock_settime');
  late final _dart_clock_settime _clock_settime =
      _clock_settime_ptr.asFunction<_dart_clock_settime>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleep_ptr =
      _lookup<ffi.NativeFunction<_c_clock_nanosleep>>('clock_nanosleep');
  late final _dart_clock_nanosleep _clock_nanosleep =
      _clock_nanosleep_ptr.asFunction<_dart_clock_nanosleep>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<ffi.Int32> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockid_ptr =
      _lookup<ffi.NativeFunction<_c_clock_getcpuclockid>>(
          'clock_getcpuclockid');
  late final _dart_clock_getcpuclockid _clock_getcpuclockid =
      _clock_getcpuclockid_ptr.asFunction<_dart_clock_getcpuclockid>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_create_ptr =
      _lookup<ffi.NativeFunction<_c_timer_create>>('timer_create');
  late final _dart_timer_create _timer_create =
      _timer_create_ptr.asFunction<_dart_timer_create>();

  int timer_delete(
    ffi.Pointer<ffi.Void> __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_delete_ptr =
      _lookup<ffi.NativeFunction<_c_timer_delete>>('timer_delete');
  late final _dart_timer_delete _timer_delete =
      _timer_delete_ptr.asFunction<_dart_timer_delete>();

  int timer_settime(
    ffi.Pointer<ffi.Void> __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settime_ptr =
      _lookup<ffi.NativeFunction<_c_timer_settime>>('timer_settime');
  late final _dart_timer_settime _timer_settime =
      _timer_settime_ptr.asFunction<_dart_timer_settime>();

  int timer_gettime(
    ffi.Pointer<ffi.Void> __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettime_ptr =
      _lookup<ffi.NativeFunction<_c_timer_gettime>>('timer_gettime');
  late final _dart_timer_gettime _timer_gettime =
      _timer_gettime_ptr.asFunction<_dart_timer_gettime>();

  int timer_getoverrun(
    ffi.Pointer<ffi.Void> __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrun_ptr =
      _lookup<ffi.NativeFunction<_c_timer_getoverrun>>('timer_getoverrun');
  late final _dart_timer_getoverrun _timer_getoverrun =
      _timer_getoverrun_ptr.asFunction<_dart_timer_getoverrun>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_get_ptr =
      _lookup<ffi.NativeFunction<_c_timespec_get>>('timespec_get');
  late final _dart_timespec_get _timespec_get =
      _timespec_get_ptr.asFunction<_dart_timespec_get>();

  ffi.Pointer<ffi.Int8> snd_asoundlib_version() {
    return _snd_asoundlib_version();
  }

  late final _snd_asoundlib_version_ptr =
      _lookup<ffi.NativeFunction<_c_snd_asoundlib_version>>(
          'snd_asoundlib_version');
  late final _dart_snd_asoundlib_version _snd_asoundlib_version =
      _snd_asoundlib_version_ptr.asFunction<_dart_snd_asoundlib_version>();

  late final ffi.Pointer<ffi.Pointer<snd_dlsym_link>> _snd_dlsym_start =
      _lookup<ffi.Pointer<snd_dlsym_link>>('snd_dlsym_start');

  ffi.Pointer<snd_dlsym_link> get snd_dlsym_start => _snd_dlsym_start.value;

  set snd_dlsym_start(ffi.Pointer<snd_dlsym_link> value) =>
      _snd_dlsym_start.value = value;

  int snd_dlpath(
    ffi.Pointer<ffi.Int8> path,
    int path_len,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_dlpath(
      path,
      path_len,
      name,
    );
  }

  late final _snd_dlpath_ptr =
      _lookup<ffi.NativeFunction<_c_snd_dlpath>>('snd_dlpath');
  late final _dart_snd_dlpath _snd_dlpath =
      _snd_dlpath_ptr.asFunction<_dart_snd_dlpath>();

  ffi.Pointer<ffi.Void> snd_dlopen(
    ffi.Pointer<ffi.Int8> file,
    int mode,
    ffi.Pointer<ffi.Int8> errbuf,
    int errbuflen,
  ) {
    return _snd_dlopen(
      file,
      mode,
      errbuf,
      errbuflen,
    );
  }

  late final _snd_dlopen_ptr =
      _lookup<ffi.NativeFunction<_c_snd_dlopen>>('snd_dlopen');
  late final _dart_snd_dlopen _snd_dlopen =
      _snd_dlopen_ptr.asFunction<_dart_snd_dlopen>();

  ffi.Pointer<ffi.Void> snd_dlsym(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> version,
  ) {
    return _snd_dlsym(
      handle,
      name,
      version,
    );
  }

  late final _snd_dlsym_ptr =
      _lookup<ffi.NativeFunction<_c_snd_dlsym>>('snd_dlsym');
  late final _dart_snd_dlsym _snd_dlsym =
      _snd_dlsym_ptr.asFunction<_dart_snd_dlsym>();

  int snd_dlclose(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _snd_dlclose(
      handle,
    );
  }

  late final _snd_dlclose_ptr =
      _lookup<ffi.NativeFunction<_c_snd_dlclose>>('snd_dlclose');
  late final _dart_snd_dlclose _snd_dlclose =
      _snd_dlclose_ptr.asFunction<_dart_snd_dlclose>();

  int snd_async_add_handler(
    ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
    int fd,
    ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_async_add_handler(
      handler,
      fd,
      callback,
      private_data,
    );
  }

  late final _snd_async_add_handler_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_add_handler>>(
          'snd_async_add_handler');
  late final _dart_snd_async_add_handler _snd_async_add_handler =
      _snd_async_add_handler_ptr.asFunction<_dart_snd_async_add_handler>();

  int snd_async_del_handler(
    ffi.Pointer<snd_async_handler_> handler,
  ) {
    return _snd_async_del_handler(
      handler,
    );
  }

  late final _snd_async_del_handler_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_del_handler>>(
          'snd_async_del_handler');
  late final _dart_snd_async_del_handler _snd_async_del_handler =
      _snd_async_del_handler_ptr.asFunction<_dart_snd_async_del_handler>();

  int snd_async_handler_get_fd(
    ffi.Pointer<snd_async_handler_> handler,
  ) {
    return _snd_async_handler_get_fd(
      handler,
    );
  }

  late final _snd_async_handler_get_fd_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_handler_get_fd>>(
          'snd_async_handler_get_fd');
  late final _dart_snd_async_handler_get_fd _snd_async_handler_get_fd =
      _snd_async_handler_get_fd_ptr
          .asFunction<_dart_snd_async_handler_get_fd>();

  int snd_async_handler_get_signo(
    ffi.Pointer<snd_async_handler_> handler,
  ) {
    return _snd_async_handler_get_signo(
      handler,
    );
  }

  late final _snd_async_handler_get_signo_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_handler_get_signo>>(
          'snd_async_handler_get_signo');
  late final _dart_snd_async_handler_get_signo _snd_async_handler_get_signo =
      _snd_async_handler_get_signo_ptr
          .asFunction<_dart_snd_async_handler_get_signo>();

  ffi.Pointer<ffi.Void> snd_async_handler_get_callback_private(
    ffi.Pointer<snd_async_handler_> handler,
  ) {
    return _snd_async_handler_get_callback_private(
      handler,
    );
  }

  late final _snd_async_handler_get_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_handler_get_callback_private>>(
          'snd_async_handler_get_callback_private');
  late final _dart_snd_async_handler_get_callback_private
      _snd_async_handler_get_callback_private =
      _snd_async_handler_get_callback_private_ptr
          .asFunction<_dart_snd_async_handler_get_callback_private>();

  ffi.Pointer<snd_shm_area> snd_shm_area_create(
    int shmid,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _snd_shm_area_create(
      shmid,
      ptr,
    );
  }

  late final _snd_shm_area_create_ptr =
      _lookup<ffi.NativeFunction<_c_snd_shm_area_create>>(
          'snd_shm_area_create');
  late final _dart_snd_shm_area_create _snd_shm_area_create =
      _snd_shm_area_create_ptr.asFunction<_dart_snd_shm_area_create>();

  ffi.Pointer<snd_shm_area> snd_shm_area_share(
    ffi.Pointer<snd_shm_area> area,
  ) {
    return _snd_shm_area_share(
      area,
    );
  }

  late final _snd_shm_area_share_ptr =
      _lookup<ffi.NativeFunction<_c_snd_shm_area_share>>('snd_shm_area_share');
  late final _dart_snd_shm_area_share _snd_shm_area_share =
      _snd_shm_area_share_ptr.asFunction<_dart_snd_shm_area_share>();

  int snd_shm_area_destroy(
    ffi.Pointer<snd_shm_area> area,
  ) {
    return _snd_shm_area_destroy(
      area,
    );
  }

  late final _snd_shm_area_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_shm_area_destroy>>(
          'snd_shm_area_destroy');
  late final _dart_snd_shm_area_destroy _snd_shm_area_destroy =
      _snd_shm_area_destroy_ptr.asFunction<_dart_snd_shm_area_destroy>();

  int snd_user_file(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> result,
  ) {
    return _snd_user_file(
      file,
      result,
    );
  }

  late final _snd_user_file_ptr =
      _lookup<ffi.NativeFunction<_c_snd_user_file>>('snd_user_file');
  late final _dart_snd_user_file _snd_user_file =
      _snd_user_file_ptr.asFunction<_dart_snd_user_file>();

  int snd_input_stdio_open(
    ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _snd_input_stdio_open(
      inputp,
      file,
      mode,
    );
  }

  late final _snd_input_stdio_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_input_stdio_open>>(
          'snd_input_stdio_open');
  late final _dart_snd_input_stdio_open _snd_input_stdio_open =
      _snd_input_stdio_open_ptr.asFunction<_dart_snd_input_stdio_open>();

  int snd_input_stdio_attach(
    ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
    ffi.Pointer<IO_FILE_> fp,
    int _close,
  ) {
    return _snd_input_stdio_attach(
      inputp,
      fp,
      _close,
    );
  }

  late final _snd_input_stdio_attach_ptr =
      _lookup<ffi.NativeFunction<_c_snd_input_stdio_attach>>(
          'snd_input_stdio_attach');
  late final _dart_snd_input_stdio_attach _snd_input_stdio_attach =
      _snd_input_stdio_attach_ptr.asFunction<_dart_snd_input_stdio_attach>();

  int snd_input_buffer_open(
    ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
    ffi.Pointer<ffi.Int8> buffer,
    int size,
  ) {
    return _snd_input_buffer_open(
      inputp,
      buffer,
      size,
    );
  }

  late final _snd_input_buffer_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_input_buffer_open>>(
          'snd_input_buffer_open');
  late final _dart_snd_input_buffer_open _snd_input_buffer_open =
      _snd_input_buffer_open_ptr.asFunction<_dart_snd_input_buffer_open>();

  int snd_input_close(
    ffi.Pointer<snd_input_> input,
  ) {
    return _snd_input_close(
      input,
    );
  }

  late final _snd_input_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_input_close>>('snd_input_close');
  late final _dart_snd_input_close _snd_input_close =
      _snd_input_close_ptr.asFunction<_dart_snd_input_close>();

  int snd_input_scanf(
    ffi.Pointer<snd_input_> input,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _snd_input_scanf(
      input,
      format,
    );
  }

  late final _snd_input_scanf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_input_scanf>>('snd_input_scanf');
  late final _dart_snd_input_scanf _snd_input_scanf =
      _snd_input_scanf_ptr.asFunction<_dart_snd_input_scanf>();

  ffi.Pointer<ffi.Int8> snd_input_gets(
    ffi.Pointer<snd_input_> input,
    ffi.Pointer<ffi.Int8> str,
    int size,
  ) {
    return _snd_input_gets(
      input,
      str,
      size,
    );
  }

  late final _snd_input_gets_ptr =
      _lookup<ffi.NativeFunction<_c_snd_input_gets>>('snd_input_gets');
  late final _dart_snd_input_gets _snd_input_gets =
      _snd_input_gets_ptr.asFunction<_dart_snd_input_gets>();

  int snd_input_getc(
    ffi.Pointer<snd_input_> input,
  ) {
    return _snd_input_getc(
      input,
    );
  }

  late final _snd_input_getc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_input_getc>>('snd_input_getc');
  late final _dart_snd_input_getc _snd_input_getc =
      _snd_input_getc_ptr.asFunction<_dart_snd_input_getc>();

  int snd_input_ungetc(
    ffi.Pointer<snd_input_> input,
    int c,
  ) {
    return _snd_input_ungetc(
      input,
      c,
    );
  }

  late final _snd_input_ungetc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_input_ungetc>>('snd_input_ungetc');
  late final _dart_snd_input_ungetc _snd_input_ungetc =
      _snd_input_ungetc_ptr.asFunction<_dart_snd_input_ungetc>();

  int snd_output_stdio_open(
    ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _snd_output_stdio_open(
      outputp,
      file,
      mode,
    );
  }

  late final _snd_output_stdio_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_stdio_open>>(
          'snd_output_stdio_open');
  late final _dart_snd_output_stdio_open _snd_output_stdio_open =
      _snd_output_stdio_open_ptr.asFunction<_dart_snd_output_stdio_open>();

  int snd_output_stdio_attach(
    ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
    ffi.Pointer<IO_FILE_> fp,
    int _close,
  ) {
    return _snd_output_stdio_attach(
      outputp,
      fp,
      _close,
    );
  }

  late final _snd_output_stdio_attach_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_stdio_attach>>(
          'snd_output_stdio_attach');
  late final _dart_snd_output_stdio_attach _snd_output_stdio_attach =
      _snd_output_stdio_attach_ptr.asFunction<_dart_snd_output_stdio_attach>();

  int snd_output_buffer_open(
    ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
  ) {
    return _snd_output_buffer_open(
      outputp,
    );
  }

  late final _snd_output_buffer_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_buffer_open>>(
          'snd_output_buffer_open');
  late final _dart_snd_output_buffer_open _snd_output_buffer_open =
      _snd_output_buffer_open_ptr.asFunction<_dart_snd_output_buffer_open>();

  int snd_output_buffer_string(
    ffi.Pointer<snd_output_> output,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
  ) {
    return _snd_output_buffer_string(
      output,
      buf,
    );
  }

  late final _snd_output_buffer_string_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_buffer_string>>(
          'snd_output_buffer_string');
  late final _dart_snd_output_buffer_string _snd_output_buffer_string =
      _snd_output_buffer_string_ptr
          .asFunction<_dart_snd_output_buffer_string>();

  int snd_output_close(
    ffi.Pointer<snd_output_> output,
  ) {
    return _snd_output_close(
      output,
    );
  }

  late final _snd_output_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_close>>('snd_output_close');
  late final _dart_snd_output_close _snd_output_close =
      _snd_output_close_ptr.asFunction<_dart_snd_output_close>();

  int snd_output_printf(
    ffi.Pointer<snd_output_> output,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _snd_output_printf(
      output,
      format,
    );
  }

  late final _snd_output_printf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_printf>>('snd_output_printf');
  late final _dart_snd_output_printf _snd_output_printf =
      _snd_output_printf_ptr.asFunction<_dart_snd_output_printf>();

  int snd_output_vprintf(
    ffi.Pointer<snd_output_> output,
    ffi.Pointer<ffi.Int8> format,
    int args,
  ) {
    return _snd_output_vprintf(
      output,
      format,
      args,
    );
  }

  late final _snd_output_vprintf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_vprintf>>('snd_output_vprintf');
  late final _dart_snd_output_vprintf _snd_output_vprintf =
      _snd_output_vprintf_ptr.asFunction<_dart_snd_output_vprintf>();

  int snd_output_puts(
    ffi.Pointer<snd_output_> output,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _snd_output_puts(
      output,
      str,
    );
  }

  late final _snd_output_puts_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_puts>>('snd_output_puts');
  late final _dart_snd_output_puts _snd_output_puts =
      _snd_output_puts_ptr.asFunction<_dart_snd_output_puts>();

  int snd_output_putc(
    ffi.Pointer<snd_output_> output,
    int c,
  ) {
    return _snd_output_putc(
      output,
      c,
    );
  }

  late final _snd_output_putc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_putc>>('snd_output_putc');
  late final _dart_snd_output_putc _snd_output_putc =
      _snd_output_putc_ptr.asFunction<_dart_snd_output_putc>();

  int snd_output_flush(
    ffi.Pointer<snd_output_> output,
  ) {
    return _snd_output_flush(
      output,
    );
  }

  late final _snd_output_flush_ptr =
      _lookup<ffi.NativeFunction<_c_snd_output_flush>>('snd_output_flush');
  late final _dart_snd_output_flush _snd_output_flush =
      _snd_output_flush_ptr.asFunction<_dart_snd_output_flush>();

  ffi.Pointer<ffi.Int8> snd_strerror(
    int errnum,
  ) {
    return _snd_strerror(
      errnum,
    );
  }

  late final _snd_strerror_ptr =
      _lookup<ffi.NativeFunction<_c_snd_strerror>>('snd_strerror');
  late final _dart_snd_strerror _snd_strerror =
      _snd_strerror_ptr.asFunction<_dart_snd_strerror>();

  late final ffi
          .Pointer<ffi.Pointer<ffi.NativeFunction<snd_lib_error_handler_t>>>
      _snd_lib_error =
      _lookup<ffi.Pointer<ffi.NativeFunction<snd_lib_error_handler_t>>>(
          'snd_lib_error');

  ffi.Pointer<ffi.NativeFunction<snd_lib_error_handler_t>> get snd_lib_error =>
      _snd_lib_error.value;

  set snd_lib_error(
          ffi.Pointer<ffi.NativeFunction<snd_lib_error_handler_t>> value) =>
      _snd_lib_error.value = value;

  int snd_lib_error_set_handler(
    ffi.Pointer<ffi.NativeFunction<snd_lib_error_handler_t>> handler,
  ) {
    return _snd_lib_error_set_handler(
      handler,
    );
  }

  late final _snd_lib_error_set_handler_ptr =
      _lookup<ffi.NativeFunction<_c_snd_lib_error_set_handler>>(
          'snd_lib_error_set_handler');
  late final _dart_snd_lib_error_set_handler _snd_lib_error_set_handler =
      _snd_lib_error_set_handler_ptr
          .asFunction<_dart_snd_lib_error_set_handler>();

  ffi.Pointer<ffi.NativeFunction<snd_local_error_handler_t>>
      snd_lib_error_set_local(
    ffi.Pointer<ffi.NativeFunction<snd_local_error_handler_t>> func,
  ) {
    return _snd_lib_error_set_local(
      func,
    );
  }

  late final _snd_lib_error_set_local_ptr =
      _lookup<ffi.NativeFunction<_c_snd_lib_error_set_local>>(
          'snd_lib_error_set_local');
  late final _dart_snd_lib_error_set_local _snd_lib_error_set_local =
      _snd_lib_error_set_local_ptr.asFunction<_dart_snd_lib_error_set_local>();

  late final ffi.Pointer<ffi.Pointer<snd_config_>> _snd_config =
      _lookup<ffi.Pointer<snd_config_>>('snd_config');

  ffi.Pointer<snd_config_> get snd_config => _snd_config.value;

  set snd_config(ffi.Pointer<snd_config_> value) => _snd_config.value = value;

  ffi.Pointer<ffi.Int8> snd_config_topdir() {
    return _snd_config_topdir();
  }

  late final _snd_config_topdir_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_topdir>>('snd_config_topdir');
  late final _dart_snd_config_topdir _snd_config_topdir =
      _snd_config_topdir_ptr.asFunction<_dart_snd_config_topdir>();

  int snd_config_top(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ) {
    return _snd_config_top(
      config,
    );
  }

  late final _snd_config_top_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_top>>('snd_config_top');
  late final _dart_snd_config_top _snd_config_top =
      _snd_config_top_ptr.asFunction<_dart_snd_config_top>();

  int snd_config_load(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<snd_input_> in_1,
  ) {
    return _snd_config_load(
      config,
      in_1,
    );
  }

  late final _snd_config_load_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_load>>('snd_config_load');
  late final _dart_snd_config_load _snd_config_load =
      _snd_config_load_ptr.asFunction<_dart_snd_config_load>();

  int snd_config_load_override(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<snd_input_> in_1,
  ) {
    return _snd_config_load_override(
      config,
      in_1,
    );
  }

  late final _snd_config_load_override_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_load_override>>(
          'snd_config_load_override');
  late final _dart_snd_config_load_override _snd_config_load_override =
      _snd_config_load_override_ptr
          .asFunction<_dart_snd_config_load_override>();

  int snd_config_save(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<snd_output_> out,
  ) {
    return _snd_config_save(
      config,
      out,
    );
  }

  late final _snd_config_save_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_save>>('snd_config_save');
  late final _dart_snd_config_save _snd_config_save =
      _snd_config_save_ptr.asFunction<_dart_snd_config_save>();

  int snd_config_update() {
    return _snd_config_update();
  }

  late final _snd_config_update_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_update>>('snd_config_update');
  late final _dart_snd_config_update _snd_config_update =
      _snd_config_update_ptr.asFunction<_dart_snd_config_update>();

  int snd_config_update_r(
    ffi.Pointer<ffi.Pointer<snd_config_>> top,
    ffi.Pointer<ffi.Pointer<snd_config_update_>> update,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _snd_config_update_r(
      top,
      update,
      path,
    );
  }

  late final _snd_config_update_r_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_update_r>>(
          'snd_config_update_r');
  late final _dart_snd_config_update_r _snd_config_update_r =
      _snd_config_update_r_ptr.asFunction<_dart_snd_config_update_r>();

  int snd_config_update_free(
    ffi.Pointer<snd_config_update_> update,
  ) {
    return _snd_config_update_free(
      update,
    );
  }

  late final _snd_config_update_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_update_free>>(
          'snd_config_update_free');
  late final _dart_snd_config_update_free _snd_config_update_free =
      _snd_config_update_free_ptr.asFunction<_dart_snd_config_update_free>();

  int snd_config_update_free_global() {
    return _snd_config_update_free_global();
  }

  late final _snd_config_update_free_global_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_update_free_global>>(
          'snd_config_update_free_global');
  late final _dart_snd_config_update_free_global
      _snd_config_update_free_global = _snd_config_update_free_global_ptr
          .asFunction<_dart_snd_config_update_free_global>();

  int snd_config_update_ref(
    ffi.Pointer<ffi.Pointer<snd_config_>> top,
  ) {
    return _snd_config_update_ref(
      top,
    );
  }

  late final _snd_config_update_ref_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_update_ref>>(
          'snd_config_update_ref');
  late final _dart_snd_config_update_ref _snd_config_update_ref =
      _snd_config_update_ref_ptr.asFunction<_dart_snd_config_update_ref>();

  void snd_config_ref(
    ffi.Pointer<snd_config_> top,
  ) {
    return _snd_config_ref(
      top,
    );
  }

  late final _snd_config_ref_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_ref>>('snd_config_ref');
  late final _dart_snd_config_ref _snd_config_ref =
      _snd_config_ref_ptr.asFunction<_dart_snd_config_ref>();

  void snd_config_unref(
    ffi.Pointer<snd_config_> top,
  ) {
    return _snd_config_unref(
      top,
    );
  }

  late final _snd_config_unref_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_unref>>('snd_config_unref');
  late final _dart_snd_config_unref _snd_config_unref =
      _snd_config_unref_ptr.asFunction<_dart_snd_config_unref>();

  int snd_config_search(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Pointer<snd_config_>> result,
  ) {
    return _snd_config_search(
      config,
      key,
      result,
    );
  }

  late final _snd_config_search_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_search>>('snd_config_search');
  late final _dart_snd_config_search _snd_config_search =
      _snd_config_search_ptr.asFunction<_dart_snd_config_search>();

  int snd_config_searchv(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Pointer<snd_config_>> result,
  ) {
    return _snd_config_searchv(
      config,
      result,
    );
  }

  late final _snd_config_searchv_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_searchv>>('snd_config_searchv');
  late final _dart_snd_config_searchv _snd_config_searchv =
      _snd_config_searchv_ptr.asFunction<_dart_snd_config_searchv>();

  int snd_config_search_definition(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Int8> base,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Pointer<snd_config_>> result,
  ) {
    return _snd_config_search_definition(
      config,
      base,
      key,
      result,
    );
  }

  late final _snd_config_search_definition_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_search_definition>>(
          'snd_config_search_definition');
  late final _dart_snd_config_search_definition _snd_config_search_definition =
      _snd_config_search_definition_ptr
          .asFunction<_dart_snd_config_search_definition>();

  int snd_config_expand(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<snd_config_> root,
    ffi.Pointer<ffi.Int8> args,
    ffi.Pointer<snd_config_> private_data,
    ffi.Pointer<ffi.Pointer<snd_config_>> result,
  ) {
    return _snd_config_expand(
      config,
      root,
      args,
      private_data,
      result,
    );
  }

  late final _snd_config_expand_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_expand>>('snd_config_expand');
  late final _dart_snd_config_expand _snd_config_expand =
      _snd_config_expand_ptr.asFunction<_dart_snd_config_expand>();

  int snd_config_evaluate(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<snd_config_> root,
    ffi.Pointer<snd_config_> private_data,
    ffi.Pointer<ffi.Pointer<snd_config_>> result,
  ) {
    return _snd_config_evaluate(
      config,
      root,
      private_data,
      result,
    );
  }

  late final _snd_config_evaluate_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_evaluate>>(
          'snd_config_evaluate');
  late final _dart_snd_config_evaluate _snd_config_evaluate =
      _snd_config_evaluate_ptr.asFunction<_dart_snd_config_evaluate>();

  int snd_config_add(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<snd_config_> child,
  ) {
    return _snd_config_add(
      config,
      child,
    );
  }

  late final _snd_config_add_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_add>>('snd_config_add');
  late final _dart_snd_config_add _snd_config_add =
      _snd_config_add_ptr.asFunction<_dart_snd_config_add>();

  int snd_config_add_before(
    ffi.Pointer<snd_config_> before,
    ffi.Pointer<snd_config_> child,
  ) {
    return _snd_config_add_before(
      before,
      child,
    );
  }

  late final _snd_config_add_before_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_add_before>>(
          'snd_config_add_before');
  late final _dart_snd_config_add_before _snd_config_add_before =
      _snd_config_add_before_ptr.asFunction<_dart_snd_config_add_before>();

  int snd_config_add_after(
    ffi.Pointer<snd_config_> after,
    ffi.Pointer<snd_config_> child,
  ) {
    return _snd_config_add_after(
      after,
      child,
    );
  }

  late final _snd_config_add_after_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_add_after>>(
          'snd_config_add_after');
  late final _dart_snd_config_add_after _snd_config_add_after =
      _snd_config_add_after_ptr.asFunction<_dart_snd_config_add_after>();

  int snd_config_remove(
    ffi.Pointer<snd_config_> config,
  ) {
    return _snd_config_remove(
      config,
    );
  }

  late final _snd_config_remove_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_remove>>('snd_config_remove');
  late final _dart_snd_config_remove _snd_config_remove =
      _snd_config_remove_ptr.asFunction<_dart_snd_config_remove>();

  int snd_config_delete(
    ffi.Pointer<snd_config_> config,
  ) {
    return _snd_config_delete(
      config,
    );
  }

  late final _snd_config_delete_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_delete>>('snd_config_delete');
  late final _dart_snd_config_delete _snd_config_delete =
      _snd_config_delete_ptr.asFunction<_dart_snd_config_delete>();

  int snd_config_delete_compound_members(
    ffi.Pointer<snd_config_> config,
  ) {
    return _snd_config_delete_compound_members(
      config,
    );
  }

  late final _snd_config_delete_compound_members_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_delete_compound_members>>(
          'snd_config_delete_compound_members');
  late final _dart_snd_config_delete_compound_members
      _snd_config_delete_compound_members =
      _snd_config_delete_compound_members_ptr
          .asFunction<_dart_snd_config_delete_compound_members>();

  int snd_config_copy(
    ffi.Pointer<ffi.Pointer<snd_config_>> dst,
    ffi.Pointer<snd_config_> src,
  ) {
    return _snd_config_copy(
      dst,
      src,
    );
  }

  late final _snd_config_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_copy>>('snd_config_copy');
  late final _dart_snd_config_copy _snd_config_copy =
      _snd_config_copy_ptr.asFunction<_dart_snd_config_copy>();

  int snd_config_make(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
    int type,
  ) {
    return _snd_config_make(
      config,
      key,
      type,
    );
  }

  late final _snd_config_make_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_make>>('snd_config_make');
  late final _dart_snd_config_make _snd_config_make =
      _snd_config_make_ptr.asFunction<_dart_snd_config_make>();

  int snd_config_make_integer(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _snd_config_make_integer(
      config,
      key,
    );
  }

  late final _snd_config_make_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_make_integer>>(
          'snd_config_make_integer');
  late final _dart_snd_config_make_integer _snd_config_make_integer =
      _snd_config_make_integer_ptr.asFunction<_dart_snd_config_make_integer>();

  int snd_config_make_integer64(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _snd_config_make_integer64(
      config,
      key,
    );
  }

  late final _snd_config_make_integer64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_make_integer64>>(
          'snd_config_make_integer64');
  late final _dart_snd_config_make_integer64 _snd_config_make_integer64 =
      _snd_config_make_integer64_ptr
          .asFunction<_dart_snd_config_make_integer64>();

  int snd_config_make_real(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _snd_config_make_real(
      config,
      key,
    );
  }

  late final _snd_config_make_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_make_real>>(
          'snd_config_make_real');
  late final _dart_snd_config_make_real _snd_config_make_real =
      _snd_config_make_real_ptr.asFunction<_dart_snd_config_make_real>();

  int snd_config_make_string(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _snd_config_make_string(
      config,
      key,
    );
  }

  late final _snd_config_make_string_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_make_string>>(
          'snd_config_make_string');
  late final _dart_snd_config_make_string _snd_config_make_string =
      _snd_config_make_string_ptr.asFunction<_dart_snd_config_make_string>();

  int snd_config_make_pointer(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _snd_config_make_pointer(
      config,
      key,
    );
  }

  late final _snd_config_make_pointer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_make_pointer>>(
          'snd_config_make_pointer');
  late final _dart_snd_config_make_pointer _snd_config_make_pointer =
      _snd_config_make_pointer_ptr.asFunction<_dart_snd_config_make_pointer>();

  int snd_config_make_compound(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
    int join,
  ) {
    return _snd_config_make_compound(
      config,
      key,
      join,
    );
  }

  late final _snd_config_make_compound_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_make_compound>>(
          'snd_config_make_compound');
  late final _dart_snd_config_make_compound _snd_config_make_compound =
      _snd_config_make_compound_ptr
          .asFunction<_dart_snd_config_make_compound>();

  int snd_config_imake_integer(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
    int value,
  ) {
    return _snd_config_imake_integer(
      config,
      key,
      value,
    );
  }

  late final _snd_config_imake_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_imake_integer>>(
          'snd_config_imake_integer');
  late final _dart_snd_config_imake_integer _snd_config_imake_integer =
      _snd_config_imake_integer_ptr
          .asFunction<_dart_snd_config_imake_integer>();

  int snd_config_imake_integer64(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
    int value,
  ) {
    return _snd_config_imake_integer64(
      config,
      key,
      value,
    );
  }

  late final _snd_config_imake_integer64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_imake_integer64>>(
          'snd_config_imake_integer64');
  late final _dart_snd_config_imake_integer64 _snd_config_imake_integer64 =
      _snd_config_imake_integer64_ptr
          .asFunction<_dart_snd_config_imake_integer64>();

  int snd_config_imake_real(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
    double value,
  ) {
    return _snd_config_imake_real(
      config,
      key,
      value,
    );
  }

  late final _snd_config_imake_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_imake_real>>(
          'snd_config_imake_real');
  late final _dart_snd_config_imake_real _snd_config_imake_real =
      _snd_config_imake_real_ptr.asFunction<_dart_snd_config_imake_real>();

  int snd_config_imake_string(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> ascii,
  ) {
    return _snd_config_imake_string(
      config,
      key,
      ascii,
    );
  }

  late final _snd_config_imake_string_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_imake_string>>(
          'snd_config_imake_string');
  late final _dart_snd_config_imake_string _snd_config_imake_string =
      _snd_config_imake_string_ptr.asFunction<_dart_snd_config_imake_string>();

  int snd_config_imake_safe_string(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> ascii,
  ) {
    return _snd_config_imake_safe_string(
      config,
      key,
      ascii,
    );
  }

  late final _snd_config_imake_safe_string_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_imake_safe_string>>(
          'snd_config_imake_safe_string');
  late final _dart_snd_config_imake_safe_string _snd_config_imake_safe_string =
      _snd_config_imake_safe_string_ptr
          .asFunction<_dart_snd_config_imake_safe_string>();

  int snd_config_imake_pointer(
    ffi.Pointer<ffi.Pointer<snd_config_>> config,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _snd_config_imake_pointer(
      config,
      key,
      ptr,
    );
  }

  late final _snd_config_imake_pointer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_imake_pointer>>(
          'snd_config_imake_pointer');
  late final _dart_snd_config_imake_pointer _snd_config_imake_pointer =
      _snd_config_imake_pointer_ptr
          .asFunction<_dart_snd_config_imake_pointer>();

  int snd_config_get_type(
    ffi.Pointer<snd_config_> config,
  ) {
    return _snd_config_get_type(
      config,
    );
  }

  late final _snd_config_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_type>>(
          'snd_config_get_type');
  late final _dart_snd_config_get_type _snd_config_get_type =
      _snd_config_get_type_ptr.asFunction<_dart_snd_config_get_type>();

  int snd_config_is_array(
    ffi.Pointer<snd_config_> config,
  ) {
    return _snd_config_is_array(
      config,
    );
  }

  late final _snd_config_is_array_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_is_array>>(
          'snd_config_is_array');
  late final _dart_snd_config_is_array _snd_config_is_array =
      _snd_config_is_array_ptr.asFunction<_dart_snd_config_is_array>();

  int snd_config_set_id(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _snd_config_set_id(
      config,
      id,
    );
  }

  late final _snd_config_set_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_set_id>>('snd_config_set_id');
  late final _dart_snd_config_set_id _snd_config_set_id =
      _snd_config_set_id_ptr.asFunction<_dart_snd_config_set_id>();

  int snd_config_set_integer(
    ffi.Pointer<snd_config_> config,
    int value,
  ) {
    return _snd_config_set_integer(
      config,
      value,
    );
  }

  late final _snd_config_set_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_set_integer>>(
          'snd_config_set_integer');
  late final _dart_snd_config_set_integer _snd_config_set_integer =
      _snd_config_set_integer_ptr.asFunction<_dart_snd_config_set_integer>();

  int snd_config_set_integer64(
    ffi.Pointer<snd_config_> config,
    int value,
  ) {
    return _snd_config_set_integer64(
      config,
      value,
    );
  }

  late final _snd_config_set_integer64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_set_integer64>>(
          'snd_config_set_integer64');
  late final _dart_snd_config_set_integer64 _snd_config_set_integer64 =
      _snd_config_set_integer64_ptr
          .asFunction<_dart_snd_config_set_integer64>();

  int snd_config_set_real(
    ffi.Pointer<snd_config_> config,
    double value,
  ) {
    return _snd_config_set_real(
      config,
      value,
    );
  }

  late final _snd_config_set_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_set_real>>(
          'snd_config_set_real');
  late final _dart_snd_config_set_real _snd_config_set_real =
      _snd_config_set_real_ptr.asFunction<_dart_snd_config_set_real>();

  int snd_config_set_string(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _snd_config_set_string(
      config,
      value,
    );
  }

  late final _snd_config_set_string_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_set_string>>(
          'snd_config_set_string');
  late final _dart_snd_config_set_string _snd_config_set_string =
      _snd_config_set_string_ptr.asFunction<_dart_snd_config_set_string>();

  int snd_config_set_ascii(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Int8> ascii,
  ) {
    return _snd_config_set_ascii(
      config,
      ascii,
    );
  }

  late final _snd_config_set_ascii_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_set_ascii>>(
          'snd_config_set_ascii');
  late final _dart_snd_config_set_ascii _snd_config_set_ascii =
      _snd_config_set_ascii_ptr.asFunction<_dart_snd_config_set_ascii>();

  int snd_config_set_pointer(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _snd_config_set_pointer(
      config,
      ptr,
    );
  }

  late final _snd_config_set_pointer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_set_pointer>>(
          'snd_config_set_pointer');
  late final _dart_snd_config_set_pointer _snd_config_set_pointer =
      _snd_config_set_pointer_ptr.asFunction<_dart_snd_config_set_pointer>();

  int snd_config_get_id(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ) {
    return _snd_config_get_id(
      config,
      value,
    );
  }

  late final _snd_config_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_id>>('snd_config_get_id');
  late final _dart_snd_config_get_id _snd_config_get_id =
      _snd_config_get_id_ptr.asFunction<_dart_snd_config_get_id>();

  int snd_config_get_integer(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _snd_config_get_integer(
      config,
      value,
    );
  }

  late final _snd_config_get_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_integer>>(
          'snd_config_get_integer');
  late final _dart_snd_config_get_integer _snd_config_get_integer =
      _snd_config_get_integer_ptr.asFunction<_dart_snd_config_get_integer>();

  int snd_config_get_integer64(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _snd_config_get_integer64(
      config,
      value,
    );
  }

  late final _snd_config_get_integer64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_integer64>>(
          'snd_config_get_integer64');
  late final _dart_snd_config_get_integer64 _snd_config_get_integer64 =
      _snd_config_get_integer64_ptr
          .asFunction<_dart_snd_config_get_integer64>();

  int snd_config_get_real(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _snd_config_get_real(
      config,
      value,
    );
  }

  late final _snd_config_get_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_real>>(
          'snd_config_get_real');
  late final _dart_snd_config_get_real _snd_config_get_real =
      _snd_config_get_real_ptr.asFunction<_dart_snd_config_get_real>();

  int snd_config_get_ireal(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _snd_config_get_ireal(
      config,
      value,
    );
  }

  late final _snd_config_get_ireal_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_ireal>>(
          'snd_config_get_ireal');
  late final _dart_snd_config_get_ireal _snd_config_get_ireal =
      _snd_config_get_ireal_ptr.asFunction<_dart_snd_config_get_ireal>();

  int snd_config_get_string(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ) {
    return _snd_config_get_string(
      config,
      value,
    );
  }

  late final _snd_config_get_string_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_string>>(
          'snd_config_get_string');
  late final _dart_snd_config_get_string _snd_config_get_string =
      _snd_config_get_string_ptr.asFunction<_dart_snd_config_get_string>();

  int snd_config_get_ascii(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ) {
    return _snd_config_get_ascii(
      config,
      value,
    );
  }

  late final _snd_config_get_ascii_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_ascii>>(
          'snd_config_get_ascii');
  late final _dart_snd_config_get_ascii _snd_config_get_ascii =
      _snd_config_get_ascii_ptr.asFunction<_dart_snd_config_get_ascii>();

  int snd_config_get_pointer(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _snd_config_get_pointer(
      config,
      value,
    );
  }

  late final _snd_config_get_pointer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_pointer>>(
          'snd_config_get_pointer');
  late final _dart_snd_config_get_pointer _snd_config_get_pointer =
      _snd_config_get_pointer_ptr.asFunction<_dart_snd_config_get_pointer>();

  int snd_config_test_id(
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _snd_config_test_id(
      config,
      id,
    );
  }

  late final _snd_config_test_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_test_id>>('snd_config_test_id');
  late final _dart_snd_config_test_id _snd_config_test_id =
      _snd_config_test_id_ptr.asFunction<_dart_snd_config_test_id>();

  ffi.Pointer<snd_config_iterator_> snd_config_iterator_first(
    ffi.Pointer<snd_config_> node,
  ) {
    return _snd_config_iterator_first(
      node,
    );
  }

  late final _snd_config_iterator_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_iterator_first>>(
          'snd_config_iterator_first');
  late final _dart_snd_config_iterator_first _snd_config_iterator_first =
      _snd_config_iterator_first_ptr
          .asFunction<_dart_snd_config_iterator_first>();

  ffi.Pointer<snd_config_iterator_> snd_config_iterator_next(
    ffi.Pointer<snd_config_iterator_> iterator,
  ) {
    return _snd_config_iterator_next(
      iterator,
    );
  }

  late final _snd_config_iterator_next_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_iterator_next>>(
          'snd_config_iterator_next');
  late final _dart_snd_config_iterator_next _snd_config_iterator_next =
      _snd_config_iterator_next_ptr
          .asFunction<_dart_snd_config_iterator_next>();

  ffi.Pointer<snd_config_iterator_> snd_config_iterator_end(
    ffi.Pointer<snd_config_> node,
  ) {
    return _snd_config_iterator_end(
      node,
    );
  }

  late final _snd_config_iterator_end_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_iterator_end>>(
          'snd_config_iterator_end');
  late final _dart_snd_config_iterator_end _snd_config_iterator_end =
      _snd_config_iterator_end_ptr.asFunction<_dart_snd_config_iterator_end>();

  ffi.Pointer<snd_config_> snd_config_iterator_entry(
    ffi.Pointer<snd_config_iterator_> iterator,
  ) {
    return _snd_config_iterator_entry(
      iterator,
    );
  }

  late final _snd_config_iterator_entry_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_iterator_entry>>(
          'snd_config_iterator_entry');
  late final _dart_snd_config_iterator_entry _snd_config_iterator_entry =
      _snd_config_iterator_entry_ptr
          .asFunction<_dart_snd_config_iterator_entry>();

  int snd_config_get_bool_ascii(
    ffi.Pointer<ffi.Int8> ascii,
  ) {
    return _snd_config_get_bool_ascii(
      ascii,
    );
  }

  late final _snd_config_get_bool_ascii_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_bool_ascii>>(
          'snd_config_get_bool_ascii');
  late final _dart_snd_config_get_bool_ascii _snd_config_get_bool_ascii =
      _snd_config_get_bool_ascii_ptr
          .asFunction<_dart_snd_config_get_bool_ascii>();

  int snd_config_get_bool(
    ffi.Pointer<snd_config_> conf,
  ) {
    return _snd_config_get_bool(
      conf,
    );
  }

  late final _snd_config_get_bool_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_bool>>(
          'snd_config_get_bool');
  late final _dart_snd_config_get_bool _snd_config_get_bool =
      _snd_config_get_bool_ptr.asFunction<_dart_snd_config_get_bool>();

  int snd_config_get_ctl_iface_ascii(
    ffi.Pointer<ffi.Int8> ascii,
  ) {
    return _snd_config_get_ctl_iface_ascii(
      ascii,
    );
  }

  late final _snd_config_get_ctl_iface_ascii_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_ctl_iface_ascii>>(
          'snd_config_get_ctl_iface_ascii');
  late final _dart_snd_config_get_ctl_iface_ascii
      _snd_config_get_ctl_iface_ascii = _snd_config_get_ctl_iface_ascii_ptr
          .asFunction<_dart_snd_config_get_ctl_iface_ascii>();

  int snd_config_get_ctl_iface(
    ffi.Pointer<snd_config_> conf,
  ) {
    return _snd_config_get_ctl_iface(
      conf,
    );
  }

  late final _snd_config_get_ctl_iface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_config_get_ctl_iface>>(
          'snd_config_get_ctl_iface');
  late final _dart_snd_config_get_ctl_iface _snd_config_get_ctl_iface =
      _snd_config_get_ctl_iface_ptr
          .asFunction<_dart_snd_config_get_ctl_iface>();

  int snd_names_list(
    ffi.Pointer<ffi.Int8> iface,
    ffi.Pointer<ffi.Pointer<snd_devname>> list,
  ) {
    return _snd_names_list(
      iface,
      list,
    );
  }

  late final _snd_names_list_ptr =
      _lookup<ffi.NativeFunction<_c_snd_names_list>>('snd_names_list');
  late final _dart_snd_names_list _snd_names_list =
      _snd_names_list_ptr.asFunction<_dart_snd_names_list>();

  void snd_names_list_free(
    ffi.Pointer<snd_devname> list,
  ) {
    return _snd_names_list_free(
      list,
    );
  }

  late final _snd_names_list_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_names_list_free>>(
          'snd_names_list_free');
  late final _dart_snd_names_list_free _snd_names_list_free =
      _snd_names_list_free_ptr.asFunction<_dart_snd_names_list_free>();

  int snd_pcm_open(
    ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
    ffi.Pointer<ffi.Int8> name,
    int stream,
    int mode,
  ) {
    return _snd_pcm_open(
      pcm,
      name,
      stream,
      mode,
    );
  }

  late final _snd_pcm_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_open>>('snd_pcm_open');
  late final _dart_snd_pcm_open _snd_pcm_open =
      _snd_pcm_open_ptr.asFunction<_dart_snd_pcm_open>();

  int snd_pcm_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
    ffi.Pointer<ffi.Int8> name,
    int stream,
    int mode,
    ffi.Pointer<snd_config_> lconf,
  ) {
    return _snd_pcm_open_lconf(
      pcm,
      name,
      stream,
      mode,
      lconf,
    );
  }

  late final _snd_pcm_open_lconf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_open_lconf>>('snd_pcm_open_lconf');
  late final _dart_snd_pcm_open_lconf _snd_pcm_open_lconf =
      _snd_pcm_open_lconf_ptr.asFunction<_dart_snd_pcm_open_lconf>();

  int snd_pcm_open_fallback(
    ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
    ffi.Pointer<snd_config_> root,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> orig_name,
    int stream,
    int mode,
  ) {
    return _snd_pcm_open_fallback(
      pcm,
      root,
      name,
      orig_name,
      stream,
      mode,
    );
  }

  late final _snd_pcm_open_fallback_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_open_fallback>>(
          'snd_pcm_open_fallback');
  late final _dart_snd_pcm_open_fallback _snd_pcm_open_fallback =
      _snd_pcm_open_fallback_ptr.asFunction<_dart_snd_pcm_open_fallback>();

  int snd_pcm_close(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_close(
      pcm,
    );
  }

  late final _snd_pcm_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_close>>('snd_pcm_close');
  late final _dart_snd_pcm_close _snd_pcm_close =
      _snd_pcm_close_ptr.asFunction<_dart_snd_pcm_close>();

  ffi.Pointer<ffi.Int8> snd_pcm_name(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_name(
      pcm,
    );
  }

  late final _snd_pcm_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_name>>('snd_pcm_name');
  late final _dart_snd_pcm_name _snd_pcm_name =
      _snd_pcm_name_ptr.asFunction<_dart_snd_pcm_name>();

  int snd_pcm_type(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_type(
      pcm,
    );
  }

  late final _snd_pcm_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_type>>('snd_pcm_type');
  late final _dart_snd_pcm_type _snd_pcm_type =
      _snd_pcm_type_ptr.asFunction<_dart_snd_pcm_type>();

  int snd_pcm_stream(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_stream(
      pcm,
    );
  }

  late final _snd_pcm_stream_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_stream>>('snd_pcm_stream');
  late final _dart_snd_pcm_stream _snd_pcm_stream =
      _snd_pcm_stream_ptr.asFunction<_dart_snd_pcm_stream>();

  int snd_pcm_poll_descriptors_count(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_poll_descriptors_count(
      pcm,
    );
  }

  late final _snd_pcm_poll_descriptors_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_poll_descriptors_count>>(
          'snd_pcm_poll_descriptors_count');
  late final _dart_snd_pcm_poll_descriptors_count
      _snd_pcm_poll_descriptors_count = _snd_pcm_poll_descriptors_count_ptr
          .asFunction<_dart_snd_pcm_poll_descriptors_count>();

  int snd_pcm_poll_descriptors(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_pcm_poll_descriptors(
      pcm,
      pfds,
      space,
    );
  }

  late final _snd_pcm_poll_descriptors_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_poll_descriptors>>(
          'snd_pcm_poll_descriptors');
  late final _dart_snd_pcm_poll_descriptors _snd_pcm_poll_descriptors =
      _snd_pcm_poll_descriptors_ptr
          .asFunction<_dart_snd_pcm_poll_descriptors>();

  int snd_pcm_poll_descriptors_revents(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.Uint16> revents,
  ) {
    return _snd_pcm_poll_descriptors_revents(
      pcm,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_pcm_poll_descriptors_revents_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_poll_descriptors_revents>>(
          'snd_pcm_poll_descriptors_revents');
  late final _dart_snd_pcm_poll_descriptors_revents
      _snd_pcm_poll_descriptors_revents = _snd_pcm_poll_descriptors_revents_ptr
          .asFunction<_dart_snd_pcm_poll_descriptors_revents>();

  int snd_pcm_nonblock(
    ffi.Pointer<snd_pcm_> pcm,
    int nonblock,
  ) {
    return _snd_pcm_nonblock(
      pcm,
      nonblock,
    );
  }

  late final _snd_pcm_nonblock_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_nonblock>>('snd_pcm_nonblock');
  late final _dart_snd_pcm_nonblock _snd_pcm_nonblock =
      _snd_pcm_nonblock_ptr.asFunction<_dart_snd_pcm_nonblock>();

  int snd_async_add_pcm_handler(
    ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_async_add_pcm_handler(
      handler,
      pcm,
      callback,
      private_data,
    );
  }

  late final _snd_async_add_pcm_handler_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_add_pcm_handler>>(
          'snd_async_add_pcm_handler');
  late final _dart_snd_async_add_pcm_handler _snd_async_add_pcm_handler =
      _snd_async_add_pcm_handler_ptr
          .asFunction<_dart_snd_async_add_pcm_handler>();

  ffi.Pointer<snd_pcm_> snd_async_handler_get_pcm(
    ffi.Pointer<snd_async_handler_> handler,
  ) {
    return _snd_async_handler_get_pcm(
      handler,
    );
  }

  late final _snd_async_handler_get_pcm_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_handler_get_pcm>>(
          'snd_async_handler_get_pcm');
  late final _dart_snd_async_handler_get_pcm _snd_async_handler_get_pcm =
      _snd_async_handler_get_pcm_ptr
          .asFunction<_dart_snd_async_handler_get_pcm>();

  int snd_pcm_info(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_info_> info,
  ) {
    return _snd_pcm_info(
      pcm,
      info,
    );
  }

  late final _snd_pcm_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info>>('snd_pcm_info');
  late final _dart_snd_pcm_info _snd_pcm_info =
      _snd_pcm_info_ptr.asFunction<_dart_snd_pcm_info>();

  int snd_pcm_hw_params_current(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_current(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_current_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_current>>(
          'snd_pcm_hw_params_current');
  late final _dart_snd_pcm_hw_params_current _snd_pcm_hw_params_current =
      _snd_pcm_hw_params_current_ptr
          .asFunction<_dart_snd_pcm_hw_params_current>();

  int snd_pcm_hw_params(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params>>('snd_pcm_hw_params');
  late final _dart_snd_pcm_hw_params _snd_pcm_hw_params =
      _snd_pcm_hw_params_ptr.asFunction<_dart_snd_pcm_hw_params>();

  int snd_pcm_hw_free(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_hw_free(
      pcm,
    );
  }

  late final _snd_pcm_hw_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_free>>('snd_pcm_hw_free');
  late final _dart_snd_pcm_hw_free _snd_pcm_hw_free =
      _snd_pcm_hw_free_ptr.asFunction<_dart_snd_pcm_hw_free>();

  int snd_pcm_sw_params_current(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
  ) {
    return _snd_pcm_sw_params_current(
      pcm,
      params,
    );
  }

  late final _snd_pcm_sw_params_current_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_current>>(
          'snd_pcm_sw_params_current');
  late final _dart_snd_pcm_sw_params_current _snd_pcm_sw_params_current =
      _snd_pcm_sw_params_current_ptr
          .asFunction<_dart_snd_pcm_sw_params_current>();

  int snd_pcm_sw_params(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
  ) {
    return _snd_pcm_sw_params(
      pcm,
      params,
    );
  }

  late final _snd_pcm_sw_params_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params>>('snd_pcm_sw_params');
  late final _dart_snd_pcm_sw_params _snd_pcm_sw_params =
      _snd_pcm_sw_params_ptr.asFunction<_dart_snd_pcm_sw_params>();

  int snd_pcm_prepare(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_prepare(
      pcm,
    );
  }

  late final _snd_pcm_prepare_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_prepare>>('snd_pcm_prepare');
  late final _dart_snd_pcm_prepare _snd_pcm_prepare =
      _snd_pcm_prepare_ptr.asFunction<_dart_snd_pcm_prepare>();

  int snd_pcm_reset(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_reset(
      pcm,
    );
  }

  late final _snd_pcm_reset_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_reset>>('snd_pcm_reset');
  late final _dart_snd_pcm_reset _snd_pcm_reset =
      _snd_pcm_reset_ptr.asFunction<_dart_snd_pcm_reset>();

  int snd_pcm_status(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_status_> status,
  ) {
    return _snd_pcm_status(
      pcm,
      status,
    );
  }

  late final _snd_pcm_status_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status>>('snd_pcm_status');
  late final _dart_snd_pcm_status _snd_pcm_status =
      _snd_pcm_status_ptr.asFunction<_dart_snd_pcm_status>();

  int snd_pcm_start(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_start(
      pcm,
    );
  }

  late final _snd_pcm_start_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_start>>('snd_pcm_start');
  late final _dart_snd_pcm_start _snd_pcm_start =
      _snd_pcm_start_ptr.asFunction<_dart_snd_pcm_start>();

  int snd_pcm_drop(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_drop(
      pcm,
    );
  }

  late final _snd_pcm_drop_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_drop>>('snd_pcm_drop');
  late final _dart_snd_pcm_drop _snd_pcm_drop =
      _snd_pcm_drop_ptr.asFunction<_dart_snd_pcm_drop>();

  int snd_pcm_drain(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_drain(
      pcm,
    );
  }

  late final _snd_pcm_drain_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_drain>>('snd_pcm_drain');
  late final _dart_snd_pcm_drain _snd_pcm_drain =
      _snd_pcm_drain_ptr.asFunction<_dart_snd_pcm_drain>();

  int snd_pcm_pause(
    ffi.Pointer<snd_pcm_> pcm,
    int enable,
  ) {
    return _snd_pcm_pause(
      pcm,
      enable,
    );
  }

  late final _snd_pcm_pause_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_pause>>('snd_pcm_pause');
  late final _dart_snd_pcm_pause _snd_pcm_pause =
      _snd_pcm_pause_ptr.asFunction<_dart_snd_pcm_pause>();

  int snd_pcm_state(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_state(
      pcm,
    );
  }

  late final _snd_pcm_state_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_state>>('snd_pcm_state');
  late final _dart_snd_pcm_state _snd_pcm_state =
      _snd_pcm_state_ptr.asFunction<_dart_snd_pcm_state>();

  int snd_pcm_hwsync(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_hwsync(
      pcm,
    );
  }

  late final _snd_pcm_hwsync_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hwsync>>('snd_pcm_hwsync');
  late final _dart_snd_pcm_hwsync _snd_pcm_hwsync =
      _snd_pcm_hwsync_ptr.asFunction<_dart_snd_pcm_hwsync>();

  int snd_pcm_delay(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Int64> delayp,
  ) {
    return _snd_pcm_delay(
      pcm,
      delayp,
    );
  }

  late final _snd_pcm_delay_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_delay>>('snd_pcm_delay');
  late final _dart_snd_pcm_delay _snd_pcm_delay =
      _snd_pcm_delay_ptr.asFunction<_dart_snd_pcm_delay>();

  int snd_pcm_resume(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_resume(
      pcm,
    );
  }

  late final _snd_pcm_resume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_resume>>('snd_pcm_resume');
  late final _dart_snd_pcm_resume _snd_pcm_resume =
      _snd_pcm_resume_ptr.asFunction<_dart_snd_pcm_resume>();

  int snd_pcm_htimestamp(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Uint64> avail,
    ffi.Pointer<timespec> tstamp,
  ) {
    return _snd_pcm_htimestamp(
      pcm,
      avail,
      tstamp,
    );
  }

  late final _snd_pcm_htimestamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_htimestamp>>('snd_pcm_htimestamp');
  late final _dart_snd_pcm_htimestamp _snd_pcm_htimestamp =
      _snd_pcm_htimestamp_ptr.asFunction<_dart_snd_pcm_htimestamp>();

  int snd_pcm_avail(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_avail(
      pcm,
    );
  }

  late final _snd_pcm_avail_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_avail>>('snd_pcm_avail');
  late final _dart_snd_pcm_avail _snd_pcm_avail =
      _snd_pcm_avail_ptr.asFunction<_dart_snd_pcm_avail>();

  int snd_pcm_avail_update(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_avail_update(
      pcm,
    );
  }

  late final _snd_pcm_avail_update_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_avail_update>>(
          'snd_pcm_avail_update');
  late final _dart_snd_pcm_avail_update _snd_pcm_avail_update =
      _snd_pcm_avail_update_ptr.asFunction<_dart_snd_pcm_avail_update>();

  int snd_pcm_avail_delay(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Int64> availp,
    ffi.Pointer<ffi.Int64> delayp,
  ) {
    return _snd_pcm_avail_delay(
      pcm,
      availp,
      delayp,
    );
  }

  late final _snd_pcm_avail_delay_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_avail_delay>>(
          'snd_pcm_avail_delay');
  late final _dart_snd_pcm_avail_delay _snd_pcm_avail_delay =
      _snd_pcm_avail_delay_ptr.asFunction<_dart_snd_pcm_avail_delay>();

  int snd_pcm_rewindable(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_rewindable(
      pcm,
    );
  }

  late final _snd_pcm_rewindable_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_rewindable>>('snd_pcm_rewindable');
  late final _dart_snd_pcm_rewindable _snd_pcm_rewindable =
      _snd_pcm_rewindable_ptr.asFunction<_dart_snd_pcm_rewindable>();

  int snd_pcm_rewind(
    ffi.Pointer<snd_pcm_> pcm,
    int frames,
  ) {
    return _snd_pcm_rewind(
      pcm,
      frames,
    );
  }

  late final _snd_pcm_rewind_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_rewind>>('snd_pcm_rewind');
  late final _dart_snd_pcm_rewind _snd_pcm_rewind =
      _snd_pcm_rewind_ptr.asFunction<_dart_snd_pcm_rewind>();

  int snd_pcm_forwardable(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_forwardable(
      pcm,
    );
  }

  late final _snd_pcm_forwardable_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_forwardable>>(
          'snd_pcm_forwardable');
  late final _dart_snd_pcm_forwardable _snd_pcm_forwardable =
      _snd_pcm_forwardable_ptr.asFunction<_dart_snd_pcm_forwardable>();

  int snd_pcm_forward(
    ffi.Pointer<snd_pcm_> pcm,
    int frames,
  ) {
    return _snd_pcm_forward(
      pcm,
      frames,
    );
  }

  late final _snd_pcm_forward_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_forward>>('snd_pcm_forward');
  late final _dart_snd_pcm_forward _snd_pcm_forward =
      _snd_pcm_forward_ptr.asFunction<_dart_snd_pcm_forward>();

  int snd_pcm_writei(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_pcm_writei(
      pcm,
      buffer,
      size,
    );
  }

  late final _snd_pcm_writei_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_writei>>('snd_pcm_writei');
  late final _dart_snd_pcm_writei _snd_pcm_writei =
      _snd_pcm_writei_ptr.asFunction<_dart_snd_pcm_writei>();

  int snd_pcm_readi(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_pcm_readi(
      pcm,
      buffer,
      size,
    );
  }

  late final _snd_pcm_readi_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_readi>>('snd_pcm_readi');
  late final _dart_snd_pcm_readi _snd_pcm_readi =
      _snd_pcm_readi_ptr.asFunction<_dart_snd_pcm_readi>();

  int snd_pcm_writen(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
    int size,
  ) {
    return _snd_pcm_writen(
      pcm,
      bufs,
      size,
    );
  }

  late final _snd_pcm_writen_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_writen>>('snd_pcm_writen');
  late final _dart_snd_pcm_writen _snd_pcm_writen =
      _snd_pcm_writen_ptr.asFunction<_dart_snd_pcm_writen>();

  int snd_pcm_readn(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
    int size,
  ) {
    return _snd_pcm_readn(
      pcm,
      bufs,
      size,
    );
  }

  late final _snd_pcm_readn_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_readn>>('snd_pcm_readn');
  late final _dart_snd_pcm_readn _snd_pcm_readn =
      _snd_pcm_readn_ptr.asFunction<_dart_snd_pcm_readn>();

  int snd_pcm_wait(
    ffi.Pointer<snd_pcm_> pcm,
    int timeout,
  ) {
    return _snd_pcm_wait(
      pcm,
      timeout,
    );
  }

  late final _snd_pcm_wait_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_wait>>('snd_pcm_wait');
  late final _dart_snd_pcm_wait _snd_pcm_wait =
      _snd_pcm_wait_ptr.asFunction<_dart_snd_pcm_wait>();

  int snd_pcm_link(
    ffi.Pointer<snd_pcm_> pcm1,
    ffi.Pointer<snd_pcm_> pcm2,
  ) {
    return _snd_pcm_link(
      pcm1,
      pcm2,
    );
  }

  late final _snd_pcm_link_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_link>>('snd_pcm_link');
  late final _dart_snd_pcm_link _snd_pcm_link =
      _snd_pcm_link_ptr.asFunction<_dart_snd_pcm_link>();

  int snd_pcm_unlink(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_unlink(
      pcm,
    );
  }

  late final _snd_pcm_unlink_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_unlink>>('snd_pcm_unlink');
  late final _dart_snd_pcm_unlink _snd_pcm_unlink =
      _snd_pcm_unlink_ptr.asFunction<_dart_snd_pcm_unlink>();

  ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> snd_pcm_query_chmaps(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_query_chmaps(
      pcm,
    );
  }

  late final _snd_pcm_query_chmaps_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_query_chmaps>>(
          'snd_pcm_query_chmaps');
  late final _dart_snd_pcm_query_chmaps _snd_pcm_query_chmaps =
      _snd_pcm_query_chmaps_ptr.asFunction<_dart_snd_pcm_query_chmaps>();

  ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> snd_pcm_query_chmaps_from_hw(
    int card,
    int dev,
    int subdev,
    int stream,
  ) {
    return _snd_pcm_query_chmaps_from_hw(
      card,
      dev,
      subdev,
      stream,
    );
  }

  late final _snd_pcm_query_chmaps_from_hw_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_query_chmaps_from_hw>>(
          'snd_pcm_query_chmaps_from_hw');
  late final _dart_snd_pcm_query_chmaps_from_hw _snd_pcm_query_chmaps_from_hw =
      _snd_pcm_query_chmaps_from_hw_ptr
          .asFunction<_dart_snd_pcm_query_chmaps_from_hw>();

  void snd_pcm_free_chmaps(
    ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> maps,
  ) {
    return _snd_pcm_free_chmaps(
      maps,
    );
  }

  late final _snd_pcm_free_chmaps_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_free_chmaps>>(
          'snd_pcm_free_chmaps');
  late final _dart_snd_pcm_free_chmaps _snd_pcm_free_chmaps =
      _snd_pcm_free_chmaps_ptr.asFunction<_dart_snd_pcm_free_chmaps>();

  ffi.Pointer<snd_pcm_chmap_t> snd_pcm_get_chmap(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_get_chmap(
      pcm,
    );
  }

  late final _snd_pcm_get_chmap_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_get_chmap>>('snd_pcm_get_chmap');
  late final _dart_snd_pcm_get_chmap _snd_pcm_get_chmap =
      _snd_pcm_get_chmap_ptr.asFunction<_dart_snd_pcm_get_chmap>();

  int snd_pcm_set_chmap(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_chmap_t> map,
  ) {
    return _snd_pcm_set_chmap(
      pcm,
      map,
    );
  }

  late final _snd_pcm_set_chmap_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_set_chmap>>('snd_pcm_set_chmap');
  late final _dart_snd_pcm_set_chmap _snd_pcm_set_chmap =
      _snd_pcm_set_chmap_ptr.asFunction<_dart_snd_pcm_set_chmap>();

  ffi.Pointer<ffi.Int8> snd_pcm_chmap_type_name(
    int val,
  ) {
    return _snd_pcm_chmap_type_name(
      val,
    );
  }

  late final _snd_pcm_chmap_type_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_chmap_type_name>>(
          'snd_pcm_chmap_type_name');
  late final _dart_snd_pcm_chmap_type_name _snd_pcm_chmap_type_name =
      _snd_pcm_chmap_type_name_ptr.asFunction<_dart_snd_pcm_chmap_type_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_chmap_name(
    int val,
  ) {
    return _snd_pcm_chmap_name(
      val,
    );
  }

  late final _snd_pcm_chmap_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_chmap_name>>('snd_pcm_chmap_name');
  late final _dart_snd_pcm_chmap_name _snd_pcm_chmap_name =
      _snd_pcm_chmap_name_ptr.asFunction<_dart_snd_pcm_chmap_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_chmap_long_name(
    int val,
  ) {
    return _snd_pcm_chmap_long_name(
      val,
    );
  }

  late final _snd_pcm_chmap_long_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_chmap_long_name>>(
          'snd_pcm_chmap_long_name');
  late final _dart_snd_pcm_chmap_long_name _snd_pcm_chmap_long_name =
      _snd_pcm_chmap_long_name_ptr.asFunction<_dart_snd_pcm_chmap_long_name>();

  int snd_pcm_chmap_print(
    ffi.Pointer<snd_pcm_chmap_t> map,
    int maxlen,
    ffi.Pointer<ffi.Int8> buf,
  ) {
    return _snd_pcm_chmap_print(
      map,
      maxlen,
      buf,
    );
  }

  late final _snd_pcm_chmap_print_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_chmap_print>>(
          'snd_pcm_chmap_print');
  late final _dart_snd_pcm_chmap_print _snd_pcm_chmap_print =
      _snd_pcm_chmap_print_ptr.asFunction<_dart_snd_pcm_chmap_print>();

  int snd_pcm_chmap_from_string(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _snd_pcm_chmap_from_string(
      str,
    );
  }

  late final _snd_pcm_chmap_from_string_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_chmap_from_string>>(
          'snd_pcm_chmap_from_string');
  late final _dart_snd_pcm_chmap_from_string _snd_pcm_chmap_from_string =
      _snd_pcm_chmap_from_string_ptr
          .asFunction<_dart_snd_pcm_chmap_from_string>();

  ffi.Pointer<snd_pcm_chmap_t> snd_pcm_chmap_parse_string(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _snd_pcm_chmap_parse_string(
      str,
    );
  }

  late final _snd_pcm_chmap_parse_string_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_chmap_parse_string>>(
          'snd_pcm_chmap_parse_string');
  late final _dart_snd_pcm_chmap_parse_string _snd_pcm_chmap_parse_string =
      _snd_pcm_chmap_parse_string_ptr
          .asFunction<_dart_snd_pcm_chmap_parse_string>();

  int snd_pcm_recover(
    ffi.Pointer<snd_pcm_> pcm,
    int err,
    int silent,
  ) {
    return _snd_pcm_recover(
      pcm,
      err,
      silent,
    );
  }

  late final _snd_pcm_recover_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_recover>>('snd_pcm_recover');
  late final _dart_snd_pcm_recover _snd_pcm_recover =
      _snd_pcm_recover_ptr.asFunction<_dart_snd_pcm_recover>();

  int snd_pcm_set_params(
    ffi.Pointer<snd_pcm_> pcm,
    int format,
    int access,
    int channels,
    int rate,
    int soft_resample,
    int latency,
  ) {
    return _snd_pcm_set_params(
      pcm,
      format,
      access,
      channels,
      rate,
      soft_resample,
      latency,
    );
  }

  late final _snd_pcm_set_params_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_set_params>>('snd_pcm_set_params');
  late final _dart_snd_pcm_set_params _snd_pcm_set_params =
      _snd_pcm_set_params_ptr.asFunction<_dart_snd_pcm_set_params>();

  int snd_pcm_get_params(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Uint64> buffer_size,
    ffi.Pointer<ffi.Uint64> period_size,
  ) {
    return _snd_pcm_get_params(
      pcm,
      buffer_size,
      period_size,
    );
  }

  late final _snd_pcm_get_params_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_get_params>>('snd_pcm_get_params');
  late final _dart_snd_pcm_get_params _snd_pcm_get_params =
      _snd_pcm_get_params_ptr.asFunction<_dart_snd_pcm_get_params>();

  int snd_pcm_info_sizeof() {
    return _snd_pcm_info_sizeof();
  }

  late final _snd_pcm_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_sizeof>>(
          'snd_pcm_info_sizeof');
  late final _dart_snd_pcm_info_sizeof _snd_pcm_info_sizeof =
      _snd_pcm_info_sizeof_ptr.asFunction<_dart_snd_pcm_info_sizeof>();

  int snd_pcm_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_info_>> ptr,
  ) {
    return _snd_pcm_info_malloc(
      ptr,
    );
  }

  late final _snd_pcm_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_malloc>>(
          'snd_pcm_info_malloc');
  late final _dart_snd_pcm_info_malloc _snd_pcm_info_malloc =
      _snd_pcm_info_malloc_ptr.asFunction<_dart_snd_pcm_info_malloc>();

  void snd_pcm_info_free(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_free(
      obj,
    );
  }

  late final _snd_pcm_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_free>>('snd_pcm_info_free');
  late final _dart_snd_pcm_info_free _snd_pcm_info_free =
      _snd_pcm_info_free_ptr.asFunction<_dart_snd_pcm_info_free>();

  void snd_pcm_info_copy(
    ffi.Pointer<snd_pcm_info_> dst,
    ffi.Pointer<snd_pcm_info_> src,
  ) {
    return _snd_pcm_info_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_copy>>('snd_pcm_info_copy');
  late final _dart_snd_pcm_info_copy _snd_pcm_info_copy =
      _snd_pcm_info_copy_ptr.asFunction<_dart_snd_pcm_info_copy>();

  int snd_pcm_info_get_device(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_device(
      obj,
    );
  }

  late final _snd_pcm_info_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_device>>(
          'snd_pcm_info_get_device');
  late final _dart_snd_pcm_info_get_device _snd_pcm_info_get_device =
      _snd_pcm_info_get_device_ptr.asFunction<_dart_snd_pcm_info_get_device>();

  int snd_pcm_info_get_subdevice(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_subdevice(
      obj,
    );
  }

  late final _snd_pcm_info_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_subdevice>>(
          'snd_pcm_info_get_subdevice');
  late final _dart_snd_pcm_info_get_subdevice _snd_pcm_info_get_subdevice =
      _snd_pcm_info_get_subdevice_ptr
          .asFunction<_dart_snd_pcm_info_get_subdevice>();

  int snd_pcm_info_get_stream(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_stream(
      obj,
    );
  }

  late final _snd_pcm_info_get_stream_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_stream>>(
          'snd_pcm_info_get_stream');
  late final _dart_snd_pcm_info_get_stream _snd_pcm_info_get_stream =
      _snd_pcm_info_get_stream_ptr.asFunction<_dart_snd_pcm_info_get_stream>();

  int snd_pcm_info_get_card(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_card(
      obj,
    );
  }

  late final _snd_pcm_info_get_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_card>>(
          'snd_pcm_info_get_card');
  late final _dart_snd_pcm_info_get_card _snd_pcm_info_get_card =
      _snd_pcm_info_get_card_ptr.asFunction<_dart_snd_pcm_info_get_card>();

  ffi.Pointer<ffi.Int8> snd_pcm_info_get_id(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_id(
      obj,
    );
  }

  late final _snd_pcm_info_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_id>>(
          'snd_pcm_info_get_id');
  late final _dart_snd_pcm_info_get_id _snd_pcm_info_get_id =
      _snd_pcm_info_get_id_ptr.asFunction<_dart_snd_pcm_info_get_id>();

  ffi.Pointer<ffi.Int8> snd_pcm_info_get_name(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_name(
      obj,
    );
  }

  late final _snd_pcm_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_name>>(
          'snd_pcm_info_get_name');
  late final _dart_snd_pcm_info_get_name _snd_pcm_info_get_name =
      _snd_pcm_info_get_name_ptr.asFunction<_dart_snd_pcm_info_get_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_info_get_subdevice_name(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_subdevice_name(
      obj,
    );
  }

  late final _snd_pcm_info_get_subdevice_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_subdevice_name>>(
          'snd_pcm_info_get_subdevice_name');
  late final _dart_snd_pcm_info_get_subdevice_name
      _snd_pcm_info_get_subdevice_name = _snd_pcm_info_get_subdevice_name_ptr
          .asFunction<_dart_snd_pcm_info_get_subdevice_name>();

  int snd_pcm_info_get_class(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_class(
      obj,
    );
  }

  late final _snd_pcm_info_get_class_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_class>>(
          'snd_pcm_info_get_class');
  late final _dart_snd_pcm_info_get_class _snd_pcm_info_get_class =
      _snd_pcm_info_get_class_ptr.asFunction<_dart_snd_pcm_info_get_class>();

  int snd_pcm_info_get_subclass(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_subclass(
      obj,
    );
  }

  late final _snd_pcm_info_get_subclass_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_subclass>>(
          'snd_pcm_info_get_subclass');
  late final _dart_snd_pcm_info_get_subclass _snd_pcm_info_get_subclass =
      _snd_pcm_info_get_subclass_ptr
          .asFunction<_dart_snd_pcm_info_get_subclass>();

  int snd_pcm_info_get_subdevices_count(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_subdevices_count(
      obj,
    );
  }

  late final _snd_pcm_info_get_subdevices_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_subdevices_count>>(
          'snd_pcm_info_get_subdevices_count');
  late final _dart_snd_pcm_info_get_subdevices_count
      _snd_pcm_info_get_subdevices_count =
      _snd_pcm_info_get_subdevices_count_ptr
          .asFunction<_dart_snd_pcm_info_get_subdevices_count>();

  int snd_pcm_info_get_subdevices_avail(
    ffi.Pointer<snd_pcm_info_> obj,
  ) {
    return _snd_pcm_info_get_subdevices_avail(
      obj,
    );
  }

  late final _snd_pcm_info_get_subdevices_avail_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_get_subdevices_avail>>(
          'snd_pcm_info_get_subdevices_avail');
  late final _dart_snd_pcm_info_get_subdevices_avail
      _snd_pcm_info_get_subdevices_avail =
      _snd_pcm_info_get_subdevices_avail_ptr
          .asFunction<_dart_snd_pcm_info_get_subdevices_avail>();

  void snd_pcm_info_set_device(
    ffi.Pointer<snd_pcm_info_> obj,
    int val,
  ) {
    return _snd_pcm_info_set_device(
      obj,
      val,
    );
  }

  late final _snd_pcm_info_set_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_set_device>>(
          'snd_pcm_info_set_device');
  late final _dart_snd_pcm_info_set_device _snd_pcm_info_set_device =
      _snd_pcm_info_set_device_ptr.asFunction<_dart_snd_pcm_info_set_device>();

  void snd_pcm_info_set_subdevice(
    ffi.Pointer<snd_pcm_info_> obj,
    int val,
  ) {
    return _snd_pcm_info_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_pcm_info_set_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_set_subdevice>>(
          'snd_pcm_info_set_subdevice');
  late final _dart_snd_pcm_info_set_subdevice _snd_pcm_info_set_subdevice =
      _snd_pcm_info_set_subdevice_ptr
          .asFunction<_dart_snd_pcm_info_set_subdevice>();

  void snd_pcm_info_set_stream(
    ffi.Pointer<snd_pcm_info_> obj,
    int val,
  ) {
    return _snd_pcm_info_set_stream(
      obj,
      val,
    );
  }

  late final _snd_pcm_info_set_stream_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_info_set_stream>>(
          'snd_pcm_info_set_stream');
  late final _dart_snd_pcm_info_set_stream _snd_pcm_info_set_stream =
      _snd_pcm_info_set_stream_ptr.asFunction<_dart_snd_pcm_info_set_stream>();

  int snd_pcm_hw_params_any(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_any(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_any_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_any>>(
          'snd_pcm_hw_params_any');
  late final _dart_snd_pcm_hw_params_any _snd_pcm_hw_params_any =
      _snd_pcm_hw_params_any_ptr.asFunction<_dart_snd_pcm_hw_params_any>();

  int snd_pcm_hw_params_can_mmap_sample_resolution(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_can_mmap_sample_resolution(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_mmap_sample_resolution_ptr = _lookup<
          ffi.NativeFunction<_c_snd_pcm_hw_params_can_mmap_sample_resolution>>(
      'snd_pcm_hw_params_can_mmap_sample_resolution');
  late final _dart_snd_pcm_hw_params_can_mmap_sample_resolution
      _snd_pcm_hw_params_can_mmap_sample_resolution =
      _snd_pcm_hw_params_can_mmap_sample_resolution_ptr
          .asFunction<_dart_snd_pcm_hw_params_can_mmap_sample_resolution>();

  int snd_pcm_hw_params_is_double(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_is_double(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_double_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_is_double>>(
          'snd_pcm_hw_params_is_double');
  late final _dart_snd_pcm_hw_params_is_double _snd_pcm_hw_params_is_double =
      _snd_pcm_hw_params_is_double_ptr
          .asFunction<_dart_snd_pcm_hw_params_is_double>();

  int snd_pcm_hw_params_is_batch(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_is_batch(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_batch_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_is_batch>>(
          'snd_pcm_hw_params_is_batch');
  late final _dart_snd_pcm_hw_params_is_batch _snd_pcm_hw_params_is_batch =
      _snd_pcm_hw_params_is_batch_ptr
          .asFunction<_dart_snd_pcm_hw_params_is_batch>();

  int snd_pcm_hw_params_is_block_transfer(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_is_block_transfer(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_block_transfer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_is_block_transfer>>(
          'snd_pcm_hw_params_is_block_transfer');
  late final _dart_snd_pcm_hw_params_is_block_transfer
      _snd_pcm_hw_params_is_block_transfer =
      _snd_pcm_hw_params_is_block_transfer_ptr
          .asFunction<_dart_snd_pcm_hw_params_is_block_transfer>();

  int snd_pcm_hw_params_is_monotonic(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_is_monotonic(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_monotonic_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_is_monotonic>>(
          'snd_pcm_hw_params_is_monotonic');
  late final _dart_snd_pcm_hw_params_is_monotonic
      _snd_pcm_hw_params_is_monotonic = _snd_pcm_hw_params_is_monotonic_ptr
          .asFunction<_dart_snd_pcm_hw_params_is_monotonic>();

  int snd_pcm_hw_params_can_overrange(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_can_overrange(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_overrange_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_can_overrange>>(
          'snd_pcm_hw_params_can_overrange');
  late final _dart_snd_pcm_hw_params_can_overrange
      _snd_pcm_hw_params_can_overrange = _snd_pcm_hw_params_can_overrange_ptr
          .asFunction<_dart_snd_pcm_hw_params_can_overrange>();

  int snd_pcm_hw_params_can_pause(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_can_pause(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_pause_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_can_pause>>(
          'snd_pcm_hw_params_can_pause');
  late final _dart_snd_pcm_hw_params_can_pause _snd_pcm_hw_params_can_pause =
      _snd_pcm_hw_params_can_pause_ptr
          .asFunction<_dart_snd_pcm_hw_params_can_pause>();

  int snd_pcm_hw_params_can_resume(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_can_resume(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_resume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_can_resume>>(
          'snd_pcm_hw_params_can_resume');
  late final _dart_snd_pcm_hw_params_can_resume _snd_pcm_hw_params_can_resume =
      _snd_pcm_hw_params_can_resume_ptr
          .asFunction<_dart_snd_pcm_hw_params_can_resume>();

  int snd_pcm_hw_params_is_half_duplex(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_is_half_duplex(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_half_duplex_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_is_half_duplex>>(
          'snd_pcm_hw_params_is_half_duplex');
  late final _dart_snd_pcm_hw_params_is_half_duplex
      _snd_pcm_hw_params_is_half_duplex = _snd_pcm_hw_params_is_half_duplex_ptr
          .asFunction<_dart_snd_pcm_hw_params_is_half_duplex>();

  int snd_pcm_hw_params_is_joint_duplex(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_is_joint_duplex(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_joint_duplex_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_is_joint_duplex>>(
          'snd_pcm_hw_params_is_joint_duplex');
  late final _dart_snd_pcm_hw_params_is_joint_duplex
      _snd_pcm_hw_params_is_joint_duplex =
      _snd_pcm_hw_params_is_joint_duplex_ptr
          .asFunction<_dart_snd_pcm_hw_params_is_joint_duplex>();

  int snd_pcm_hw_params_can_sync_start(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_can_sync_start(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_sync_start_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_can_sync_start>>(
          'snd_pcm_hw_params_can_sync_start');
  late final _dart_snd_pcm_hw_params_can_sync_start
      _snd_pcm_hw_params_can_sync_start = _snd_pcm_hw_params_can_sync_start_ptr
          .asFunction<_dart_snd_pcm_hw_params_can_sync_start>();

  int snd_pcm_hw_params_can_disable_period_wakeup(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_can_disable_period_wakeup(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_disable_period_wakeup_ptr = _lookup<
          ffi.NativeFunction<_c_snd_pcm_hw_params_can_disable_period_wakeup>>(
      'snd_pcm_hw_params_can_disable_period_wakeup');
  late final _dart_snd_pcm_hw_params_can_disable_period_wakeup
      _snd_pcm_hw_params_can_disable_period_wakeup =
      _snd_pcm_hw_params_can_disable_period_wakeup_ptr
          .asFunction<_dart_snd_pcm_hw_params_can_disable_period_wakeup>();

  int snd_pcm_hw_params_supports_audio_wallclock_ts(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_supports_audio_wallclock_ts(
      params,
    );
  }

  late final _snd_pcm_hw_params_supports_audio_wallclock_ts_ptr = _lookup<
          ffi.NativeFunction<_c_snd_pcm_hw_params_supports_audio_wallclock_ts>>(
      'snd_pcm_hw_params_supports_audio_wallclock_ts');
  late final _dart_snd_pcm_hw_params_supports_audio_wallclock_ts
      _snd_pcm_hw_params_supports_audio_wallclock_ts =
      _snd_pcm_hw_params_supports_audio_wallclock_ts_ptr
          .asFunction<_dart_snd_pcm_hw_params_supports_audio_wallclock_ts>();

  int snd_pcm_hw_params_supports_audio_ts_type(
    ffi.Pointer<snd_pcm_hw_params_> params,
    int type,
  ) {
    return _snd_pcm_hw_params_supports_audio_ts_type(
      params,
      type,
    );
  }

  late final _snd_pcm_hw_params_supports_audio_ts_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_supports_audio_ts_type>>(
          'snd_pcm_hw_params_supports_audio_ts_type');
  late final _dart_snd_pcm_hw_params_supports_audio_ts_type
      _snd_pcm_hw_params_supports_audio_ts_type =
      _snd_pcm_hw_params_supports_audio_ts_type_ptr
          .asFunction<_dart_snd_pcm_hw_params_supports_audio_ts_type>();

  int snd_pcm_hw_params_get_rate_numden(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> rate_num,
    ffi.Pointer<ffi.Uint32> rate_den,
  ) {
    return _snd_pcm_hw_params_get_rate_numden(
      params,
      rate_num,
      rate_den,
    );
  }

  late final _snd_pcm_hw_params_get_rate_numden_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_rate_numden>>(
          'snd_pcm_hw_params_get_rate_numden');
  late final _dart_snd_pcm_hw_params_get_rate_numden
      _snd_pcm_hw_params_get_rate_numden =
      _snd_pcm_hw_params_get_rate_numden_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_rate_numden>();

  int snd_pcm_hw_params_get_sbits(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_get_sbits(
      params,
    );
  }

  late final _snd_pcm_hw_params_get_sbits_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_sbits>>(
          'snd_pcm_hw_params_get_sbits');
  late final _dart_snd_pcm_hw_params_get_sbits _snd_pcm_hw_params_get_sbits =
      _snd_pcm_hw_params_get_sbits_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_sbits>();

  int snd_pcm_hw_params_get_fifo_size(
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_get_fifo_size(
      params,
    );
  }

  late final _snd_pcm_hw_params_get_fifo_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_fifo_size>>(
          'snd_pcm_hw_params_get_fifo_size');
  late final _dart_snd_pcm_hw_params_get_fifo_size
      _snd_pcm_hw_params_get_fifo_size = _snd_pcm_hw_params_get_fifo_size_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_fifo_size>();

  int snd_pcm_hw_params_sizeof() {
    return _snd_pcm_hw_params_sizeof();
  }

  late final _snd_pcm_hw_params_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_sizeof>>(
          'snd_pcm_hw_params_sizeof');
  late final _dart_snd_pcm_hw_params_sizeof _snd_pcm_hw_params_sizeof =
      _snd_pcm_hw_params_sizeof_ptr
          .asFunction<_dart_snd_pcm_hw_params_sizeof>();

  int snd_pcm_hw_params_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_hw_params_>> ptr,
  ) {
    return _snd_pcm_hw_params_malloc(
      ptr,
    );
  }

  late final _snd_pcm_hw_params_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_malloc>>(
          'snd_pcm_hw_params_malloc');
  late final _dart_snd_pcm_hw_params_malloc _snd_pcm_hw_params_malloc =
      _snd_pcm_hw_params_malloc_ptr
          .asFunction<_dart_snd_pcm_hw_params_malloc>();

  void snd_pcm_hw_params_free(
    ffi.Pointer<snd_pcm_hw_params_> obj,
  ) {
    return _snd_pcm_hw_params_free(
      obj,
    );
  }

  late final _snd_pcm_hw_params_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_free>>(
          'snd_pcm_hw_params_free');
  late final _dart_snd_pcm_hw_params_free _snd_pcm_hw_params_free =
      _snd_pcm_hw_params_free_ptr.asFunction<_dart_snd_pcm_hw_params_free>();

  void snd_pcm_hw_params_copy(
    ffi.Pointer<snd_pcm_hw_params_> dst,
    ffi.Pointer<snd_pcm_hw_params_> src,
  ) {
    return _snd_pcm_hw_params_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_hw_params_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_copy>>(
          'snd_pcm_hw_params_copy');
  late final _dart_snd_pcm_hw_params_copy _snd_pcm_hw_params_copy =
      _snd_pcm_hw_params_copy_ptr.asFunction<_dart_snd_pcm_hw_params_copy>();

  int snd_pcm_hw_params_get_access(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> _access,
  ) {
    return _snd_pcm_hw_params_get_access(
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_get_access_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_access>>(
          'snd_pcm_hw_params_get_access');
  late final _dart_snd_pcm_hw_params_get_access _snd_pcm_hw_params_get_access =
      _snd_pcm_hw_params_get_access_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_access>();

  int snd_pcm_hw_params_test_access(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int _access,
  ) {
    return _snd_pcm_hw_params_test_access(
      pcm,
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_test_access_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_access>>(
          'snd_pcm_hw_params_test_access');
  late final _dart_snd_pcm_hw_params_test_access
      _snd_pcm_hw_params_test_access = _snd_pcm_hw_params_test_access_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_access>();

  int snd_pcm_hw_params_set_access(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int _access,
  ) {
    return _snd_pcm_hw_params_set_access(
      pcm,
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_set_access_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_access>>(
          'snd_pcm_hw_params_set_access');
  late final _dart_snd_pcm_hw_params_set_access _snd_pcm_hw_params_set_access =
      _snd_pcm_hw_params_set_access_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_access>();

  int snd_pcm_hw_params_set_access_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> _access,
  ) {
    return _snd_pcm_hw_params_set_access_first(
      pcm,
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_set_access_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_access_first>>(
          'snd_pcm_hw_params_set_access_first');
  late final _dart_snd_pcm_hw_params_set_access_first
      _snd_pcm_hw_params_set_access_first =
      _snd_pcm_hw_params_set_access_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_access_first>();

  int snd_pcm_hw_params_set_access_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> _access,
  ) {
    return _snd_pcm_hw_params_set_access_last(
      pcm,
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_set_access_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_access_last>>(
          'snd_pcm_hw_params_set_access_last');
  late final _dart_snd_pcm_hw_params_set_access_last
      _snd_pcm_hw_params_set_access_last =
      _snd_pcm_hw_params_set_access_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_access_last>();

  int snd_pcm_hw_params_set_access_mask(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<snd_pcm_access_mask_> mask,
  ) {
    return _snd_pcm_hw_params_set_access_mask(
      pcm,
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_set_access_mask_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_access_mask>>(
          'snd_pcm_hw_params_set_access_mask');
  late final _dart_snd_pcm_hw_params_set_access_mask
      _snd_pcm_hw_params_set_access_mask =
      _snd_pcm_hw_params_set_access_mask_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_access_mask>();

  int snd_pcm_hw_params_get_access_mask(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<snd_pcm_access_mask_> mask,
  ) {
    return _snd_pcm_hw_params_get_access_mask(
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_get_access_mask_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_access_mask>>(
          'snd_pcm_hw_params_get_access_mask');
  late final _dart_snd_pcm_hw_params_get_access_mask
      _snd_pcm_hw_params_get_access_mask =
      _snd_pcm_hw_params_get_access_mask_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_access_mask>();

  int snd_pcm_hw_params_get_format(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> val,
  ) {
    return _snd_pcm_hw_params_get_format(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_format_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_format>>(
          'snd_pcm_hw_params_get_format');
  late final _dart_snd_pcm_hw_params_get_format _snd_pcm_hw_params_get_format =
      _snd_pcm_hw_params_get_format_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_format>();

  int snd_pcm_hw_params_test_format(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_test_format(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_test_format_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_format>>(
          'snd_pcm_hw_params_test_format');
  late final _dart_snd_pcm_hw_params_test_format
      _snd_pcm_hw_params_test_format = _snd_pcm_hw_params_test_format_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_format>();

  int snd_pcm_hw_params_set_format(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_format(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_format_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_format>>(
          'snd_pcm_hw_params_set_format');
  late final _dart_snd_pcm_hw_params_set_format _snd_pcm_hw_params_set_format =
      _snd_pcm_hw_params_set_format_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_format>();

  int snd_pcm_hw_params_set_format_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> format,
  ) {
    return _snd_pcm_hw_params_set_format_first(
      pcm,
      params,
      format,
    );
  }

  late final _snd_pcm_hw_params_set_format_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_format_first>>(
          'snd_pcm_hw_params_set_format_first');
  late final _dart_snd_pcm_hw_params_set_format_first
      _snd_pcm_hw_params_set_format_first =
      _snd_pcm_hw_params_set_format_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_format_first>();

  int snd_pcm_hw_params_set_format_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> format,
  ) {
    return _snd_pcm_hw_params_set_format_last(
      pcm,
      params,
      format,
    );
  }

  late final _snd_pcm_hw_params_set_format_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_format_last>>(
          'snd_pcm_hw_params_set_format_last');
  late final _dart_snd_pcm_hw_params_set_format_last
      _snd_pcm_hw_params_set_format_last =
      _snd_pcm_hw_params_set_format_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_format_last>();

  int snd_pcm_hw_params_set_format_mask(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<snd_pcm_format_mask_> mask,
  ) {
    return _snd_pcm_hw_params_set_format_mask(
      pcm,
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_set_format_mask_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_format_mask>>(
          'snd_pcm_hw_params_set_format_mask');
  late final _dart_snd_pcm_hw_params_set_format_mask
      _snd_pcm_hw_params_set_format_mask =
      _snd_pcm_hw_params_set_format_mask_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_format_mask>();

  void snd_pcm_hw_params_get_format_mask(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<snd_pcm_format_mask_> mask,
  ) {
    return _snd_pcm_hw_params_get_format_mask(
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_get_format_mask_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_format_mask>>(
          'snd_pcm_hw_params_get_format_mask');
  late final _dart_snd_pcm_hw_params_get_format_mask
      _snd_pcm_hw_params_get_format_mask =
      _snd_pcm_hw_params_get_format_mask_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_format_mask>();

  int snd_pcm_hw_params_get_subformat(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> subformat,
  ) {
    return _snd_pcm_hw_params_get_subformat(
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_get_subformat_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_subformat>>(
          'snd_pcm_hw_params_get_subformat');
  late final _dart_snd_pcm_hw_params_get_subformat
      _snd_pcm_hw_params_get_subformat = _snd_pcm_hw_params_get_subformat_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_subformat>();

  int snd_pcm_hw_params_test_subformat(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int subformat,
  ) {
    return _snd_pcm_hw_params_test_subformat(
      pcm,
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_test_subformat_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_subformat>>(
          'snd_pcm_hw_params_test_subformat');
  late final _dart_snd_pcm_hw_params_test_subformat
      _snd_pcm_hw_params_test_subformat = _snd_pcm_hw_params_test_subformat_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_subformat>();

  int snd_pcm_hw_params_set_subformat(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int subformat,
  ) {
    return _snd_pcm_hw_params_set_subformat(
      pcm,
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_set_subformat_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_subformat>>(
          'snd_pcm_hw_params_set_subformat');
  late final _dart_snd_pcm_hw_params_set_subformat
      _snd_pcm_hw_params_set_subformat = _snd_pcm_hw_params_set_subformat_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_subformat>();

  int snd_pcm_hw_params_set_subformat_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> subformat,
  ) {
    return _snd_pcm_hw_params_set_subformat_first(
      pcm,
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_set_subformat_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_subformat_first>>(
          'snd_pcm_hw_params_set_subformat_first');
  late final _dart_snd_pcm_hw_params_set_subformat_first
      _snd_pcm_hw_params_set_subformat_first =
      _snd_pcm_hw_params_set_subformat_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_subformat_first>();

  int snd_pcm_hw_params_set_subformat_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Int32> subformat,
  ) {
    return _snd_pcm_hw_params_set_subformat_last(
      pcm,
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_set_subformat_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_subformat_last>>(
          'snd_pcm_hw_params_set_subformat_last');
  late final _dart_snd_pcm_hw_params_set_subformat_last
      _snd_pcm_hw_params_set_subformat_last =
      _snd_pcm_hw_params_set_subformat_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_subformat_last>();

  int snd_pcm_hw_params_set_subformat_mask(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<snd_pcm_subformat_mask_> mask,
  ) {
    return _snd_pcm_hw_params_set_subformat_mask(
      pcm,
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_set_subformat_mask_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_subformat_mask>>(
          'snd_pcm_hw_params_set_subformat_mask');
  late final _dart_snd_pcm_hw_params_set_subformat_mask
      _snd_pcm_hw_params_set_subformat_mask =
      _snd_pcm_hw_params_set_subformat_mask_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_subformat_mask>();

  void snd_pcm_hw_params_get_subformat_mask(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<snd_pcm_subformat_mask_> mask,
  ) {
    return _snd_pcm_hw_params_get_subformat_mask(
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_get_subformat_mask_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_subformat_mask>>(
          'snd_pcm_hw_params_get_subformat_mask');
  late final _dart_snd_pcm_hw_params_get_subformat_mask
      _snd_pcm_hw_params_get_subformat_mask =
      _snd_pcm_hw_params_get_subformat_mask_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_subformat_mask>();

  int snd_pcm_hw_params_get_channels(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_get_channels(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_channels_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_channels>>(
          'snd_pcm_hw_params_get_channels');
  late final _dart_snd_pcm_hw_params_get_channels
      _snd_pcm_hw_params_get_channels = _snd_pcm_hw_params_get_channels_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_channels>();

  int snd_pcm_hw_params_get_channels_min(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_get_channels_min(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_channels_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_channels_min>>(
          'snd_pcm_hw_params_get_channels_min');
  late final _dart_snd_pcm_hw_params_get_channels_min
      _snd_pcm_hw_params_get_channels_min =
      _snd_pcm_hw_params_get_channels_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_channels_min>();

  int snd_pcm_hw_params_get_channels_max(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_get_channels_max(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_channels_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_channels_max>>(
          'snd_pcm_hw_params_get_channels_max');
  late final _dart_snd_pcm_hw_params_get_channels_max
      _snd_pcm_hw_params_get_channels_max =
      _snd_pcm_hw_params_get_channels_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_channels_max>();

  int snd_pcm_hw_params_test_channels(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_test_channels(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_test_channels_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_channels>>(
          'snd_pcm_hw_params_test_channels');
  late final _dart_snd_pcm_hw_params_test_channels
      _snd_pcm_hw_params_test_channels = _snd_pcm_hw_params_test_channels_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_channels>();

  int snd_pcm_hw_params_set_channels(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_channels(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_channels>>(
          'snd_pcm_hw_params_set_channels');
  late final _dart_snd_pcm_hw_params_set_channels
      _snd_pcm_hw_params_set_channels = _snd_pcm_hw_params_set_channels_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_channels>();

  int snd_pcm_hw_params_set_channels_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_set_channels_min(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_channels_min>>(
          'snd_pcm_hw_params_set_channels_min');
  late final _dart_snd_pcm_hw_params_set_channels_min
      _snd_pcm_hw_params_set_channels_min =
      _snd_pcm_hw_params_set_channels_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_channels_min>();

  int snd_pcm_hw_params_set_channels_max(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_set_channels_max(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_channels_max>>(
          'snd_pcm_hw_params_set_channels_max');
  late final _dart_snd_pcm_hw_params_set_channels_max
      _snd_pcm_hw_params_set_channels_max =
      _snd_pcm_hw_params_set_channels_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_channels_max>();

  int snd_pcm_hw_params_set_channels_minmax(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> min,
    ffi.Pointer<ffi.Uint32> max,
  ) {
    return _snd_pcm_hw_params_set_channels_minmax(
      pcm,
      params,
      min,
      max,
    );
  }

  late final _snd_pcm_hw_params_set_channels_minmax_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_channels_minmax>>(
          'snd_pcm_hw_params_set_channels_minmax');
  late final _dart_snd_pcm_hw_params_set_channels_minmax
      _snd_pcm_hw_params_set_channels_minmax =
      _snd_pcm_hw_params_set_channels_minmax_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_channels_minmax>();

  int snd_pcm_hw_params_set_channels_near(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_set_channels_near(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_near_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_channels_near>>(
          'snd_pcm_hw_params_set_channels_near');
  late final _dart_snd_pcm_hw_params_set_channels_near
      _snd_pcm_hw_params_set_channels_near =
      _snd_pcm_hw_params_set_channels_near_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_channels_near>();

  int snd_pcm_hw_params_set_channels_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_set_channels_first(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_channels_first>>(
          'snd_pcm_hw_params_set_channels_first');
  late final _dart_snd_pcm_hw_params_set_channels_first
      _snd_pcm_hw_params_set_channels_first =
      _snd_pcm_hw_params_set_channels_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_channels_first>();

  int snd_pcm_hw_params_set_channels_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_set_channels_last(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_channels_last>>(
          'snd_pcm_hw_params_set_channels_last');
  late final _dart_snd_pcm_hw_params_set_channels_last
      _snd_pcm_hw_params_set_channels_last =
      _snd_pcm_hw_params_set_channels_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_channels_last>();

  int snd_pcm_hw_params_get_rate(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_rate(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_rate_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_rate>>(
          'snd_pcm_hw_params_get_rate');
  late final _dart_snd_pcm_hw_params_get_rate _snd_pcm_hw_params_get_rate =
      _snd_pcm_hw_params_get_rate_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_rate>();

  int snd_pcm_hw_params_get_rate_min(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_rate_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_rate_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_rate_min>>(
          'snd_pcm_hw_params_get_rate_min');
  late final _dart_snd_pcm_hw_params_get_rate_min
      _snd_pcm_hw_params_get_rate_min = _snd_pcm_hw_params_get_rate_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_rate_min>();

  int snd_pcm_hw_params_get_rate_max(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_rate_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_rate_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_rate_max>>(
          'snd_pcm_hw_params_get_rate_max');
  late final _dart_snd_pcm_hw_params_get_rate_max
      _snd_pcm_hw_params_get_rate_max = _snd_pcm_hw_params_get_rate_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_rate_max>();

  int snd_pcm_hw_params_test_rate(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_rate(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_rate_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_rate>>(
          'snd_pcm_hw_params_test_rate');
  late final _dart_snd_pcm_hw_params_test_rate _snd_pcm_hw_params_test_rate =
      _snd_pcm_hw_params_test_rate_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_rate>();

  int snd_pcm_hw_params_set_rate(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_rate(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_rate>>(
          'snd_pcm_hw_params_set_rate');
  late final _dart_snd_pcm_hw_params_set_rate _snd_pcm_hw_params_set_rate =
      _snd_pcm_hw_params_set_rate_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_rate>();

  int snd_pcm_hw_params_set_rate_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_rate_min>>(
          'snd_pcm_hw_params_set_rate_min');
  late final _dart_snd_pcm_hw_params_set_rate_min
      _snd_pcm_hw_params_set_rate_min = _snd_pcm_hw_params_set_rate_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_rate_min>();

  int snd_pcm_hw_params_set_rate_max(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_rate_max>>(
          'snd_pcm_hw_params_set_rate_max');
  late final _dart_snd_pcm_hw_params_set_rate_max
      _snd_pcm_hw_params_set_rate_max = _snd_pcm_hw_params_set_rate_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_rate_max>();

  int snd_pcm_hw_params_set_rate_minmax(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> min,
    ffi.Pointer<ffi.Int32> mindir,
    ffi.Pointer<ffi.Uint32> max,
    ffi.Pointer<ffi.Int32> maxdir,
  ) {
    return _snd_pcm_hw_params_set_rate_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_minmax_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_rate_minmax>>(
          'snd_pcm_hw_params_set_rate_minmax');
  late final _dart_snd_pcm_hw_params_set_rate_minmax
      _snd_pcm_hw_params_set_rate_minmax =
      _snd_pcm_hw_params_set_rate_minmax_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_rate_minmax>();

  int snd_pcm_hw_params_set_rate_near(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_near_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_rate_near>>(
          'snd_pcm_hw_params_set_rate_near');
  late final _dart_snd_pcm_hw_params_set_rate_near
      _snd_pcm_hw_params_set_rate_near = _snd_pcm_hw_params_set_rate_near_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_rate_near>();

  int snd_pcm_hw_params_set_rate_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_rate_first>>(
          'snd_pcm_hw_params_set_rate_first');
  late final _dart_snd_pcm_hw_params_set_rate_first
      _snd_pcm_hw_params_set_rate_first = _snd_pcm_hw_params_set_rate_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_rate_first>();

  int snd_pcm_hw_params_set_rate_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_rate_last>>(
          'snd_pcm_hw_params_set_rate_last');
  late final _dart_snd_pcm_hw_params_set_rate_last
      _snd_pcm_hw_params_set_rate_last = _snd_pcm_hw_params_set_rate_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_rate_last>();

  int snd_pcm_hw_params_set_rate_resample(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_rate_resample(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_rate_resample_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_rate_resample>>(
          'snd_pcm_hw_params_set_rate_resample');
  late final _dart_snd_pcm_hw_params_set_rate_resample
      _snd_pcm_hw_params_set_rate_resample =
      _snd_pcm_hw_params_set_rate_resample_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_rate_resample>();

  int snd_pcm_hw_params_get_rate_resample(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_get_rate_resample(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_rate_resample_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_rate_resample>>(
          'snd_pcm_hw_params_get_rate_resample');
  late final _dart_snd_pcm_hw_params_get_rate_resample
      _snd_pcm_hw_params_get_rate_resample =
      _snd_pcm_hw_params_get_rate_resample_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_rate_resample>();

  int snd_pcm_hw_params_set_export_buffer(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_export_buffer(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_export_buffer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_export_buffer>>(
          'snd_pcm_hw_params_set_export_buffer');
  late final _dart_snd_pcm_hw_params_set_export_buffer
      _snd_pcm_hw_params_set_export_buffer =
      _snd_pcm_hw_params_set_export_buffer_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_export_buffer>();

  int snd_pcm_hw_params_get_export_buffer(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_get_export_buffer(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_export_buffer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_export_buffer>>(
          'snd_pcm_hw_params_get_export_buffer');
  late final _dart_snd_pcm_hw_params_get_export_buffer
      _snd_pcm_hw_params_get_export_buffer =
      _snd_pcm_hw_params_get_export_buffer_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_export_buffer>();

  int snd_pcm_hw_params_set_period_wakeup(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_period_wakeup(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_period_wakeup_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_wakeup>>(
          'snd_pcm_hw_params_set_period_wakeup');
  late final _dart_snd_pcm_hw_params_set_period_wakeup
      _snd_pcm_hw_params_set_period_wakeup =
      _snd_pcm_hw_params_set_period_wakeup_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_wakeup>();

  int snd_pcm_hw_params_get_period_wakeup(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_hw_params_get_period_wakeup(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_period_wakeup_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_period_wakeup>>(
          'snd_pcm_hw_params_get_period_wakeup');
  late final _dart_snd_pcm_hw_params_get_period_wakeup
      _snd_pcm_hw_params_get_period_wakeup =
      _snd_pcm_hw_params_get_period_wakeup_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_period_wakeup>();

  int snd_pcm_hw_params_get_period_time(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_period_time(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_period_time>>(
          'snd_pcm_hw_params_get_period_time');
  late final _dart_snd_pcm_hw_params_get_period_time
      _snd_pcm_hw_params_get_period_time =
      _snd_pcm_hw_params_get_period_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_period_time>();

  int snd_pcm_hw_params_get_period_time_min(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_period_time_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_time_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_period_time_min>>(
          'snd_pcm_hw_params_get_period_time_min');
  late final _dart_snd_pcm_hw_params_get_period_time_min
      _snd_pcm_hw_params_get_period_time_min =
      _snd_pcm_hw_params_get_period_time_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_period_time_min>();

  int snd_pcm_hw_params_get_period_time_max(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_period_time_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_time_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_period_time_max>>(
          'snd_pcm_hw_params_get_period_time_max');
  late final _dart_snd_pcm_hw_params_get_period_time_max
      _snd_pcm_hw_params_get_period_time_max =
      _snd_pcm_hw_params_get_period_time_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_period_time_max>();

  int snd_pcm_hw_params_test_period_time(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_period_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_period_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_period_time>>(
          'snd_pcm_hw_params_test_period_time');
  late final _dart_snd_pcm_hw_params_test_period_time
      _snd_pcm_hw_params_test_period_time =
      _snd_pcm_hw_params_test_period_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_period_time>();

  int snd_pcm_hw_params_set_period_time(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_period_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_time>>(
          'snd_pcm_hw_params_set_period_time');
  late final _dart_snd_pcm_hw_params_set_period_time
      _snd_pcm_hw_params_set_period_time =
      _snd_pcm_hw_params_set_period_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_time>();

  int snd_pcm_hw_params_set_period_time_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_time_min>>(
          'snd_pcm_hw_params_set_period_time_min');
  late final _dart_snd_pcm_hw_params_set_period_time_min
      _snd_pcm_hw_params_set_period_time_min =
      _snd_pcm_hw_params_set_period_time_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_time_min>();

  int snd_pcm_hw_params_set_period_time_max(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_time_max>>(
          'snd_pcm_hw_params_set_period_time_max');
  late final _dart_snd_pcm_hw_params_set_period_time_max
      _snd_pcm_hw_params_set_period_time_max =
      _snd_pcm_hw_params_set_period_time_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_time_max>();

  int snd_pcm_hw_params_set_period_time_minmax(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> min,
    ffi.Pointer<ffi.Int32> mindir,
    ffi.Pointer<ffi.Uint32> max,
    ffi.Pointer<ffi.Int32> maxdir,
  ) {
    return _snd_pcm_hw_params_set_period_time_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_minmax_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_time_minmax>>(
          'snd_pcm_hw_params_set_period_time_minmax');
  late final _dart_snd_pcm_hw_params_set_period_time_minmax
      _snd_pcm_hw_params_set_period_time_minmax =
      _snd_pcm_hw_params_set_period_time_minmax_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_time_minmax>();

  int snd_pcm_hw_params_set_period_time_near(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_near_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_time_near>>(
          'snd_pcm_hw_params_set_period_time_near');
  late final _dart_snd_pcm_hw_params_set_period_time_near
      _snd_pcm_hw_params_set_period_time_near =
      _snd_pcm_hw_params_set_period_time_near_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_time_near>();

  int snd_pcm_hw_params_set_period_time_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_time_first>>(
          'snd_pcm_hw_params_set_period_time_first');
  late final _dart_snd_pcm_hw_params_set_period_time_first
      _snd_pcm_hw_params_set_period_time_first =
      _snd_pcm_hw_params_set_period_time_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_time_first>();

  int snd_pcm_hw_params_set_period_time_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_time_last>>(
          'snd_pcm_hw_params_set_period_time_last');
  late final _dart_snd_pcm_hw_params_set_period_time_last
      _snd_pcm_hw_params_set_period_time_last =
      _snd_pcm_hw_params_set_period_time_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_time_last>();

  int snd_pcm_hw_params_get_period_size(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> frames,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_period_size(
      params,
      frames,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_period_size>>(
          'snd_pcm_hw_params_get_period_size');
  late final _dart_snd_pcm_hw_params_get_period_size
      _snd_pcm_hw_params_get_period_size =
      _snd_pcm_hw_params_get_period_size_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_period_size>();

  int snd_pcm_hw_params_get_period_size_min(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> frames,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_period_size_min(
      params,
      frames,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_size_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_period_size_min>>(
          'snd_pcm_hw_params_get_period_size_min');
  late final _dart_snd_pcm_hw_params_get_period_size_min
      _snd_pcm_hw_params_get_period_size_min =
      _snd_pcm_hw_params_get_period_size_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_period_size_min>();

  int snd_pcm_hw_params_get_period_size_max(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> frames,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_period_size_max(
      params,
      frames,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_size_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_period_size_max>>(
          'snd_pcm_hw_params_get_period_size_max');
  late final _dart_snd_pcm_hw_params_get_period_size_max
      _snd_pcm_hw_params_get_period_size_max =
      _snd_pcm_hw_params_get_period_size_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_period_size_max>();

  int snd_pcm_hw_params_test_period_size(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_period_size(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_period_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_period_size>>(
          'snd_pcm_hw_params_test_period_size');
  late final _dart_snd_pcm_hw_params_test_period_size
      _snd_pcm_hw_params_test_period_size =
      _snd_pcm_hw_params_test_period_size_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_period_size>();

  int snd_pcm_hw_params_set_period_size(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_period_size(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_size>>(
          'snd_pcm_hw_params_set_period_size');
  late final _dart_snd_pcm_hw_params_set_period_size
      _snd_pcm_hw_params_set_period_size =
      _snd_pcm_hw_params_set_period_size_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_size>();

  int snd_pcm_hw_params_set_period_size_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_size_min>>(
          'snd_pcm_hw_params_set_period_size_min');
  late final _dart_snd_pcm_hw_params_set_period_size_min
      _snd_pcm_hw_params_set_period_size_min =
      _snd_pcm_hw_params_set_period_size_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_size_min>();

  int snd_pcm_hw_params_set_period_size_max(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_size_max>>(
          'snd_pcm_hw_params_set_period_size_max');
  late final _dart_snd_pcm_hw_params_set_period_size_max
      _snd_pcm_hw_params_set_period_size_max =
      _snd_pcm_hw_params_set_period_size_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_size_max>();

  int snd_pcm_hw_params_set_period_size_minmax(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> min,
    ffi.Pointer<ffi.Int32> mindir,
    ffi.Pointer<ffi.Uint64> max,
    ffi.Pointer<ffi.Int32> maxdir,
  ) {
    return _snd_pcm_hw_params_set_period_size_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_minmax_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_size_minmax>>(
          'snd_pcm_hw_params_set_period_size_minmax');
  late final _dart_snd_pcm_hw_params_set_period_size_minmax
      _snd_pcm_hw_params_set_period_size_minmax =
      _snd_pcm_hw_params_set_period_size_minmax_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_size_minmax>();

  int snd_pcm_hw_params_set_period_size_near(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_near_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_size_near>>(
          'snd_pcm_hw_params_set_period_size_near');
  late final _dart_snd_pcm_hw_params_set_period_size_near
      _snd_pcm_hw_params_set_period_size_near =
      _snd_pcm_hw_params_set_period_size_near_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_size_near>();

  int snd_pcm_hw_params_set_period_size_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_size_first>>(
          'snd_pcm_hw_params_set_period_size_first');
  late final _dart_snd_pcm_hw_params_set_period_size_first
      _snd_pcm_hw_params_set_period_size_first =
      _snd_pcm_hw_params_set_period_size_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_size_first>();

  int snd_pcm_hw_params_set_period_size_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_size_last>>(
          'snd_pcm_hw_params_set_period_size_last');
  late final _dart_snd_pcm_hw_params_set_period_size_last
      _snd_pcm_hw_params_set_period_size_last =
      _snd_pcm_hw_params_set_period_size_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_size_last>();

  int snd_pcm_hw_params_set_period_size_integer(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_set_period_size_integer(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_period_size_integer>>(
          'snd_pcm_hw_params_set_period_size_integer');
  late final _dart_snd_pcm_hw_params_set_period_size_integer
      _snd_pcm_hw_params_set_period_size_integer =
      _snd_pcm_hw_params_set_period_size_integer_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_period_size_integer>();

  int snd_pcm_hw_params_get_periods(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_periods(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_periods_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_periods>>(
          'snd_pcm_hw_params_get_periods');
  late final _dart_snd_pcm_hw_params_get_periods
      _snd_pcm_hw_params_get_periods = _snd_pcm_hw_params_get_periods_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_periods>();

  int snd_pcm_hw_params_get_periods_min(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_periods_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_periods_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_periods_min>>(
          'snd_pcm_hw_params_get_periods_min');
  late final _dart_snd_pcm_hw_params_get_periods_min
      _snd_pcm_hw_params_get_periods_min =
      _snd_pcm_hw_params_get_periods_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_periods_min>();

  int snd_pcm_hw_params_get_periods_max(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_periods_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_periods_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_periods_max>>(
          'snd_pcm_hw_params_get_periods_max');
  late final _dart_snd_pcm_hw_params_get_periods_max
      _snd_pcm_hw_params_get_periods_max =
      _snd_pcm_hw_params_get_periods_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_periods_max>();

  int snd_pcm_hw_params_test_periods(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_periods(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_periods_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_periods>>(
          'snd_pcm_hw_params_test_periods');
  late final _dart_snd_pcm_hw_params_test_periods
      _snd_pcm_hw_params_test_periods = _snd_pcm_hw_params_test_periods_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_periods>();

  int snd_pcm_hw_params_set_periods(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_periods(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_periods>>(
          'snd_pcm_hw_params_set_periods');
  late final _dart_snd_pcm_hw_params_set_periods
      _snd_pcm_hw_params_set_periods = _snd_pcm_hw_params_set_periods_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_periods>();

  int snd_pcm_hw_params_set_periods_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_periods_min>>(
          'snd_pcm_hw_params_set_periods_min');
  late final _dart_snd_pcm_hw_params_set_periods_min
      _snd_pcm_hw_params_set_periods_min =
      _snd_pcm_hw_params_set_periods_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_periods_min>();

  int snd_pcm_hw_params_set_periods_max(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_periods_max>>(
          'snd_pcm_hw_params_set_periods_max');
  late final _dart_snd_pcm_hw_params_set_periods_max
      _snd_pcm_hw_params_set_periods_max =
      _snd_pcm_hw_params_set_periods_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_periods_max>();

  int snd_pcm_hw_params_set_periods_minmax(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> min,
    ffi.Pointer<ffi.Int32> mindir,
    ffi.Pointer<ffi.Uint32> max,
    ffi.Pointer<ffi.Int32> maxdir,
  ) {
    return _snd_pcm_hw_params_set_periods_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_minmax_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_periods_minmax>>(
          'snd_pcm_hw_params_set_periods_minmax');
  late final _dart_snd_pcm_hw_params_set_periods_minmax
      _snd_pcm_hw_params_set_periods_minmax =
      _snd_pcm_hw_params_set_periods_minmax_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_periods_minmax>();

  int snd_pcm_hw_params_set_periods_near(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_near_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_periods_near>>(
          'snd_pcm_hw_params_set_periods_near');
  late final _dart_snd_pcm_hw_params_set_periods_near
      _snd_pcm_hw_params_set_periods_near =
      _snd_pcm_hw_params_set_periods_near_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_periods_near>();

  int snd_pcm_hw_params_set_periods_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_periods_first>>(
          'snd_pcm_hw_params_set_periods_first');
  late final _dart_snd_pcm_hw_params_set_periods_first
      _snd_pcm_hw_params_set_periods_first =
      _snd_pcm_hw_params_set_periods_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_periods_first>();

  int snd_pcm_hw_params_set_periods_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_periods_last>>(
          'snd_pcm_hw_params_set_periods_last');
  late final _dart_snd_pcm_hw_params_set_periods_last
      _snd_pcm_hw_params_set_periods_last =
      _snd_pcm_hw_params_set_periods_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_periods_last>();

  int snd_pcm_hw_params_set_periods_integer(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
  ) {
    return _snd_pcm_hw_params_set_periods_integer(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_set_periods_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_periods_integer>>(
          'snd_pcm_hw_params_set_periods_integer');
  late final _dart_snd_pcm_hw_params_set_periods_integer
      _snd_pcm_hw_params_set_periods_integer =
      _snd_pcm_hw_params_set_periods_integer_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_periods_integer>();

  int snd_pcm_hw_params_get_buffer_time(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_buffer_time(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_buffer_time>>(
          'snd_pcm_hw_params_get_buffer_time');
  late final _dart_snd_pcm_hw_params_get_buffer_time
      _snd_pcm_hw_params_get_buffer_time =
      _snd_pcm_hw_params_get_buffer_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_buffer_time>();

  int snd_pcm_hw_params_get_buffer_time_min(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_buffer_time_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_time_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_buffer_time_min>>(
          'snd_pcm_hw_params_get_buffer_time_min');
  late final _dart_snd_pcm_hw_params_get_buffer_time_min
      _snd_pcm_hw_params_get_buffer_time_min =
      _snd_pcm_hw_params_get_buffer_time_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_buffer_time_min>();

  int snd_pcm_hw_params_get_buffer_time_max(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_buffer_time_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_time_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_buffer_time_max>>(
          'snd_pcm_hw_params_get_buffer_time_max');
  late final _dart_snd_pcm_hw_params_get_buffer_time_max
      _snd_pcm_hw_params_get_buffer_time_max =
      _snd_pcm_hw_params_get_buffer_time_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_buffer_time_max>();

  int snd_pcm_hw_params_test_buffer_time(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_buffer_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_buffer_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_buffer_time>>(
          'snd_pcm_hw_params_test_buffer_time');
  late final _dart_snd_pcm_hw_params_test_buffer_time
      _snd_pcm_hw_params_test_buffer_time =
      _snd_pcm_hw_params_test_buffer_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_buffer_time>();

  int snd_pcm_hw_params_set_buffer_time(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_time>>(
          'snd_pcm_hw_params_set_buffer_time');
  late final _dart_snd_pcm_hw_params_set_buffer_time
      _snd_pcm_hw_params_set_buffer_time =
      _snd_pcm_hw_params_set_buffer_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_time>();

  int snd_pcm_hw_params_set_buffer_time_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_time_min>>(
          'snd_pcm_hw_params_set_buffer_time_min');
  late final _dart_snd_pcm_hw_params_set_buffer_time_min
      _snd_pcm_hw_params_set_buffer_time_min =
      _snd_pcm_hw_params_set_buffer_time_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_time_min>();

  int snd_pcm_hw_params_set_buffer_time_max(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_time_max>>(
          'snd_pcm_hw_params_set_buffer_time_max');
  late final _dart_snd_pcm_hw_params_set_buffer_time_max
      _snd_pcm_hw_params_set_buffer_time_max =
      _snd_pcm_hw_params_set_buffer_time_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_time_max>();

  int snd_pcm_hw_params_set_buffer_time_minmax(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> min,
    ffi.Pointer<ffi.Int32> mindir,
    ffi.Pointer<ffi.Uint32> max,
    ffi.Pointer<ffi.Int32> maxdir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_minmax_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_time_minmax>>(
          'snd_pcm_hw_params_set_buffer_time_minmax');
  late final _dart_snd_pcm_hw_params_set_buffer_time_minmax
      _snd_pcm_hw_params_set_buffer_time_minmax =
      _snd_pcm_hw_params_set_buffer_time_minmax_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_time_minmax>();

  int snd_pcm_hw_params_set_buffer_time_near(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_near_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_time_near>>(
          'snd_pcm_hw_params_set_buffer_time_near');
  late final _dart_snd_pcm_hw_params_set_buffer_time_near
      _snd_pcm_hw_params_set_buffer_time_near =
      _snd_pcm_hw_params_set_buffer_time_near_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_time_near>();

  int snd_pcm_hw_params_set_buffer_time_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_time_first>>(
          'snd_pcm_hw_params_set_buffer_time_first');
  late final _dart_snd_pcm_hw_params_set_buffer_time_first
      _snd_pcm_hw_params_set_buffer_time_first =
      _snd_pcm_hw_params_set_buffer_time_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_time_first>();

  int snd_pcm_hw_params_set_buffer_time_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_time_last>>(
          'snd_pcm_hw_params_set_buffer_time_last');
  late final _dart_snd_pcm_hw_params_set_buffer_time_last
      _snd_pcm_hw_params_set_buffer_time_last =
      _snd_pcm_hw_params_set_buffer_time_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_time_last>();

  int snd_pcm_hw_params_get_buffer_size(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_get_buffer_size(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_buffer_size>>(
          'snd_pcm_hw_params_get_buffer_size');
  late final _dart_snd_pcm_hw_params_get_buffer_size
      _snd_pcm_hw_params_get_buffer_size =
      _snd_pcm_hw_params_get_buffer_size_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_buffer_size>();

  int snd_pcm_hw_params_get_buffer_size_min(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_get_buffer_size_min(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_size_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_buffer_size_min>>(
          'snd_pcm_hw_params_get_buffer_size_min');
  late final _dart_snd_pcm_hw_params_get_buffer_size_min
      _snd_pcm_hw_params_get_buffer_size_min =
      _snd_pcm_hw_params_get_buffer_size_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_buffer_size_min>();

  int snd_pcm_hw_params_get_buffer_size_max(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_get_buffer_size_max(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_size_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_buffer_size_max>>(
          'snd_pcm_hw_params_get_buffer_size_max');
  late final _dart_snd_pcm_hw_params_get_buffer_size_max
      _snd_pcm_hw_params_get_buffer_size_max =
      _snd_pcm_hw_params_get_buffer_size_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_buffer_size_max>();

  int snd_pcm_hw_params_test_buffer_size(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_test_buffer_size(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_test_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_buffer_size>>(
          'snd_pcm_hw_params_test_buffer_size');
  late final _dart_snd_pcm_hw_params_test_buffer_size
      _snd_pcm_hw_params_test_buffer_size =
      _snd_pcm_hw_params_test_buffer_size_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_buffer_size>();

  int snd_pcm_hw_params_set_buffer_size(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_size>>(
          'snd_pcm_hw_params_set_buffer_size');
  late final _dart_snd_pcm_hw_params_set_buffer_size
      _snd_pcm_hw_params_set_buffer_size =
      _snd_pcm_hw_params_set_buffer_size_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_size>();

  int snd_pcm_hw_params_set_buffer_size_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_min(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_size_min>>(
          'snd_pcm_hw_params_set_buffer_size_min');
  late final _dart_snd_pcm_hw_params_set_buffer_size_min
      _snd_pcm_hw_params_set_buffer_size_min =
      _snd_pcm_hw_params_set_buffer_size_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_size_min>();

  int snd_pcm_hw_params_set_buffer_size_max(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_max(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_size_max>>(
          'snd_pcm_hw_params_set_buffer_size_max');
  late final _dart_snd_pcm_hw_params_set_buffer_size_max
      _snd_pcm_hw_params_set_buffer_size_max =
      _snd_pcm_hw_params_set_buffer_size_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_size_max>();

  int snd_pcm_hw_params_set_buffer_size_minmax(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> min,
    ffi.Pointer<ffi.Uint64> max,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_minmax(
      pcm,
      params,
      min,
      max,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_minmax_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_size_minmax>>(
          'snd_pcm_hw_params_set_buffer_size_minmax');
  late final _dart_snd_pcm_hw_params_set_buffer_size_minmax
      _snd_pcm_hw_params_set_buffer_size_minmax =
      _snd_pcm_hw_params_set_buffer_size_minmax_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_size_minmax>();

  int snd_pcm_hw_params_set_buffer_size_near(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_near(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_near_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_size_near>>(
          'snd_pcm_hw_params_set_buffer_size_near');
  late final _dart_snd_pcm_hw_params_set_buffer_size_near
      _snd_pcm_hw_params_set_buffer_size_near =
      _snd_pcm_hw_params_set_buffer_size_near_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_size_near>();

  int snd_pcm_hw_params_set_buffer_size_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_first(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_size_first>>(
          'snd_pcm_hw_params_set_buffer_size_first');
  late final _dart_snd_pcm_hw_params_set_buffer_size_first
      _snd_pcm_hw_params_set_buffer_size_first =
      _snd_pcm_hw_params_set_buffer_size_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_size_first>();

  int snd_pcm_hw_params_set_buffer_size_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_last(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_buffer_size_last>>(
          'snd_pcm_hw_params_set_buffer_size_last');
  late final _dart_snd_pcm_hw_params_set_buffer_size_last
      _snd_pcm_hw_params_set_buffer_size_last =
      _snd_pcm_hw_params_set_buffer_size_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_buffer_size_last>();

  int snd_pcm_hw_params_get_min_align(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_hw_params_get_min_align(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_min_align_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_min_align>>(
          'snd_pcm_hw_params_get_min_align');
  late final _dart_snd_pcm_hw_params_get_min_align
      _snd_pcm_hw_params_get_min_align = _snd_pcm_hw_params_get_min_align_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_min_align>();

  int snd_pcm_sw_params_sizeof() {
    return _snd_pcm_sw_params_sizeof();
  }

  late final _snd_pcm_sw_params_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_sizeof>>(
          'snd_pcm_sw_params_sizeof');
  late final _dart_snd_pcm_sw_params_sizeof _snd_pcm_sw_params_sizeof =
      _snd_pcm_sw_params_sizeof_ptr
          .asFunction<_dart_snd_pcm_sw_params_sizeof>();

  int snd_pcm_sw_params_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_sw_params_>> ptr,
  ) {
    return _snd_pcm_sw_params_malloc(
      ptr,
    );
  }

  late final _snd_pcm_sw_params_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_malloc>>(
          'snd_pcm_sw_params_malloc');
  late final _dart_snd_pcm_sw_params_malloc _snd_pcm_sw_params_malloc =
      _snd_pcm_sw_params_malloc_ptr
          .asFunction<_dart_snd_pcm_sw_params_malloc>();

  void snd_pcm_sw_params_free(
    ffi.Pointer<snd_pcm_sw_params_> obj,
  ) {
    return _snd_pcm_sw_params_free(
      obj,
    );
  }

  late final _snd_pcm_sw_params_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_free>>(
          'snd_pcm_sw_params_free');
  late final _dart_snd_pcm_sw_params_free _snd_pcm_sw_params_free =
      _snd_pcm_sw_params_free_ptr.asFunction<_dart_snd_pcm_sw_params_free>();

  void snd_pcm_sw_params_copy(
    ffi.Pointer<snd_pcm_sw_params_> dst,
    ffi.Pointer<snd_pcm_sw_params_> src,
  ) {
    return _snd_pcm_sw_params_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_sw_params_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_copy>>(
          'snd_pcm_sw_params_copy');
  late final _dart_snd_pcm_sw_params_copy _snd_pcm_sw_params_copy =
      _snd_pcm_sw_params_copy_ptr.asFunction<_dart_snd_pcm_sw_params_copy>();

  int snd_pcm_sw_params_get_boundary(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_sw_params_get_boundary(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_boundary_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_boundary>>(
          'snd_pcm_sw_params_get_boundary');
  late final _dart_snd_pcm_sw_params_get_boundary
      _snd_pcm_sw_params_get_boundary = _snd_pcm_sw_params_get_boundary_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_boundary>();

  int snd_pcm_sw_params_set_tstamp_mode(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_tstamp_mode(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_tstamp_mode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_tstamp_mode>>(
          'snd_pcm_sw_params_set_tstamp_mode');
  late final _dart_snd_pcm_sw_params_set_tstamp_mode
      _snd_pcm_sw_params_set_tstamp_mode =
      _snd_pcm_sw_params_set_tstamp_mode_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_tstamp_mode>();

  int snd_pcm_sw_params_get_tstamp_mode(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Int32> val,
  ) {
    return _snd_pcm_sw_params_get_tstamp_mode(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_tstamp_mode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_tstamp_mode>>(
          'snd_pcm_sw_params_get_tstamp_mode');
  late final _dart_snd_pcm_sw_params_get_tstamp_mode
      _snd_pcm_sw_params_get_tstamp_mode =
      _snd_pcm_sw_params_get_tstamp_mode_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_tstamp_mode>();

  int snd_pcm_sw_params_set_tstamp_type(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_tstamp_type(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_tstamp_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_tstamp_type>>(
          'snd_pcm_sw_params_set_tstamp_type');
  late final _dart_snd_pcm_sw_params_set_tstamp_type
      _snd_pcm_sw_params_set_tstamp_type =
      _snd_pcm_sw_params_set_tstamp_type_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_tstamp_type>();

  int snd_pcm_sw_params_get_tstamp_type(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Int32> val,
  ) {
    return _snd_pcm_sw_params_get_tstamp_type(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_tstamp_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_tstamp_type>>(
          'snd_pcm_sw_params_get_tstamp_type');
  late final _dart_snd_pcm_sw_params_get_tstamp_type
      _snd_pcm_sw_params_get_tstamp_type =
      _snd_pcm_sw_params_get_tstamp_type_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_tstamp_type>();

  int snd_pcm_sw_params_set_avail_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_avail_min(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_avail_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_avail_min>>(
          'snd_pcm_sw_params_set_avail_min');
  late final _dart_snd_pcm_sw_params_set_avail_min
      _snd_pcm_sw_params_set_avail_min = _snd_pcm_sw_params_set_avail_min_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_avail_min>();

  int snd_pcm_sw_params_get_avail_min(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_sw_params_get_avail_min(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_avail_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_avail_min>>(
          'snd_pcm_sw_params_get_avail_min');
  late final _dart_snd_pcm_sw_params_get_avail_min
      _snd_pcm_sw_params_get_avail_min = _snd_pcm_sw_params_get_avail_min_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_avail_min>();

  int snd_pcm_sw_params_set_period_event(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_period_event(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_period_event_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_period_event>>(
          'snd_pcm_sw_params_set_period_event');
  late final _dart_snd_pcm_sw_params_set_period_event
      _snd_pcm_sw_params_set_period_event =
      _snd_pcm_sw_params_set_period_event_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_period_event>();

  int snd_pcm_sw_params_get_period_event(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Int32> val,
  ) {
    return _snd_pcm_sw_params_get_period_event(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_period_event_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_period_event>>(
          'snd_pcm_sw_params_get_period_event');
  late final _dart_snd_pcm_sw_params_get_period_event
      _snd_pcm_sw_params_get_period_event =
      _snd_pcm_sw_params_get_period_event_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_period_event>();

  int snd_pcm_sw_params_set_start_threshold(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_start_threshold(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_start_threshold_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_start_threshold>>(
          'snd_pcm_sw_params_set_start_threshold');
  late final _dart_snd_pcm_sw_params_set_start_threshold
      _snd_pcm_sw_params_set_start_threshold =
      _snd_pcm_sw_params_set_start_threshold_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_start_threshold>();

  int snd_pcm_sw_params_get_start_threshold(
    ffi.Pointer<snd_pcm_sw_params_> paramsm,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_sw_params_get_start_threshold(
      paramsm,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_start_threshold_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_start_threshold>>(
          'snd_pcm_sw_params_get_start_threshold');
  late final _dart_snd_pcm_sw_params_get_start_threshold
      _snd_pcm_sw_params_get_start_threshold =
      _snd_pcm_sw_params_get_start_threshold_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_start_threshold>();

  int snd_pcm_sw_params_set_stop_threshold(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_stop_threshold(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_stop_threshold_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_stop_threshold>>(
          'snd_pcm_sw_params_set_stop_threshold');
  late final _dart_snd_pcm_sw_params_set_stop_threshold
      _snd_pcm_sw_params_set_stop_threshold =
      _snd_pcm_sw_params_set_stop_threshold_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_stop_threshold>();

  int snd_pcm_sw_params_get_stop_threshold(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_sw_params_get_stop_threshold(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_stop_threshold_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_stop_threshold>>(
          'snd_pcm_sw_params_get_stop_threshold');
  late final _dart_snd_pcm_sw_params_get_stop_threshold
      _snd_pcm_sw_params_get_stop_threshold =
      _snd_pcm_sw_params_get_stop_threshold_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_stop_threshold>();

  int snd_pcm_sw_params_set_silence_threshold(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_silence_threshold(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_silence_threshold_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_silence_threshold>>(
          'snd_pcm_sw_params_set_silence_threshold');
  late final _dart_snd_pcm_sw_params_set_silence_threshold
      _snd_pcm_sw_params_set_silence_threshold =
      _snd_pcm_sw_params_set_silence_threshold_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_silence_threshold>();

  int snd_pcm_sw_params_get_silence_threshold(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_sw_params_get_silence_threshold(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_silence_threshold_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_silence_threshold>>(
          'snd_pcm_sw_params_get_silence_threshold');
  late final _dart_snd_pcm_sw_params_get_silence_threshold
      _snd_pcm_sw_params_get_silence_threshold =
      _snd_pcm_sw_params_get_silence_threshold_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_silence_threshold>();

  int snd_pcm_sw_params_set_silence_size(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_silence_size(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_silence_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_silence_size>>(
          'snd_pcm_sw_params_set_silence_size');
  late final _dart_snd_pcm_sw_params_set_silence_size
      _snd_pcm_sw_params_set_silence_size =
      _snd_pcm_sw_params_set_silence_size_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_silence_size>();

  int snd_pcm_sw_params_get_silence_size(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_sw_params_get_silence_size(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_silence_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_silence_size>>(
          'snd_pcm_sw_params_get_silence_size');
  late final _dart_snd_pcm_sw_params_get_silence_size
      _snd_pcm_sw_params_get_silence_size =
      _snd_pcm_sw_params_get_silence_size_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_silence_size>();

  int snd_pcm_access_mask_sizeof() {
    return _snd_pcm_access_mask_sizeof();
  }

  late final _snd_pcm_access_mask_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_sizeof>>(
          'snd_pcm_access_mask_sizeof');
  late final _dart_snd_pcm_access_mask_sizeof _snd_pcm_access_mask_sizeof =
      _snd_pcm_access_mask_sizeof_ptr
          .asFunction<_dart_snd_pcm_access_mask_sizeof>();

  int snd_pcm_access_mask_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_access_mask_>> ptr,
  ) {
    return _snd_pcm_access_mask_malloc(
      ptr,
    );
  }

  late final _snd_pcm_access_mask_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_malloc>>(
          'snd_pcm_access_mask_malloc');
  late final _dart_snd_pcm_access_mask_malloc _snd_pcm_access_mask_malloc =
      _snd_pcm_access_mask_malloc_ptr
          .asFunction<_dart_snd_pcm_access_mask_malloc>();

  void snd_pcm_access_mask_free(
    ffi.Pointer<snd_pcm_access_mask_> obj,
  ) {
    return _snd_pcm_access_mask_free(
      obj,
    );
  }

  late final _snd_pcm_access_mask_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_free>>(
          'snd_pcm_access_mask_free');
  late final _dart_snd_pcm_access_mask_free _snd_pcm_access_mask_free =
      _snd_pcm_access_mask_free_ptr
          .asFunction<_dart_snd_pcm_access_mask_free>();

  void snd_pcm_access_mask_copy(
    ffi.Pointer<snd_pcm_access_mask_> dst,
    ffi.Pointer<snd_pcm_access_mask_> src,
  ) {
    return _snd_pcm_access_mask_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_access_mask_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_copy>>(
          'snd_pcm_access_mask_copy');
  late final _dart_snd_pcm_access_mask_copy _snd_pcm_access_mask_copy =
      _snd_pcm_access_mask_copy_ptr
          .asFunction<_dart_snd_pcm_access_mask_copy>();

  void snd_pcm_access_mask_none(
    ffi.Pointer<snd_pcm_access_mask_> mask,
  ) {
    return _snd_pcm_access_mask_none(
      mask,
    );
  }

  late final _snd_pcm_access_mask_none_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_none>>(
          'snd_pcm_access_mask_none');
  late final _dart_snd_pcm_access_mask_none _snd_pcm_access_mask_none =
      _snd_pcm_access_mask_none_ptr
          .asFunction<_dart_snd_pcm_access_mask_none>();

  void snd_pcm_access_mask_any(
    ffi.Pointer<snd_pcm_access_mask_> mask,
  ) {
    return _snd_pcm_access_mask_any(
      mask,
    );
  }

  late final _snd_pcm_access_mask_any_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_any>>(
          'snd_pcm_access_mask_any');
  late final _dart_snd_pcm_access_mask_any _snd_pcm_access_mask_any =
      _snd_pcm_access_mask_any_ptr.asFunction<_dart_snd_pcm_access_mask_any>();

  int snd_pcm_access_mask_test(
    ffi.Pointer<snd_pcm_access_mask_> mask,
    int val,
  ) {
    return _snd_pcm_access_mask_test(
      mask,
      val,
    );
  }

  late final _snd_pcm_access_mask_test_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_test>>(
          'snd_pcm_access_mask_test');
  late final _dart_snd_pcm_access_mask_test _snd_pcm_access_mask_test =
      _snd_pcm_access_mask_test_ptr
          .asFunction<_dart_snd_pcm_access_mask_test>();

  int snd_pcm_access_mask_empty(
    ffi.Pointer<snd_pcm_access_mask_> mask,
  ) {
    return _snd_pcm_access_mask_empty(
      mask,
    );
  }

  late final _snd_pcm_access_mask_empty_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_empty>>(
          'snd_pcm_access_mask_empty');
  late final _dart_snd_pcm_access_mask_empty _snd_pcm_access_mask_empty =
      _snd_pcm_access_mask_empty_ptr
          .asFunction<_dart_snd_pcm_access_mask_empty>();

  void snd_pcm_access_mask_set(
    ffi.Pointer<snd_pcm_access_mask_> mask,
    int val,
  ) {
    return _snd_pcm_access_mask_set(
      mask,
      val,
    );
  }

  late final _snd_pcm_access_mask_set_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_set>>(
          'snd_pcm_access_mask_set');
  late final _dart_snd_pcm_access_mask_set _snd_pcm_access_mask_set =
      _snd_pcm_access_mask_set_ptr.asFunction<_dart_snd_pcm_access_mask_set>();

  void snd_pcm_access_mask_reset(
    ffi.Pointer<snd_pcm_access_mask_> mask,
    int val,
  ) {
    return _snd_pcm_access_mask_reset(
      mask,
      val,
    );
  }

  late final _snd_pcm_access_mask_reset_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_mask_reset>>(
          'snd_pcm_access_mask_reset');
  late final _dart_snd_pcm_access_mask_reset _snd_pcm_access_mask_reset =
      _snd_pcm_access_mask_reset_ptr
          .asFunction<_dart_snd_pcm_access_mask_reset>();

  int snd_pcm_format_mask_sizeof() {
    return _snd_pcm_format_mask_sizeof();
  }

  late final _snd_pcm_format_mask_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_sizeof>>(
          'snd_pcm_format_mask_sizeof');
  late final _dart_snd_pcm_format_mask_sizeof _snd_pcm_format_mask_sizeof =
      _snd_pcm_format_mask_sizeof_ptr
          .asFunction<_dart_snd_pcm_format_mask_sizeof>();

  int snd_pcm_format_mask_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_format_mask_>> ptr,
  ) {
    return _snd_pcm_format_mask_malloc(
      ptr,
    );
  }

  late final _snd_pcm_format_mask_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_malloc>>(
          'snd_pcm_format_mask_malloc');
  late final _dart_snd_pcm_format_mask_malloc _snd_pcm_format_mask_malloc =
      _snd_pcm_format_mask_malloc_ptr
          .asFunction<_dart_snd_pcm_format_mask_malloc>();

  void snd_pcm_format_mask_free(
    ffi.Pointer<snd_pcm_format_mask_> obj,
  ) {
    return _snd_pcm_format_mask_free(
      obj,
    );
  }

  late final _snd_pcm_format_mask_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_free>>(
          'snd_pcm_format_mask_free');
  late final _dart_snd_pcm_format_mask_free _snd_pcm_format_mask_free =
      _snd_pcm_format_mask_free_ptr
          .asFunction<_dart_snd_pcm_format_mask_free>();

  void snd_pcm_format_mask_copy(
    ffi.Pointer<snd_pcm_format_mask_> dst,
    ffi.Pointer<snd_pcm_format_mask_> src,
  ) {
    return _snd_pcm_format_mask_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_format_mask_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_copy>>(
          'snd_pcm_format_mask_copy');
  late final _dart_snd_pcm_format_mask_copy _snd_pcm_format_mask_copy =
      _snd_pcm_format_mask_copy_ptr
          .asFunction<_dart_snd_pcm_format_mask_copy>();

  void snd_pcm_format_mask_none(
    ffi.Pointer<snd_pcm_format_mask_> mask,
  ) {
    return _snd_pcm_format_mask_none(
      mask,
    );
  }

  late final _snd_pcm_format_mask_none_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_none>>(
          'snd_pcm_format_mask_none');
  late final _dart_snd_pcm_format_mask_none _snd_pcm_format_mask_none =
      _snd_pcm_format_mask_none_ptr
          .asFunction<_dart_snd_pcm_format_mask_none>();

  void snd_pcm_format_mask_any(
    ffi.Pointer<snd_pcm_format_mask_> mask,
  ) {
    return _snd_pcm_format_mask_any(
      mask,
    );
  }

  late final _snd_pcm_format_mask_any_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_any>>(
          'snd_pcm_format_mask_any');
  late final _dart_snd_pcm_format_mask_any _snd_pcm_format_mask_any =
      _snd_pcm_format_mask_any_ptr.asFunction<_dart_snd_pcm_format_mask_any>();

  int snd_pcm_format_mask_test(
    ffi.Pointer<snd_pcm_format_mask_> mask,
    int val,
  ) {
    return _snd_pcm_format_mask_test(
      mask,
      val,
    );
  }

  late final _snd_pcm_format_mask_test_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_test>>(
          'snd_pcm_format_mask_test');
  late final _dart_snd_pcm_format_mask_test _snd_pcm_format_mask_test =
      _snd_pcm_format_mask_test_ptr
          .asFunction<_dart_snd_pcm_format_mask_test>();

  int snd_pcm_format_mask_empty(
    ffi.Pointer<snd_pcm_format_mask_> mask,
  ) {
    return _snd_pcm_format_mask_empty(
      mask,
    );
  }

  late final _snd_pcm_format_mask_empty_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_empty>>(
          'snd_pcm_format_mask_empty');
  late final _dart_snd_pcm_format_mask_empty _snd_pcm_format_mask_empty =
      _snd_pcm_format_mask_empty_ptr
          .asFunction<_dart_snd_pcm_format_mask_empty>();

  void snd_pcm_format_mask_set(
    ffi.Pointer<snd_pcm_format_mask_> mask,
    int val,
  ) {
    return _snd_pcm_format_mask_set(
      mask,
      val,
    );
  }

  late final _snd_pcm_format_mask_set_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_set>>(
          'snd_pcm_format_mask_set');
  late final _dart_snd_pcm_format_mask_set _snd_pcm_format_mask_set =
      _snd_pcm_format_mask_set_ptr.asFunction<_dart_snd_pcm_format_mask_set>();

  void snd_pcm_format_mask_reset(
    ffi.Pointer<snd_pcm_format_mask_> mask,
    int val,
  ) {
    return _snd_pcm_format_mask_reset(
      mask,
      val,
    );
  }

  late final _snd_pcm_format_mask_reset_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_mask_reset>>(
          'snd_pcm_format_mask_reset');
  late final _dart_snd_pcm_format_mask_reset _snd_pcm_format_mask_reset =
      _snd_pcm_format_mask_reset_ptr
          .asFunction<_dart_snd_pcm_format_mask_reset>();

  int snd_pcm_subformat_mask_sizeof() {
    return _snd_pcm_subformat_mask_sizeof();
  }

  late final _snd_pcm_subformat_mask_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_sizeof>>(
          'snd_pcm_subformat_mask_sizeof');
  late final _dart_snd_pcm_subformat_mask_sizeof
      _snd_pcm_subformat_mask_sizeof = _snd_pcm_subformat_mask_sizeof_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_sizeof>();

  int snd_pcm_subformat_mask_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_subformat_mask_>> ptr,
  ) {
    return _snd_pcm_subformat_mask_malloc(
      ptr,
    );
  }

  late final _snd_pcm_subformat_mask_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_malloc>>(
          'snd_pcm_subformat_mask_malloc');
  late final _dart_snd_pcm_subformat_mask_malloc
      _snd_pcm_subformat_mask_malloc = _snd_pcm_subformat_mask_malloc_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_malloc>();

  void snd_pcm_subformat_mask_free(
    ffi.Pointer<snd_pcm_subformat_mask_> obj,
  ) {
    return _snd_pcm_subformat_mask_free(
      obj,
    );
  }

  late final _snd_pcm_subformat_mask_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_free>>(
          'snd_pcm_subformat_mask_free');
  late final _dart_snd_pcm_subformat_mask_free _snd_pcm_subformat_mask_free =
      _snd_pcm_subformat_mask_free_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_free>();

  void snd_pcm_subformat_mask_copy(
    ffi.Pointer<snd_pcm_subformat_mask_> dst,
    ffi.Pointer<snd_pcm_subformat_mask_> src,
  ) {
    return _snd_pcm_subformat_mask_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_subformat_mask_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_copy>>(
          'snd_pcm_subformat_mask_copy');
  late final _dart_snd_pcm_subformat_mask_copy _snd_pcm_subformat_mask_copy =
      _snd_pcm_subformat_mask_copy_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_copy>();

  void snd_pcm_subformat_mask_none(
    ffi.Pointer<snd_pcm_subformat_mask_> mask,
  ) {
    return _snd_pcm_subformat_mask_none(
      mask,
    );
  }

  late final _snd_pcm_subformat_mask_none_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_none>>(
          'snd_pcm_subformat_mask_none');
  late final _dart_snd_pcm_subformat_mask_none _snd_pcm_subformat_mask_none =
      _snd_pcm_subformat_mask_none_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_none>();

  void snd_pcm_subformat_mask_any(
    ffi.Pointer<snd_pcm_subformat_mask_> mask,
  ) {
    return _snd_pcm_subformat_mask_any(
      mask,
    );
  }

  late final _snd_pcm_subformat_mask_any_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_any>>(
          'snd_pcm_subformat_mask_any');
  late final _dart_snd_pcm_subformat_mask_any _snd_pcm_subformat_mask_any =
      _snd_pcm_subformat_mask_any_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_any>();

  int snd_pcm_subformat_mask_test(
    ffi.Pointer<snd_pcm_subformat_mask_> mask,
    int val,
  ) {
    return _snd_pcm_subformat_mask_test(
      mask,
      val,
    );
  }

  late final _snd_pcm_subformat_mask_test_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_test>>(
          'snd_pcm_subformat_mask_test');
  late final _dart_snd_pcm_subformat_mask_test _snd_pcm_subformat_mask_test =
      _snd_pcm_subformat_mask_test_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_test>();

  int snd_pcm_subformat_mask_empty(
    ffi.Pointer<snd_pcm_subformat_mask_> mask,
  ) {
    return _snd_pcm_subformat_mask_empty(
      mask,
    );
  }

  late final _snd_pcm_subformat_mask_empty_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_empty>>(
          'snd_pcm_subformat_mask_empty');
  late final _dart_snd_pcm_subformat_mask_empty _snd_pcm_subformat_mask_empty =
      _snd_pcm_subformat_mask_empty_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_empty>();

  void snd_pcm_subformat_mask_set(
    ffi.Pointer<snd_pcm_subformat_mask_> mask,
    int val,
  ) {
    return _snd_pcm_subformat_mask_set(
      mask,
      val,
    );
  }

  late final _snd_pcm_subformat_mask_set_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_set>>(
          'snd_pcm_subformat_mask_set');
  late final _dart_snd_pcm_subformat_mask_set _snd_pcm_subformat_mask_set =
      _snd_pcm_subformat_mask_set_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_set>();

  void snd_pcm_subformat_mask_reset(
    ffi.Pointer<snd_pcm_subformat_mask_> mask,
    int val,
  ) {
    return _snd_pcm_subformat_mask_reset(
      mask,
      val,
    );
  }

  late final _snd_pcm_subformat_mask_reset_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_mask_reset>>(
          'snd_pcm_subformat_mask_reset');
  late final _dart_snd_pcm_subformat_mask_reset _snd_pcm_subformat_mask_reset =
      _snd_pcm_subformat_mask_reset_ptr
          .asFunction<_dart_snd_pcm_subformat_mask_reset>();

  int snd_pcm_status_sizeof() {
    return _snd_pcm_status_sizeof();
  }

  late final _snd_pcm_status_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_sizeof>>(
          'snd_pcm_status_sizeof');
  late final _dart_snd_pcm_status_sizeof _snd_pcm_status_sizeof =
      _snd_pcm_status_sizeof_ptr.asFunction<_dart_snd_pcm_status_sizeof>();

  int snd_pcm_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_status_>> ptr,
  ) {
    return _snd_pcm_status_malloc(
      ptr,
    );
  }

  late final _snd_pcm_status_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_malloc>>(
          'snd_pcm_status_malloc');
  late final _dart_snd_pcm_status_malloc _snd_pcm_status_malloc =
      _snd_pcm_status_malloc_ptr.asFunction<_dart_snd_pcm_status_malloc>();

  void snd_pcm_status_free(
    ffi.Pointer<snd_pcm_status_> obj,
  ) {
    return _snd_pcm_status_free(
      obj,
    );
  }

  late final _snd_pcm_status_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_free>>(
          'snd_pcm_status_free');
  late final _dart_snd_pcm_status_free _snd_pcm_status_free =
      _snd_pcm_status_free_ptr.asFunction<_dart_snd_pcm_status_free>();

  void snd_pcm_status_copy(
    ffi.Pointer<snd_pcm_status_> dst,
    ffi.Pointer<snd_pcm_status_> src,
  ) {
    return _snd_pcm_status_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_status_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_copy>>(
          'snd_pcm_status_copy');
  late final _dart_snd_pcm_status_copy _snd_pcm_status_copy =
      _snd_pcm_status_copy_ptr.asFunction<_dart_snd_pcm_status_copy>();

  int snd_pcm_status_get_state(
    ffi.Pointer<snd_pcm_status_> obj,
  ) {
    return _snd_pcm_status_get_state(
      obj,
    );
  }

  late final _snd_pcm_status_get_state_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_state>>(
          'snd_pcm_status_get_state');
  late final _dart_snd_pcm_status_get_state _snd_pcm_status_get_state =
      _snd_pcm_status_get_state_ptr
          .asFunction<_dart_snd_pcm_status_get_state>();

  void snd_pcm_status_get_trigger_tstamp(
    ffi.Pointer<snd_pcm_status_> obj,
    ffi.Pointer<timeval> ptr,
  ) {
    return _snd_pcm_status_get_trigger_tstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_trigger_tstamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_trigger_tstamp>>(
          'snd_pcm_status_get_trigger_tstamp');
  late final _dart_snd_pcm_status_get_trigger_tstamp
      _snd_pcm_status_get_trigger_tstamp =
      _snd_pcm_status_get_trigger_tstamp_ptr
          .asFunction<_dart_snd_pcm_status_get_trigger_tstamp>();

  void snd_pcm_status_get_trigger_htstamp(
    ffi.Pointer<snd_pcm_status_> obj,
    ffi.Pointer<timespec> ptr,
  ) {
    return _snd_pcm_status_get_trigger_htstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_trigger_htstamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_trigger_htstamp>>(
          'snd_pcm_status_get_trigger_htstamp');
  late final _dart_snd_pcm_status_get_trigger_htstamp
      _snd_pcm_status_get_trigger_htstamp =
      _snd_pcm_status_get_trigger_htstamp_ptr
          .asFunction<_dart_snd_pcm_status_get_trigger_htstamp>();

  void snd_pcm_status_get_tstamp(
    ffi.Pointer<snd_pcm_status_> obj,
    ffi.Pointer<timeval> ptr,
  ) {
    return _snd_pcm_status_get_tstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_tstamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_tstamp>>(
          'snd_pcm_status_get_tstamp');
  late final _dart_snd_pcm_status_get_tstamp _snd_pcm_status_get_tstamp =
      _snd_pcm_status_get_tstamp_ptr
          .asFunction<_dart_snd_pcm_status_get_tstamp>();

  void snd_pcm_status_get_htstamp(
    ffi.Pointer<snd_pcm_status_> obj,
    ffi.Pointer<timespec> ptr,
  ) {
    return _snd_pcm_status_get_htstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_htstamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_htstamp>>(
          'snd_pcm_status_get_htstamp');
  late final _dart_snd_pcm_status_get_htstamp _snd_pcm_status_get_htstamp =
      _snd_pcm_status_get_htstamp_ptr
          .asFunction<_dart_snd_pcm_status_get_htstamp>();

  void snd_pcm_status_get_audio_htstamp(
    ffi.Pointer<snd_pcm_status_> obj,
    ffi.Pointer<timespec> ptr,
  ) {
    return _snd_pcm_status_get_audio_htstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_audio_htstamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_audio_htstamp>>(
          'snd_pcm_status_get_audio_htstamp');
  late final _dart_snd_pcm_status_get_audio_htstamp
      _snd_pcm_status_get_audio_htstamp = _snd_pcm_status_get_audio_htstamp_ptr
          .asFunction<_dart_snd_pcm_status_get_audio_htstamp>();

  void snd_pcm_status_get_driver_htstamp(
    ffi.Pointer<snd_pcm_status_> obj,
    ffi.Pointer<timespec> ptr,
  ) {
    return _snd_pcm_status_get_driver_htstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_driver_htstamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_driver_htstamp>>(
          'snd_pcm_status_get_driver_htstamp');
  late final _dart_snd_pcm_status_get_driver_htstamp
      _snd_pcm_status_get_driver_htstamp =
      _snd_pcm_status_get_driver_htstamp_ptr
          .asFunction<_dart_snd_pcm_status_get_driver_htstamp>();

  void snd_pcm_status_get_audio_htstamp_report(
    ffi.Pointer<snd_pcm_status_> obj,
    ffi.Pointer<snd_pcm_audio_tstamp_report_t> audio_tstamp_report,
  ) {
    return _snd_pcm_status_get_audio_htstamp_report(
      obj,
      audio_tstamp_report,
    );
  }

  late final _snd_pcm_status_get_audio_htstamp_report_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_audio_htstamp_report>>(
          'snd_pcm_status_get_audio_htstamp_report');
  late final _dart_snd_pcm_status_get_audio_htstamp_report
      _snd_pcm_status_get_audio_htstamp_report =
      _snd_pcm_status_get_audio_htstamp_report_ptr
          .asFunction<_dart_snd_pcm_status_get_audio_htstamp_report>();

  void snd_pcm_status_set_audio_htstamp_config(
    ffi.Pointer<snd_pcm_status_> obj,
    ffi.Pointer<snd_pcm_audio_tstamp_config_t> audio_tstamp_config,
  ) {
    return _snd_pcm_status_set_audio_htstamp_config(
      obj,
      audio_tstamp_config,
    );
  }

  late final _snd_pcm_status_set_audio_htstamp_config_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_set_audio_htstamp_config>>(
          'snd_pcm_status_set_audio_htstamp_config');
  late final _dart_snd_pcm_status_set_audio_htstamp_config
      _snd_pcm_status_set_audio_htstamp_config =
      _snd_pcm_status_set_audio_htstamp_config_ptr
          .asFunction<_dart_snd_pcm_status_set_audio_htstamp_config>();

  int snd_pcm_status_get_delay(
    ffi.Pointer<snd_pcm_status_> obj,
  ) {
    return _snd_pcm_status_get_delay(
      obj,
    );
  }

  late final _snd_pcm_status_get_delay_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_delay>>(
          'snd_pcm_status_get_delay');
  late final _dart_snd_pcm_status_get_delay _snd_pcm_status_get_delay =
      _snd_pcm_status_get_delay_ptr
          .asFunction<_dart_snd_pcm_status_get_delay>();

  int snd_pcm_status_get_avail(
    ffi.Pointer<snd_pcm_status_> obj,
  ) {
    return _snd_pcm_status_get_avail(
      obj,
    );
  }

  late final _snd_pcm_status_get_avail_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_avail>>(
          'snd_pcm_status_get_avail');
  late final _dart_snd_pcm_status_get_avail _snd_pcm_status_get_avail =
      _snd_pcm_status_get_avail_ptr
          .asFunction<_dart_snd_pcm_status_get_avail>();

  int snd_pcm_status_get_avail_max(
    ffi.Pointer<snd_pcm_status_> obj,
  ) {
    return _snd_pcm_status_get_avail_max(
      obj,
    );
  }

  late final _snd_pcm_status_get_avail_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_avail_max>>(
          'snd_pcm_status_get_avail_max');
  late final _dart_snd_pcm_status_get_avail_max _snd_pcm_status_get_avail_max =
      _snd_pcm_status_get_avail_max_ptr
          .asFunction<_dart_snd_pcm_status_get_avail_max>();

  int snd_pcm_status_get_overrange(
    ffi.Pointer<snd_pcm_status_> obj,
  ) {
    return _snd_pcm_status_get_overrange(
      obj,
    );
  }

  late final _snd_pcm_status_get_overrange_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_get_overrange>>(
          'snd_pcm_status_get_overrange');
  late final _dart_snd_pcm_status_get_overrange _snd_pcm_status_get_overrange =
      _snd_pcm_status_get_overrange_ptr
          .asFunction<_dart_snd_pcm_status_get_overrange>();

  ffi.Pointer<ffi.Int8> snd_pcm_type_name(
    int type,
  ) {
    return _snd_pcm_type_name(
      type,
    );
  }

  late final _snd_pcm_type_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_type_name>>('snd_pcm_type_name');
  late final _dart_snd_pcm_type_name _snd_pcm_type_name =
      _snd_pcm_type_name_ptr.asFunction<_dart_snd_pcm_type_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_stream_name(
    int stream,
  ) {
    return _snd_pcm_stream_name(
      stream,
    );
  }

  late final _snd_pcm_stream_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_stream_name>>(
          'snd_pcm_stream_name');
  late final _dart_snd_pcm_stream_name _snd_pcm_stream_name =
      _snd_pcm_stream_name_ptr.asFunction<_dart_snd_pcm_stream_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_access_name(
    int _access,
  ) {
    return _snd_pcm_access_name(
      _access,
    );
  }

  late final _snd_pcm_access_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_access_name>>(
          'snd_pcm_access_name');
  late final _dart_snd_pcm_access_name _snd_pcm_access_name =
      _snd_pcm_access_name_ptr.asFunction<_dart_snd_pcm_access_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_format_name(
    int format,
  ) {
    return _snd_pcm_format_name(
      format,
    );
  }

  late final _snd_pcm_format_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_name>>(
          'snd_pcm_format_name');
  late final _dart_snd_pcm_format_name _snd_pcm_format_name =
      _snd_pcm_format_name_ptr.asFunction<_dart_snd_pcm_format_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_format_description(
    int format,
  ) {
    return _snd_pcm_format_description(
      format,
    );
  }

  late final _snd_pcm_format_description_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_description>>(
          'snd_pcm_format_description');
  late final _dart_snd_pcm_format_description _snd_pcm_format_description =
      _snd_pcm_format_description_ptr
          .asFunction<_dart_snd_pcm_format_description>();

  ffi.Pointer<ffi.Int8> snd_pcm_subformat_name(
    int subformat,
  ) {
    return _snd_pcm_subformat_name(
      subformat,
    );
  }

  late final _snd_pcm_subformat_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_name>>(
          'snd_pcm_subformat_name');
  late final _dart_snd_pcm_subformat_name _snd_pcm_subformat_name =
      _snd_pcm_subformat_name_ptr.asFunction<_dart_snd_pcm_subformat_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_subformat_description(
    int subformat,
  ) {
    return _snd_pcm_subformat_description(
      subformat,
    );
  }

  late final _snd_pcm_subformat_description_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_subformat_description>>(
          'snd_pcm_subformat_description');
  late final _dart_snd_pcm_subformat_description
      _snd_pcm_subformat_description = _snd_pcm_subformat_description_ptr
          .asFunction<_dart_snd_pcm_subformat_description>();

  int snd_pcm_format_value(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_pcm_format_value(
      name,
    );
  }

  late final _snd_pcm_format_value_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_value>>(
          'snd_pcm_format_value');
  late final _dart_snd_pcm_format_value _snd_pcm_format_value =
      _snd_pcm_format_value_ptr.asFunction<_dart_snd_pcm_format_value>();

  ffi.Pointer<ffi.Int8> snd_pcm_tstamp_mode_name(
    int mode,
  ) {
    return _snd_pcm_tstamp_mode_name(
      mode,
    );
  }

  late final _snd_pcm_tstamp_mode_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_tstamp_mode_name>>(
          'snd_pcm_tstamp_mode_name');
  late final _dart_snd_pcm_tstamp_mode_name _snd_pcm_tstamp_mode_name =
      _snd_pcm_tstamp_mode_name_ptr
          .asFunction<_dart_snd_pcm_tstamp_mode_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_state_name(
    int state,
  ) {
    return _snd_pcm_state_name(
      state,
    );
  }

  late final _snd_pcm_state_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_state_name>>('snd_pcm_state_name');
  late final _dart_snd_pcm_state_name _snd_pcm_state_name =
      _snd_pcm_state_name_ptr.asFunction<_dart_snd_pcm_state_name>();

  int snd_pcm_dump(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_output_> out,
  ) {
    return _snd_pcm_dump(
      pcm,
      out,
    );
  }

  late final _snd_pcm_dump_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_dump>>('snd_pcm_dump');
  late final _dart_snd_pcm_dump _snd_pcm_dump =
      _snd_pcm_dump_ptr.asFunction<_dart_snd_pcm_dump>();

  int snd_pcm_dump_hw_setup(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_output_> out,
  ) {
    return _snd_pcm_dump_hw_setup(
      pcm,
      out,
    );
  }

  late final _snd_pcm_dump_hw_setup_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_dump_hw_setup>>(
          'snd_pcm_dump_hw_setup');
  late final _dart_snd_pcm_dump_hw_setup _snd_pcm_dump_hw_setup =
      _snd_pcm_dump_hw_setup_ptr.asFunction<_dart_snd_pcm_dump_hw_setup>();

  int snd_pcm_dump_sw_setup(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_output_> out,
  ) {
    return _snd_pcm_dump_sw_setup(
      pcm,
      out,
    );
  }

  late final _snd_pcm_dump_sw_setup_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_dump_sw_setup>>(
          'snd_pcm_dump_sw_setup');
  late final _dart_snd_pcm_dump_sw_setup _snd_pcm_dump_sw_setup =
      _snd_pcm_dump_sw_setup_ptr.asFunction<_dart_snd_pcm_dump_sw_setup>();

  int snd_pcm_dump_setup(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_output_> out,
  ) {
    return _snd_pcm_dump_setup(
      pcm,
      out,
    );
  }

  late final _snd_pcm_dump_setup_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_dump_setup>>('snd_pcm_dump_setup');
  late final _dart_snd_pcm_dump_setup _snd_pcm_dump_setup =
      _snd_pcm_dump_setup_ptr.asFunction<_dart_snd_pcm_dump_setup>();

  int snd_pcm_hw_params_dump(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<snd_output_> out,
  ) {
    return _snd_pcm_hw_params_dump(
      params,
      out,
    );
  }

  late final _snd_pcm_hw_params_dump_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_dump>>(
          'snd_pcm_hw_params_dump');
  late final _dart_snd_pcm_hw_params_dump _snd_pcm_hw_params_dump =
      _snd_pcm_hw_params_dump_ptr.asFunction<_dart_snd_pcm_hw_params_dump>();

  int snd_pcm_sw_params_dump(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<snd_output_> out,
  ) {
    return _snd_pcm_sw_params_dump(
      params,
      out,
    );
  }

  late final _snd_pcm_sw_params_dump_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_dump>>(
          'snd_pcm_sw_params_dump');
  late final _dart_snd_pcm_sw_params_dump _snd_pcm_sw_params_dump =
      _snd_pcm_sw_params_dump_ptr.asFunction<_dart_snd_pcm_sw_params_dump>();

  int snd_pcm_status_dump(
    ffi.Pointer<snd_pcm_status_> status,
    ffi.Pointer<snd_output_> out,
  ) {
    return _snd_pcm_status_dump(
      status,
      out,
    );
  }

  late final _snd_pcm_status_dump_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_status_dump>>(
          'snd_pcm_status_dump');
  late final _dart_snd_pcm_status_dump _snd_pcm_status_dump =
      _snd_pcm_status_dump_ptr.asFunction<_dart_snd_pcm_status_dump>();

  int snd_pcm_mmap_begin(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Pointer<snd_pcm_channel_area_t>> areas,
    ffi.Pointer<ffi.Uint64> offset,
    ffi.Pointer<ffi.Uint64> frames,
  ) {
    return _snd_pcm_mmap_begin(
      pcm,
      areas,
      offset,
      frames,
    );
  }

  late final _snd_pcm_mmap_begin_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_mmap_begin>>('snd_pcm_mmap_begin');
  late final _dart_snd_pcm_mmap_begin _snd_pcm_mmap_begin =
      _snd_pcm_mmap_begin_ptr.asFunction<_dart_snd_pcm_mmap_begin>();

  int snd_pcm_mmap_commit(
    ffi.Pointer<snd_pcm_> pcm,
    int offset,
    int frames,
  ) {
    return _snd_pcm_mmap_commit(
      pcm,
      offset,
      frames,
    );
  }

  late final _snd_pcm_mmap_commit_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_mmap_commit>>(
          'snd_pcm_mmap_commit');
  late final _dart_snd_pcm_mmap_commit _snd_pcm_mmap_commit =
      _snd_pcm_mmap_commit_ptr.asFunction<_dart_snd_pcm_mmap_commit>();

  int snd_pcm_mmap_writei(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_pcm_mmap_writei(
      pcm,
      buffer,
      size,
    );
  }

  late final _snd_pcm_mmap_writei_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_mmap_writei>>(
          'snd_pcm_mmap_writei');
  late final _dart_snd_pcm_mmap_writei _snd_pcm_mmap_writei =
      _snd_pcm_mmap_writei_ptr.asFunction<_dart_snd_pcm_mmap_writei>();

  int snd_pcm_mmap_readi(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_pcm_mmap_readi(
      pcm,
      buffer,
      size,
    );
  }

  late final _snd_pcm_mmap_readi_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_mmap_readi>>('snd_pcm_mmap_readi');
  late final _dart_snd_pcm_mmap_readi _snd_pcm_mmap_readi =
      _snd_pcm_mmap_readi_ptr.asFunction<_dart_snd_pcm_mmap_readi>();

  int snd_pcm_mmap_writen(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
    int size,
  ) {
    return _snd_pcm_mmap_writen(
      pcm,
      bufs,
      size,
    );
  }

  late final _snd_pcm_mmap_writen_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_mmap_writen>>(
          'snd_pcm_mmap_writen');
  late final _dart_snd_pcm_mmap_writen _snd_pcm_mmap_writen =
      _snd_pcm_mmap_writen_ptr.asFunction<_dart_snd_pcm_mmap_writen>();

  int snd_pcm_mmap_readn(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
    int size,
  ) {
    return _snd_pcm_mmap_readn(
      pcm,
      bufs,
      size,
    );
  }

  late final _snd_pcm_mmap_readn_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_mmap_readn>>('snd_pcm_mmap_readn');
  late final _dart_snd_pcm_mmap_readn _snd_pcm_mmap_readn =
      _snd_pcm_mmap_readn_ptr.asFunction<_dart_snd_pcm_mmap_readn>();

  int snd_pcm_format_signed(
    int format,
  ) {
    return _snd_pcm_format_signed(
      format,
    );
  }

  late final _snd_pcm_format_signed_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_signed>>(
          'snd_pcm_format_signed');
  late final _dart_snd_pcm_format_signed _snd_pcm_format_signed =
      _snd_pcm_format_signed_ptr.asFunction<_dart_snd_pcm_format_signed>();

  int snd_pcm_format_unsigned(
    int format,
  ) {
    return _snd_pcm_format_unsigned(
      format,
    );
  }

  late final _snd_pcm_format_unsigned_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_unsigned>>(
          'snd_pcm_format_unsigned');
  late final _dart_snd_pcm_format_unsigned _snd_pcm_format_unsigned =
      _snd_pcm_format_unsigned_ptr.asFunction<_dart_snd_pcm_format_unsigned>();

  int snd_pcm_format_linear(
    int format,
  ) {
    return _snd_pcm_format_linear(
      format,
    );
  }

  late final _snd_pcm_format_linear_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_linear>>(
          'snd_pcm_format_linear');
  late final _dart_snd_pcm_format_linear _snd_pcm_format_linear =
      _snd_pcm_format_linear_ptr.asFunction<_dart_snd_pcm_format_linear>();

  int snd_pcm_format_float(
    int format,
  ) {
    return _snd_pcm_format_float(
      format,
    );
  }

  late final _snd_pcm_format_float_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_float>>(
          'snd_pcm_format_float');
  late final _dart_snd_pcm_format_float _snd_pcm_format_float =
      _snd_pcm_format_float_ptr.asFunction<_dart_snd_pcm_format_float>();

  int snd_pcm_format_little_endian(
    int format,
  ) {
    return _snd_pcm_format_little_endian(
      format,
    );
  }

  late final _snd_pcm_format_little_endian_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_little_endian>>(
          'snd_pcm_format_little_endian');
  late final _dart_snd_pcm_format_little_endian _snd_pcm_format_little_endian =
      _snd_pcm_format_little_endian_ptr
          .asFunction<_dart_snd_pcm_format_little_endian>();

  int snd_pcm_format_big_endian(
    int format,
  ) {
    return _snd_pcm_format_big_endian(
      format,
    );
  }

  late final _snd_pcm_format_big_endian_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_big_endian>>(
          'snd_pcm_format_big_endian');
  late final _dart_snd_pcm_format_big_endian _snd_pcm_format_big_endian =
      _snd_pcm_format_big_endian_ptr
          .asFunction<_dart_snd_pcm_format_big_endian>();

  int snd_pcm_format_cpu_endian(
    int format,
  ) {
    return _snd_pcm_format_cpu_endian(
      format,
    );
  }

  late final _snd_pcm_format_cpu_endian_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_cpu_endian>>(
          'snd_pcm_format_cpu_endian');
  late final _dart_snd_pcm_format_cpu_endian _snd_pcm_format_cpu_endian =
      _snd_pcm_format_cpu_endian_ptr
          .asFunction<_dart_snd_pcm_format_cpu_endian>();

  int snd_pcm_format_width(
    int format,
  ) {
    return _snd_pcm_format_width(
      format,
    );
  }

  late final _snd_pcm_format_width_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_width>>(
          'snd_pcm_format_width');
  late final _dart_snd_pcm_format_width _snd_pcm_format_width =
      _snd_pcm_format_width_ptr.asFunction<_dart_snd_pcm_format_width>();

  int snd_pcm_format_physical_width(
    int format,
  ) {
    return _snd_pcm_format_physical_width(
      format,
    );
  }

  late final _snd_pcm_format_physical_width_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_physical_width>>(
          'snd_pcm_format_physical_width');
  late final _dart_snd_pcm_format_physical_width
      _snd_pcm_format_physical_width = _snd_pcm_format_physical_width_ptr
          .asFunction<_dart_snd_pcm_format_physical_width>();

  int snd_pcm_build_linear_format(
    int width,
    int pwidth,
    int unsignd,
    int big_endian,
  ) {
    return _snd_pcm_build_linear_format(
      width,
      pwidth,
      unsignd,
      big_endian,
    );
  }

  late final _snd_pcm_build_linear_format_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_build_linear_format>>(
          'snd_pcm_build_linear_format');
  late final _dart_snd_pcm_build_linear_format _snd_pcm_build_linear_format =
      _snd_pcm_build_linear_format_ptr
          .asFunction<_dart_snd_pcm_build_linear_format>();

  int snd_pcm_format_size(
    int format,
    int samples,
  ) {
    return _snd_pcm_format_size(
      format,
      samples,
    );
  }

  late final _snd_pcm_format_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_size>>(
          'snd_pcm_format_size');
  late final _dart_snd_pcm_format_size _snd_pcm_format_size =
      _snd_pcm_format_size_ptr.asFunction<_dart_snd_pcm_format_size>();

  int snd_pcm_format_silence(
    int format,
  ) {
    return _snd_pcm_format_silence(
      format,
    );
  }

  late final _snd_pcm_format_silence_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_silence>>(
          'snd_pcm_format_silence');
  late final _dart_snd_pcm_format_silence _snd_pcm_format_silence =
      _snd_pcm_format_silence_ptr.asFunction<_dart_snd_pcm_format_silence>();

  int snd_pcm_format_silence_16(
    int format,
  ) {
    return _snd_pcm_format_silence_16(
      format,
    );
  }

  late final _snd_pcm_format_silence_16_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_silence_16>>(
          'snd_pcm_format_silence_16');
  late final _dart_snd_pcm_format_silence_16 _snd_pcm_format_silence_16 =
      _snd_pcm_format_silence_16_ptr
          .asFunction<_dart_snd_pcm_format_silence_16>();

  int snd_pcm_format_silence_32(
    int format,
  ) {
    return _snd_pcm_format_silence_32(
      format,
    );
  }

  late final _snd_pcm_format_silence_32_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_silence_32>>(
          'snd_pcm_format_silence_32');
  late final _dart_snd_pcm_format_silence_32 _snd_pcm_format_silence_32 =
      _snd_pcm_format_silence_32_ptr
          .asFunction<_dart_snd_pcm_format_silence_32>();

  int snd_pcm_format_silence_64(
    int format,
  ) {
    return _snd_pcm_format_silence_64(
      format,
    );
  }

  late final _snd_pcm_format_silence_64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_silence_64>>(
          'snd_pcm_format_silence_64');
  late final _dart_snd_pcm_format_silence_64 _snd_pcm_format_silence_64 =
      _snd_pcm_format_silence_64_ptr
          .asFunction<_dart_snd_pcm_format_silence_64>();

  int snd_pcm_format_set_silence(
    int format,
    ffi.Pointer<ffi.Void> buf,
    int samples,
  ) {
    return _snd_pcm_format_set_silence(
      format,
      buf,
      samples,
    );
  }

  late final _snd_pcm_format_set_silence_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_format_set_silence>>(
          'snd_pcm_format_set_silence');
  late final _dart_snd_pcm_format_set_silence _snd_pcm_format_set_silence =
      _snd_pcm_format_set_silence_ptr
          .asFunction<_dart_snd_pcm_format_set_silence>();

  int snd_pcm_bytes_to_frames(
    ffi.Pointer<snd_pcm_> pcm,
    int bytes,
  ) {
    return _snd_pcm_bytes_to_frames(
      pcm,
      bytes,
    );
  }

  late final _snd_pcm_bytes_to_frames_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_bytes_to_frames>>(
          'snd_pcm_bytes_to_frames');
  late final _dart_snd_pcm_bytes_to_frames _snd_pcm_bytes_to_frames =
      _snd_pcm_bytes_to_frames_ptr.asFunction<_dart_snd_pcm_bytes_to_frames>();

  int snd_pcm_frames_to_bytes(
    ffi.Pointer<snd_pcm_> pcm,
    int frames,
  ) {
    return _snd_pcm_frames_to_bytes(
      pcm,
      frames,
    );
  }

  late final _snd_pcm_frames_to_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_frames_to_bytes>>(
          'snd_pcm_frames_to_bytes');
  late final _dart_snd_pcm_frames_to_bytes _snd_pcm_frames_to_bytes =
      _snd_pcm_frames_to_bytes_ptr.asFunction<_dart_snd_pcm_frames_to_bytes>();

  int snd_pcm_bytes_to_samples(
    ffi.Pointer<snd_pcm_> pcm,
    int bytes,
  ) {
    return _snd_pcm_bytes_to_samples(
      pcm,
      bytes,
    );
  }

  late final _snd_pcm_bytes_to_samples_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_bytes_to_samples>>(
          'snd_pcm_bytes_to_samples');
  late final _dart_snd_pcm_bytes_to_samples _snd_pcm_bytes_to_samples =
      _snd_pcm_bytes_to_samples_ptr
          .asFunction<_dart_snd_pcm_bytes_to_samples>();

  int snd_pcm_samples_to_bytes(
    ffi.Pointer<snd_pcm_> pcm,
    int samples,
  ) {
    return _snd_pcm_samples_to_bytes(
      pcm,
      samples,
    );
  }

  late final _snd_pcm_samples_to_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_samples_to_bytes>>(
          'snd_pcm_samples_to_bytes');
  late final _dart_snd_pcm_samples_to_bytes _snd_pcm_samples_to_bytes =
      _snd_pcm_samples_to_bytes_ptr
          .asFunction<_dart_snd_pcm_samples_to_bytes>();

  int snd_pcm_area_silence(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channel,
    int dst_offset,
    int samples,
    int format,
  ) {
    return _snd_pcm_area_silence(
      dst_channel,
      dst_offset,
      samples,
      format,
    );
  }

  late final _snd_pcm_area_silence_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_area_silence>>(
          'snd_pcm_area_silence');
  late final _dart_snd_pcm_area_silence _snd_pcm_area_silence =
      _snd_pcm_area_silence_ptr.asFunction<_dart_snd_pcm_area_silence>();

  int snd_pcm_areas_silence(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
    int dst_offset,
    int channels,
    int frames,
    int format,
  ) {
    return _snd_pcm_areas_silence(
      dst_channels,
      dst_offset,
      channels,
      frames,
      format,
    );
  }

  late final _snd_pcm_areas_silence_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_areas_silence>>(
          'snd_pcm_areas_silence');
  late final _dart_snd_pcm_areas_silence _snd_pcm_areas_silence =
      _snd_pcm_areas_silence_ptr.asFunction<_dart_snd_pcm_areas_silence>();

  int snd_pcm_area_copy(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channel,
    int dst_offset,
    ffi.Pointer<snd_pcm_channel_area_t> src_channel,
    int src_offset,
    int samples,
    int format,
  ) {
    return _snd_pcm_area_copy(
      dst_channel,
      dst_offset,
      src_channel,
      src_offset,
      samples,
      format,
    );
  }

  late final _snd_pcm_area_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_area_copy>>('snd_pcm_area_copy');
  late final _dart_snd_pcm_area_copy _snd_pcm_area_copy =
      _snd_pcm_area_copy_ptr.asFunction<_dart_snd_pcm_area_copy>();

  int snd_pcm_areas_copy(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
    int dst_offset,
    ffi.Pointer<snd_pcm_channel_area_t> src_channels,
    int src_offset,
    int channels,
    int frames,
    int format,
  ) {
    return _snd_pcm_areas_copy(
      dst_channels,
      dst_offset,
      src_channels,
      src_offset,
      channels,
      frames,
      format,
    );
  }

  late final _snd_pcm_areas_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_areas_copy>>('snd_pcm_areas_copy');
  late final _dart_snd_pcm_areas_copy _snd_pcm_areas_copy =
      _snd_pcm_areas_copy_ptr.asFunction<_dart_snd_pcm_areas_copy>();

  int snd_pcm_areas_copy_wrap(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
    int dst_offset,
    int dst_size,
    ffi.Pointer<snd_pcm_channel_area_t> src_channels,
    int src_offset,
    int src_size,
    int channels,
    int frames,
    int format,
  ) {
    return _snd_pcm_areas_copy_wrap(
      dst_channels,
      dst_offset,
      dst_size,
      src_channels,
      src_offset,
      src_size,
      channels,
      frames,
      format,
    );
  }

  late final _snd_pcm_areas_copy_wrap_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_areas_copy_wrap>>(
          'snd_pcm_areas_copy_wrap');
  late final _dart_snd_pcm_areas_copy_wrap _snd_pcm_areas_copy_wrap =
      _snd_pcm_areas_copy_wrap_ptr.asFunction<_dart_snd_pcm_areas_copy_wrap>();

  ffi.Pointer<snd_pcm_> snd_pcm_hook_get_pcm(
    ffi.Pointer<snd_pcm_hook_> hook,
  ) {
    return _snd_pcm_hook_get_pcm(
      hook,
    );
  }

  late final _snd_pcm_hook_get_pcm_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hook_get_pcm>>(
          'snd_pcm_hook_get_pcm');
  late final _dart_snd_pcm_hook_get_pcm _snd_pcm_hook_get_pcm =
      _snd_pcm_hook_get_pcm_ptr.asFunction<_dart_snd_pcm_hook_get_pcm>();

  ffi.Pointer<ffi.Void> snd_pcm_hook_get_private(
    ffi.Pointer<snd_pcm_hook_> hook,
  ) {
    return _snd_pcm_hook_get_private(
      hook,
    );
  }

  late final _snd_pcm_hook_get_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hook_get_private>>(
          'snd_pcm_hook_get_private');
  late final _dart_snd_pcm_hook_get_private _snd_pcm_hook_get_private =
      _snd_pcm_hook_get_private_ptr
          .asFunction<_dart_snd_pcm_hook_get_private>();

  void snd_pcm_hook_set_private(
    ffi.Pointer<snd_pcm_hook_> hook,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_pcm_hook_set_private(
      hook,
      private_data,
    );
  }

  late final _snd_pcm_hook_set_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hook_set_private>>(
          'snd_pcm_hook_set_private');
  late final _dart_snd_pcm_hook_set_private _snd_pcm_hook_set_private =
      _snd_pcm_hook_set_private_ptr
          .asFunction<_dart_snd_pcm_hook_set_private>();

  int snd_pcm_hook_add(
    ffi.Pointer<ffi.Pointer<snd_pcm_hook_>> hookp,
    ffi.Pointer<snd_pcm_> pcm,
    int type,
    ffi.Pointer<ffi.NativeFunction<snd_pcm_hook_func_t>> func,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_pcm_hook_add(
      hookp,
      pcm,
      type,
      func,
      private_data,
    );
  }

  late final _snd_pcm_hook_add_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hook_add>>('snd_pcm_hook_add');
  late final _dart_snd_pcm_hook_add _snd_pcm_hook_add =
      _snd_pcm_hook_add_ptr.asFunction<_dart_snd_pcm_hook_add>();

  int snd_pcm_hook_remove(
    ffi.Pointer<snd_pcm_hook_> hook,
  ) {
    return _snd_pcm_hook_remove(
      hook,
    );
  }

  late final _snd_pcm_hook_remove_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hook_remove>>(
          'snd_pcm_hook_remove');
  late final _dart_snd_pcm_hook_remove _snd_pcm_hook_remove =
      _snd_pcm_hook_remove_ptr.asFunction<_dart_snd_pcm_hook_remove>();

  int snd_pcm_meter_get_bufsize(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_meter_get_bufsize(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_bufsize_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_meter_get_bufsize>>(
          'snd_pcm_meter_get_bufsize');
  late final _dart_snd_pcm_meter_get_bufsize _snd_pcm_meter_get_bufsize =
      _snd_pcm_meter_get_bufsize_ptr
          .asFunction<_dart_snd_pcm_meter_get_bufsize>();

  int snd_pcm_meter_get_channels(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_meter_get_channels(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_channels_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_meter_get_channels>>(
          'snd_pcm_meter_get_channels');
  late final _dart_snd_pcm_meter_get_channels _snd_pcm_meter_get_channels =
      _snd_pcm_meter_get_channels_ptr
          .asFunction<_dart_snd_pcm_meter_get_channels>();

  int snd_pcm_meter_get_rate(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_meter_get_rate(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_rate_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_meter_get_rate>>(
          'snd_pcm_meter_get_rate');
  late final _dart_snd_pcm_meter_get_rate _snd_pcm_meter_get_rate =
      _snd_pcm_meter_get_rate_ptr.asFunction<_dart_snd_pcm_meter_get_rate>();

  int snd_pcm_meter_get_now(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_meter_get_now(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_now_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_meter_get_now>>(
          'snd_pcm_meter_get_now');
  late final _dart_snd_pcm_meter_get_now _snd_pcm_meter_get_now =
      _snd_pcm_meter_get_now_ptr.asFunction<_dart_snd_pcm_meter_get_now>();

  int snd_pcm_meter_get_boundary(
    ffi.Pointer<snd_pcm_> pcm,
  ) {
    return _snd_pcm_meter_get_boundary(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_boundary_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_meter_get_boundary>>(
          'snd_pcm_meter_get_boundary');
  late final _dart_snd_pcm_meter_get_boundary _snd_pcm_meter_get_boundary =
      _snd_pcm_meter_get_boundary_ptr
          .asFunction<_dart_snd_pcm_meter_get_boundary>();

  int snd_pcm_meter_add_scope(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_scope_> scope,
  ) {
    return _snd_pcm_meter_add_scope(
      pcm,
      scope,
    );
  }

  late final _snd_pcm_meter_add_scope_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_meter_add_scope>>(
          'snd_pcm_meter_add_scope');
  late final _dart_snd_pcm_meter_add_scope _snd_pcm_meter_add_scope =
      _snd_pcm_meter_add_scope_ptr.asFunction<_dart_snd_pcm_meter_add_scope>();

  ffi.Pointer<snd_pcm_scope_> snd_pcm_meter_search_scope(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_pcm_meter_search_scope(
      pcm,
      name,
    );
  }

  late final _snd_pcm_meter_search_scope_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_meter_search_scope>>(
          'snd_pcm_meter_search_scope');
  late final _dart_snd_pcm_meter_search_scope _snd_pcm_meter_search_scope =
      _snd_pcm_meter_search_scope_ptr
          .asFunction<_dart_snd_pcm_meter_search_scope>();

  int snd_pcm_scope_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_scope_>> ptr,
  ) {
    return _snd_pcm_scope_malloc(
      ptr,
    );
  }

  late final _snd_pcm_scope_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_scope_malloc>>(
          'snd_pcm_scope_malloc');
  late final _dart_snd_pcm_scope_malloc _snd_pcm_scope_malloc =
      _snd_pcm_scope_malloc_ptr.asFunction<_dart_snd_pcm_scope_malloc>();

  void snd_pcm_scope_set_ops(
    ffi.Pointer<snd_pcm_scope_> scope,
    ffi.Pointer<snd_pcm_scope_ops_t> val,
  ) {
    return _snd_pcm_scope_set_ops(
      scope,
      val,
    );
  }

  late final _snd_pcm_scope_set_ops_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_scope_set_ops>>(
          'snd_pcm_scope_set_ops');
  late final _dart_snd_pcm_scope_set_ops _snd_pcm_scope_set_ops =
      _snd_pcm_scope_set_ops_ptr.asFunction<_dart_snd_pcm_scope_set_ops>();

  void snd_pcm_scope_set_name(
    ffi.Pointer<snd_pcm_scope_> scope,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _snd_pcm_scope_set_name(
      scope,
      val,
    );
  }

  late final _snd_pcm_scope_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_scope_set_name>>(
          'snd_pcm_scope_set_name');
  late final _dart_snd_pcm_scope_set_name _snd_pcm_scope_set_name =
      _snd_pcm_scope_set_name_ptr.asFunction<_dart_snd_pcm_scope_set_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_scope_get_name(
    ffi.Pointer<snd_pcm_scope_> scope,
  ) {
    return _snd_pcm_scope_get_name(
      scope,
    );
  }

  late final _snd_pcm_scope_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_scope_get_name>>(
          'snd_pcm_scope_get_name');
  late final _dart_snd_pcm_scope_get_name _snd_pcm_scope_get_name =
      _snd_pcm_scope_get_name_ptr.asFunction<_dart_snd_pcm_scope_get_name>();

  ffi.Pointer<ffi.Void> snd_pcm_scope_get_callback_private(
    ffi.Pointer<snd_pcm_scope_> scope,
  ) {
    return _snd_pcm_scope_get_callback_private(
      scope,
    );
  }

  late final _snd_pcm_scope_get_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_scope_get_callback_private>>(
          'snd_pcm_scope_get_callback_private');
  late final _dart_snd_pcm_scope_get_callback_private
      _snd_pcm_scope_get_callback_private =
      _snd_pcm_scope_get_callback_private_ptr
          .asFunction<_dart_snd_pcm_scope_get_callback_private>();

  void snd_pcm_scope_set_callback_private(
    ffi.Pointer<snd_pcm_scope_> scope,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _snd_pcm_scope_set_callback_private(
      scope,
      val,
    );
  }

  late final _snd_pcm_scope_set_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_scope_set_callback_private>>(
          'snd_pcm_scope_set_callback_private');
  late final _dart_snd_pcm_scope_set_callback_private
      _snd_pcm_scope_set_callback_private =
      _snd_pcm_scope_set_callback_private_ptr
          .asFunction<_dart_snd_pcm_scope_set_callback_private>();

  int snd_pcm_scope_s16_open(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<snd_pcm_scope_>> scopep,
  ) {
    return _snd_pcm_scope_s16_open(
      pcm,
      name,
      scopep,
    );
  }

  late final _snd_pcm_scope_s16_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_scope_s16_open>>(
          'snd_pcm_scope_s16_open');
  late final _dart_snd_pcm_scope_s16_open _snd_pcm_scope_s16_open =
      _snd_pcm_scope_s16_open_ptr.asFunction<_dart_snd_pcm_scope_s16_open>();

  ffi.Pointer<ffi.Int16> snd_pcm_scope_s16_get_channel_buffer(
    ffi.Pointer<snd_pcm_scope_> scope,
    int channel,
  ) {
    return _snd_pcm_scope_s16_get_channel_buffer(
      scope,
      channel,
    );
  }

  late final _snd_pcm_scope_s16_get_channel_buffer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_scope_s16_get_channel_buffer>>(
          'snd_pcm_scope_s16_get_channel_buffer');
  late final _dart_snd_pcm_scope_s16_get_channel_buffer
      _snd_pcm_scope_s16_get_channel_buffer =
      _snd_pcm_scope_s16_get_channel_buffer_ptr
          .asFunction<_dart_snd_pcm_scope_s16_get_channel_buffer>();

  int snd_spcm_init(
    ffi.Pointer<snd_pcm_> pcm,
    int rate,
    int channels,
    int format,
    int subformat,
    int latency,
    int _access,
    int xrun_type,
  ) {
    return _snd_spcm_init(
      pcm,
      rate,
      channels,
      format,
      subformat,
      latency,
      _access,
      xrun_type,
    );
  }

  late final _snd_spcm_init_ptr =
      _lookup<ffi.NativeFunction<_c_snd_spcm_init>>('snd_spcm_init');
  late final _dart_snd_spcm_init _snd_spcm_init =
      _snd_spcm_init_ptr.asFunction<_dart_snd_spcm_init>();

  int snd_spcm_init_duplex(
    ffi.Pointer<snd_pcm_> playback_pcm,
    ffi.Pointer<snd_pcm_> capture_pcm,
    int rate,
    int channels,
    int format,
    int subformat,
    int latency,
    int _access,
    int xrun_type,
    int duplex_type,
  ) {
    return _snd_spcm_init_duplex(
      playback_pcm,
      capture_pcm,
      rate,
      channels,
      format,
      subformat,
      latency,
      _access,
      xrun_type,
      duplex_type,
    );
  }

  late final _snd_spcm_init_duplex_ptr =
      _lookup<ffi.NativeFunction<_c_snd_spcm_init_duplex>>(
          'snd_spcm_init_duplex');
  late final _dart_snd_spcm_init_duplex _snd_spcm_init_duplex =
      _snd_spcm_init_duplex_ptr.asFunction<_dart_snd_spcm_init_duplex>();

  int snd_spcm_init_get_params(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<ffi.Uint32> rate,
    ffi.Pointer<ffi.Uint64> buffer_size,
    ffi.Pointer<ffi.Uint64> period_size,
  ) {
    return _snd_spcm_init_get_params(
      pcm,
      rate,
      buffer_size,
      period_size,
    );
  }

  late final _snd_spcm_init_get_params_ptr =
      _lookup<ffi.NativeFunction<_c_snd_spcm_init_get_params>>(
          'snd_spcm_init_get_params');
  late final _dart_snd_spcm_init_get_params _snd_spcm_init_get_params =
      _snd_spcm_init_get_params_ptr
          .asFunction<_dart_snd_spcm_init_get_params>();

  ffi.Pointer<ffi.Int8> snd_pcm_start_mode_name(
    int mode,
  ) {
    return _snd_pcm_start_mode_name(
      mode,
    );
  }

  late final _snd_pcm_start_mode_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_start_mode_name>>(
          'snd_pcm_start_mode_name');
  late final _dart_snd_pcm_start_mode_name _snd_pcm_start_mode_name =
      _snd_pcm_start_mode_name_ptr.asFunction<_dart_snd_pcm_start_mode_name>();

  ffi.Pointer<ffi.Int8> snd_pcm_xrun_mode_name(
    int mode,
  ) {
    return _snd_pcm_xrun_mode_name(
      mode,
    );
  }

  late final _snd_pcm_xrun_mode_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_xrun_mode_name>>(
          'snd_pcm_xrun_mode_name');
  late final _dart_snd_pcm_xrun_mode_name _snd_pcm_xrun_mode_name =
      _snd_pcm_xrun_mode_name_ptr.asFunction<_dart_snd_pcm_xrun_mode_name>();

  int snd_pcm_sw_params_set_start_mode(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_start_mode(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_start_mode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_start_mode>>(
          'snd_pcm_sw_params_set_start_mode');
  late final _dart_snd_pcm_sw_params_set_start_mode
      _snd_pcm_sw_params_set_start_mode = _snd_pcm_sw_params_set_start_mode_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_start_mode>();

  int snd_pcm_sw_params_get_start_mode(
    ffi.Pointer<snd_pcm_sw_params_> params,
  ) {
    return _snd_pcm_sw_params_get_start_mode(
      params,
    );
  }

  late final _snd_pcm_sw_params_get_start_mode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_start_mode>>(
          'snd_pcm_sw_params_get_start_mode');
  late final _dart_snd_pcm_sw_params_get_start_mode
      _snd_pcm_sw_params_get_start_mode = _snd_pcm_sw_params_get_start_mode_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_start_mode>();

  int snd_pcm_sw_params_set_xrun_mode(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_xrun_mode(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_xrun_mode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_xrun_mode>>(
          'snd_pcm_sw_params_set_xrun_mode');
  late final _dart_snd_pcm_sw_params_set_xrun_mode
      _snd_pcm_sw_params_set_xrun_mode = _snd_pcm_sw_params_set_xrun_mode_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_xrun_mode>();

  int snd_pcm_sw_params_get_xrun_mode(
    ffi.Pointer<snd_pcm_sw_params_> params,
  ) {
    return _snd_pcm_sw_params_get_xrun_mode(
      params,
    );
  }

  late final _snd_pcm_sw_params_get_xrun_mode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_xrun_mode>>(
          'snd_pcm_sw_params_get_xrun_mode');
  late final _dart_snd_pcm_sw_params_get_xrun_mode
      _snd_pcm_sw_params_get_xrun_mode = _snd_pcm_sw_params_get_xrun_mode_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_xrun_mode>();

  int snd_pcm_sw_params_set_xfer_align(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_xfer_align(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_xfer_align_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_xfer_align>>(
          'snd_pcm_sw_params_set_xfer_align');
  late final _dart_snd_pcm_sw_params_set_xfer_align
      _snd_pcm_sw_params_set_xfer_align = _snd_pcm_sw_params_set_xfer_align_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_xfer_align>();

  int snd_pcm_sw_params_get_xfer_align(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _snd_pcm_sw_params_get_xfer_align(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_xfer_align_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_xfer_align>>(
          'snd_pcm_sw_params_get_xfer_align');
  late final _dart_snd_pcm_sw_params_get_xfer_align
      _snd_pcm_sw_params_get_xfer_align = _snd_pcm_sw_params_get_xfer_align_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_xfer_align>();

  int snd_pcm_sw_params_set_sleep_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_sw_params_> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_sleep_min(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_sleep_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_set_sleep_min>>(
          'snd_pcm_sw_params_set_sleep_min');
  late final _dart_snd_pcm_sw_params_set_sleep_min
      _snd_pcm_sw_params_set_sleep_min = _snd_pcm_sw_params_set_sleep_min_ptr
          .asFunction<_dart_snd_pcm_sw_params_set_sleep_min>();

  int snd_pcm_sw_params_get_sleep_min(
    ffi.Pointer<snd_pcm_sw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _snd_pcm_sw_params_get_sleep_min(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_sleep_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_sw_params_get_sleep_min>>(
          'snd_pcm_sw_params_get_sleep_min');
  late final _dart_snd_pcm_sw_params_get_sleep_min
      _snd_pcm_sw_params_get_sleep_min = _snd_pcm_sw_params_get_sleep_min_ptr
          .asFunction<_dart_snd_pcm_sw_params_get_sleep_min>();

  int snd_pcm_hw_params_get_tick_time(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_tick_time(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_tick_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_tick_time>>(
          'snd_pcm_hw_params_get_tick_time');
  late final _dart_snd_pcm_hw_params_get_tick_time
      _snd_pcm_hw_params_get_tick_time = _snd_pcm_hw_params_get_tick_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_tick_time>();

  int snd_pcm_hw_params_get_tick_time_min(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_tick_time_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_tick_time_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_tick_time_min>>(
          'snd_pcm_hw_params_get_tick_time_min');
  late final _dart_snd_pcm_hw_params_get_tick_time_min
      _snd_pcm_hw_params_get_tick_time_min =
      _snd_pcm_hw_params_get_tick_time_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_tick_time_min>();

  int snd_pcm_hw_params_get_tick_time_max(
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_get_tick_time_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_tick_time_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_get_tick_time_max>>(
          'snd_pcm_hw_params_get_tick_time_max');
  late final _dart_snd_pcm_hw_params_get_tick_time_max
      _snd_pcm_hw_params_get_tick_time_max =
      _snd_pcm_hw_params_get_tick_time_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_get_tick_time_max>();

  int snd_pcm_hw_params_test_tick_time(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_tick_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_tick_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_test_tick_time>>(
          'snd_pcm_hw_params_test_tick_time');
  late final _dart_snd_pcm_hw_params_test_tick_time
      _snd_pcm_hw_params_test_tick_time = _snd_pcm_hw_params_test_tick_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_test_tick_time>();

  int snd_pcm_hw_params_set_tick_time(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_tick_time>>(
          'snd_pcm_hw_params_set_tick_time');
  late final _dart_snd_pcm_hw_params_set_tick_time
      _snd_pcm_hw_params_set_tick_time = _snd_pcm_hw_params_set_tick_time_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_tick_time>();

  int snd_pcm_hw_params_set_tick_time_min(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_tick_time_min>>(
          'snd_pcm_hw_params_set_tick_time_min');
  late final _dart_snd_pcm_hw_params_set_tick_time_min
      _snd_pcm_hw_params_set_tick_time_min =
      _snd_pcm_hw_params_set_tick_time_min_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_tick_time_min>();

  int snd_pcm_hw_params_set_tick_time_max(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_tick_time_max>>(
          'snd_pcm_hw_params_set_tick_time_max');
  late final _dart_snd_pcm_hw_params_set_tick_time_max
      _snd_pcm_hw_params_set_tick_time_max =
      _snd_pcm_hw_params_set_tick_time_max_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_tick_time_max>();

  int snd_pcm_hw_params_set_tick_time_minmax(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> min,
    ffi.Pointer<ffi.Int32> mindir,
    ffi.Pointer<ffi.Uint32> max,
    ffi.Pointer<ffi.Int32> maxdir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_minmax_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_tick_time_minmax>>(
          'snd_pcm_hw_params_set_tick_time_minmax');
  late final _dart_snd_pcm_hw_params_set_tick_time_minmax
      _snd_pcm_hw_params_set_tick_time_minmax =
      _snd_pcm_hw_params_set_tick_time_minmax_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_tick_time_minmax>();

  int snd_pcm_hw_params_set_tick_time_near(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_near_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_tick_time_near>>(
          'snd_pcm_hw_params_set_tick_time_near');
  late final _dart_snd_pcm_hw_params_set_tick_time_near
      _snd_pcm_hw_params_set_tick_time_near =
      _snd_pcm_hw_params_set_tick_time_near_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_tick_time_near>();

  int snd_pcm_hw_params_set_tick_time_first(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_first_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_tick_time_first>>(
          'snd_pcm_hw_params_set_tick_time_first');
  late final _dart_snd_pcm_hw_params_set_tick_time_first
      _snd_pcm_hw_params_set_tick_time_first =
      _snd_pcm_hw_params_set_tick_time_first_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_tick_time_first>();

  int snd_pcm_hw_params_set_tick_time_last(
    ffi.Pointer<snd_pcm_> pcm,
    ffi.Pointer<snd_pcm_hw_params_> params,
    ffi.Pointer<ffi.Uint32> val,
    ffi.Pointer<ffi.Int32> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_last_ptr =
      _lookup<ffi.NativeFunction<_c_snd_pcm_hw_params_set_tick_time_last>>(
          'snd_pcm_hw_params_set_tick_time_last');
  late final _dart_snd_pcm_hw_params_set_tick_time_last
      _snd_pcm_hw_params_set_tick_time_last =
      _snd_pcm_hw_params_set_tick_time_last_ptr
          .asFunction<_dart_snd_pcm_hw_params_set_tick_time_last>();

  int snd_rawmidi_open(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_>> in_rmidi,
    ffi.Pointer<ffi.Pointer<snd_rawmidi_>> out_rmidi,
    ffi.Pointer<ffi.Int8> name,
    int mode,
  ) {
    return _snd_rawmidi_open(
      in_rmidi,
      out_rmidi,
      name,
      mode,
    );
  }

  late final _snd_rawmidi_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_open>>('snd_rawmidi_open');
  late final _dart_snd_rawmidi_open _snd_rawmidi_open =
      _snd_rawmidi_open_ptr.asFunction<_dart_snd_rawmidi_open>();

  int snd_rawmidi_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_>> in_rmidi,
    ffi.Pointer<ffi.Pointer<snd_rawmidi_>> out_rmidi,
    ffi.Pointer<ffi.Int8> name,
    int mode,
    ffi.Pointer<snd_config_> lconf,
  ) {
    return _snd_rawmidi_open_lconf(
      in_rmidi,
      out_rmidi,
      name,
      mode,
      lconf,
    );
  }

  late final _snd_rawmidi_open_lconf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_open_lconf>>(
          'snd_rawmidi_open_lconf');
  late final _dart_snd_rawmidi_open_lconf _snd_rawmidi_open_lconf =
      _snd_rawmidi_open_lconf_ptr.asFunction<_dart_snd_rawmidi_open_lconf>();

  int snd_rawmidi_close(
    ffi.Pointer<snd_rawmidi_> rmidi,
  ) {
    return _snd_rawmidi_close(
      rmidi,
    );
  }

  late final _snd_rawmidi_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_close>>('snd_rawmidi_close');
  late final _dart_snd_rawmidi_close _snd_rawmidi_close =
      _snd_rawmidi_close_ptr.asFunction<_dart_snd_rawmidi_close>();

  int snd_rawmidi_poll_descriptors_count(
    ffi.Pointer<snd_rawmidi_> rmidi,
  ) {
    return _snd_rawmidi_poll_descriptors_count(
      rmidi,
    );
  }

  late final _snd_rawmidi_poll_descriptors_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_poll_descriptors_count>>(
          'snd_rawmidi_poll_descriptors_count');
  late final _dart_snd_rawmidi_poll_descriptors_count
      _snd_rawmidi_poll_descriptors_count =
      _snd_rawmidi_poll_descriptors_count_ptr
          .asFunction<_dart_snd_rawmidi_poll_descriptors_count>();

  int snd_rawmidi_poll_descriptors(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_rawmidi_poll_descriptors(
      rmidi,
      pfds,
      space,
    );
  }

  late final _snd_rawmidi_poll_descriptors_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_poll_descriptors>>(
          'snd_rawmidi_poll_descriptors');
  late final _dart_snd_rawmidi_poll_descriptors _snd_rawmidi_poll_descriptors =
      _snd_rawmidi_poll_descriptors_ptr
          .asFunction<_dart_snd_rawmidi_poll_descriptors>();

  int snd_rawmidi_poll_descriptors_revents(
    ffi.Pointer<snd_rawmidi_> rawmidi,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.Uint16> revent,
  ) {
    return _snd_rawmidi_poll_descriptors_revents(
      rawmidi,
      pfds,
      nfds,
      revent,
    );
  }

  late final _snd_rawmidi_poll_descriptors_revents_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_poll_descriptors_revents>>(
          'snd_rawmidi_poll_descriptors_revents');
  late final _dart_snd_rawmidi_poll_descriptors_revents
      _snd_rawmidi_poll_descriptors_revents =
      _snd_rawmidi_poll_descriptors_revents_ptr
          .asFunction<_dart_snd_rawmidi_poll_descriptors_revents>();

  int snd_rawmidi_nonblock(
    ffi.Pointer<snd_rawmidi_> rmidi,
    int nonblock,
  ) {
    return _snd_rawmidi_nonblock(
      rmidi,
      nonblock,
    );
  }

  late final _snd_rawmidi_nonblock_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_nonblock>>(
          'snd_rawmidi_nonblock');
  late final _dart_snd_rawmidi_nonblock _snd_rawmidi_nonblock =
      _snd_rawmidi_nonblock_ptr.asFunction<_dart_snd_rawmidi_nonblock>();

  int snd_rawmidi_info_sizeof() {
    return _snd_rawmidi_info_sizeof();
  }

  late final _snd_rawmidi_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_sizeof>>(
          'snd_rawmidi_info_sizeof');
  late final _dart_snd_rawmidi_info_sizeof _snd_rawmidi_info_sizeof =
      _snd_rawmidi_info_sizeof_ptr.asFunction<_dart_snd_rawmidi_info_sizeof>();

  int snd_rawmidi_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_info_>> ptr,
  ) {
    return _snd_rawmidi_info_malloc(
      ptr,
    );
  }

  late final _snd_rawmidi_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_malloc>>(
          'snd_rawmidi_info_malloc');
  late final _dart_snd_rawmidi_info_malloc _snd_rawmidi_info_malloc =
      _snd_rawmidi_info_malloc_ptr.asFunction<_dart_snd_rawmidi_info_malloc>();

  void snd_rawmidi_info_free(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_free(
      obj,
    );
  }

  late final _snd_rawmidi_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_free>>(
          'snd_rawmidi_info_free');
  late final _dart_snd_rawmidi_info_free _snd_rawmidi_info_free =
      _snd_rawmidi_info_free_ptr.asFunction<_dart_snd_rawmidi_info_free>();

  void snd_rawmidi_info_copy(
    ffi.Pointer<snd_rawmidi_info_> dst,
    ffi.Pointer<snd_rawmidi_info_> src,
  ) {
    return _snd_rawmidi_info_copy(
      dst,
      src,
    );
  }

  late final _snd_rawmidi_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_copy>>(
          'snd_rawmidi_info_copy');
  late final _dart_snd_rawmidi_info_copy _snd_rawmidi_info_copy =
      _snd_rawmidi_info_copy_ptr.asFunction<_dart_snd_rawmidi_info_copy>();

  int snd_rawmidi_info_get_device(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_device(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_device>>(
          'snd_rawmidi_info_get_device');
  late final _dart_snd_rawmidi_info_get_device _snd_rawmidi_info_get_device =
      _snd_rawmidi_info_get_device_ptr
          .asFunction<_dart_snd_rawmidi_info_get_device>();

  int snd_rawmidi_info_get_subdevice(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_subdevice(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_subdevice>>(
          'snd_rawmidi_info_get_subdevice');
  late final _dart_snd_rawmidi_info_get_subdevice
      _snd_rawmidi_info_get_subdevice = _snd_rawmidi_info_get_subdevice_ptr
          .asFunction<_dart_snd_rawmidi_info_get_subdevice>();

  int snd_rawmidi_info_get_stream(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_stream(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_stream_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_stream>>(
          'snd_rawmidi_info_get_stream');
  late final _dart_snd_rawmidi_info_get_stream _snd_rawmidi_info_get_stream =
      _snd_rawmidi_info_get_stream_ptr
          .asFunction<_dart_snd_rawmidi_info_get_stream>();

  int snd_rawmidi_info_get_card(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_card(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_card>>(
          'snd_rawmidi_info_get_card');
  late final _dart_snd_rawmidi_info_get_card _snd_rawmidi_info_get_card =
      _snd_rawmidi_info_get_card_ptr
          .asFunction<_dart_snd_rawmidi_info_get_card>();

  int snd_rawmidi_info_get_flags(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_flags(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_flags_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_flags>>(
          'snd_rawmidi_info_get_flags');
  late final _dart_snd_rawmidi_info_get_flags _snd_rawmidi_info_get_flags =
      _snd_rawmidi_info_get_flags_ptr
          .asFunction<_dart_snd_rawmidi_info_get_flags>();

  ffi.Pointer<ffi.Int8> snd_rawmidi_info_get_id(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_id(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_id>>(
          'snd_rawmidi_info_get_id');
  late final _dart_snd_rawmidi_info_get_id _snd_rawmidi_info_get_id =
      _snd_rawmidi_info_get_id_ptr.asFunction<_dart_snd_rawmidi_info_get_id>();

  ffi.Pointer<ffi.Int8> snd_rawmidi_info_get_name(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_name(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_name>>(
          'snd_rawmidi_info_get_name');
  late final _dart_snd_rawmidi_info_get_name _snd_rawmidi_info_get_name =
      _snd_rawmidi_info_get_name_ptr
          .asFunction<_dart_snd_rawmidi_info_get_name>();

  ffi.Pointer<ffi.Int8> snd_rawmidi_info_get_subdevice_name(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_subdevice_name(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_subdevice_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_subdevice_name>>(
          'snd_rawmidi_info_get_subdevice_name');
  late final _dart_snd_rawmidi_info_get_subdevice_name
      _snd_rawmidi_info_get_subdevice_name =
      _snd_rawmidi_info_get_subdevice_name_ptr
          .asFunction<_dart_snd_rawmidi_info_get_subdevice_name>();

  int snd_rawmidi_info_get_subdevices_count(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_subdevices_count(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_subdevices_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_subdevices_count>>(
          'snd_rawmidi_info_get_subdevices_count');
  late final _dart_snd_rawmidi_info_get_subdevices_count
      _snd_rawmidi_info_get_subdevices_count =
      _snd_rawmidi_info_get_subdevices_count_ptr
          .asFunction<_dart_snd_rawmidi_info_get_subdevices_count>();

  int snd_rawmidi_info_get_subdevices_avail(
    ffi.Pointer<snd_rawmidi_info_> obj,
  ) {
    return _snd_rawmidi_info_get_subdevices_avail(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_subdevices_avail_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_get_subdevices_avail>>(
          'snd_rawmidi_info_get_subdevices_avail');
  late final _dart_snd_rawmidi_info_get_subdevices_avail
      _snd_rawmidi_info_get_subdevices_avail =
      _snd_rawmidi_info_get_subdevices_avail_ptr
          .asFunction<_dart_snd_rawmidi_info_get_subdevices_avail>();

  void snd_rawmidi_info_set_device(
    ffi.Pointer<snd_rawmidi_info_> obj,
    int val,
  ) {
    return _snd_rawmidi_info_set_device(
      obj,
      val,
    );
  }

  late final _snd_rawmidi_info_set_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_set_device>>(
          'snd_rawmidi_info_set_device');
  late final _dart_snd_rawmidi_info_set_device _snd_rawmidi_info_set_device =
      _snd_rawmidi_info_set_device_ptr
          .asFunction<_dart_snd_rawmidi_info_set_device>();

  void snd_rawmidi_info_set_subdevice(
    ffi.Pointer<snd_rawmidi_info_> obj,
    int val,
  ) {
    return _snd_rawmidi_info_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_rawmidi_info_set_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_set_subdevice>>(
          'snd_rawmidi_info_set_subdevice');
  late final _dart_snd_rawmidi_info_set_subdevice
      _snd_rawmidi_info_set_subdevice = _snd_rawmidi_info_set_subdevice_ptr
          .asFunction<_dart_snd_rawmidi_info_set_subdevice>();

  void snd_rawmidi_info_set_stream(
    ffi.Pointer<snd_rawmidi_info_> obj,
    int val,
  ) {
    return _snd_rawmidi_info_set_stream(
      obj,
      val,
    );
  }

  late final _snd_rawmidi_info_set_stream_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info_set_stream>>(
          'snd_rawmidi_info_set_stream');
  late final _dart_snd_rawmidi_info_set_stream _snd_rawmidi_info_set_stream =
      _snd_rawmidi_info_set_stream_ptr
          .asFunction<_dart_snd_rawmidi_info_set_stream>();

  int snd_rawmidi_info(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<snd_rawmidi_info_> info,
  ) {
    return _snd_rawmidi_info(
      rmidi,
      info,
    );
  }

  late final _snd_rawmidi_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_info>>('snd_rawmidi_info');
  late final _dart_snd_rawmidi_info _snd_rawmidi_info =
      _snd_rawmidi_info_ptr.asFunction<_dart_snd_rawmidi_info>();

  int snd_rawmidi_params_sizeof() {
    return _snd_rawmidi_params_sizeof();
  }

  late final _snd_rawmidi_params_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_sizeof>>(
          'snd_rawmidi_params_sizeof');
  late final _dart_snd_rawmidi_params_sizeof _snd_rawmidi_params_sizeof =
      _snd_rawmidi_params_sizeof_ptr
          .asFunction<_dart_snd_rawmidi_params_sizeof>();

  int snd_rawmidi_params_malloc(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_params_>> ptr,
  ) {
    return _snd_rawmidi_params_malloc(
      ptr,
    );
  }

  late final _snd_rawmidi_params_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_malloc>>(
          'snd_rawmidi_params_malloc');
  late final _dart_snd_rawmidi_params_malloc _snd_rawmidi_params_malloc =
      _snd_rawmidi_params_malloc_ptr
          .asFunction<_dart_snd_rawmidi_params_malloc>();

  void snd_rawmidi_params_free(
    ffi.Pointer<snd_rawmidi_params_> obj,
  ) {
    return _snd_rawmidi_params_free(
      obj,
    );
  }

  late final _snd_rawmidi_params_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_free>>(
          'snd_rawmidi_params_free');
  late final _dart_snd_rawmidi_params_free _snd_rawmidi_params_free =
      _snd_rawmidi_params_free_ptr.asFunction<_dart_snd_rawmidi_params_free>();

  void snd_rawmidi_params_copy(
    ffi.Pointer<snd_rawmidi_params_> dst,
    ffi.Pointer<snd_rawmidi_params_> src,
  ) {
    return _snd_rawmidi_params_copy(
      dst,
      src,
    );
  }

  late final _snd_rawmidi_params_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_copy>>(
          'snd_rawmidi_params_copy');
  late final _dart_snd_rawmidi_params_copy _snd_rawmidi_params_copy =
      _snd_rawmidi_params_copy_ptr.asFunction<_dart_snd_rawmidi_params_copy>();

  int snd_rawmidi_params_set_buffer_size(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<snd_rawmidi_params_> params,
    int val,
  ) {
    return _snd_rawmidi_params_set_buffer_size(
      rmidi,
      params,
      val,
    );
  }

  late final _snd_rawmidi_params_set_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_set_buffer_size>>(
          'snd_rawmidi_params_set_buffer_size');
  late final _dart_snd_rawmidi_params_set_buffer_size
      _snd_rawmidi_params_set_buffer_size =
      _snd_rawmidi_params_set_buffer_size_ptr
          .asFunction<_dart_snd_rawmidi_params_set_buffer_size>();

  int snd_rawmidi_params_get_buffer_size(
    ffi.Pointer<snd_rawmidi_params_> params,
  ) {
    return _snd_rawmidi_params_get_buffer_size(
      params,
    );
  }

  late final _snd_rawmidi_params_get_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_get_buffer_size>>(
          'snd_rawmidi_params_get_buffer_size');
  late final _dart_snd_rawmidi_params_get_buffer_size
      _snd_rawmidi_params_get_buffer_size =
      _snd_rawmidi_params_get_buffer_size_ptr
          .asFunction<_dart_snd_rawmidi_params_get_buffer_size>();

  int snd_rawmidi_params_set_avail_min(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<snd_rawmidi_params_> params,
    int val,
  ) {
    return _snd_rawmidi_params_set_avail_min(
      rmidi,
      params,
      val,
    );
  }

  late final _snd_rawmidi_params_set_avail_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_set_avail_min>>(
          'snd_rawmidi_params_set_avail_min');
  late final _dart_snd_rawmidi_params_set_avail_min
      _snd_rawmidi_params_set_avail_min = _snd_rawmidi_params_set_avail_min_ptr
          .asFunction<_dart_snd_rawmidi_params_set_avail_min>();

  int snd_rawmidi_params_get_avail_min(
    ffi.Pointer<snd_rawmidi_params_> params,
  ) {
    return _snd_rawmidi_params_get_avail_min(
      params,
    );
  }

  late final _snd_rawmidi_params_get_avail_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_get_avail_min>>(
          'snd_rawmidi_params_get_avail_min');
  late final _dart_snd_rawmidi_params_get_avail_min
      _snd_rawmidi_params_get_avail_min = _snd_rawmidi_params_get_avail_min_ptr
          .asFunction<_dart_snd_rawmidi_params_get_avail_min>();

  int snd_rawmidi_params_set_no_active_sensing(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<snd_rawmidi_params_> params,
    int val,
  ) {
    return _snd_rawmidi_params_set_no_active_sensing(
      rmidi,
      params,
      val,
    );
  }

  late final _snd_rawmidi_params_set_no_active_sensing_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_set_no_active_sensing>>(
          'snd_rawmidi_params_set_no_active_sensing');
  late final _dart_snd_rawmidi_params_set_no_active_sensing
      _snd_rawmidi_params_set_no_active_sensing =
      _snd_rawmidi_params_set_no_active_sensing_ptr
          .asFunction<_dart_snd_rawmidi_params_set_no_active_sensing>();

  int snd_rawmidi_params_get_no_active_sensing(
    ffi.Pointer<snd_rawmidi_params_> params,
  ) {
    return _snd_rawmidi_params_get_no_active_sensing(
      params,
    );
  }

  late final _snd_rawmidi_params_get_no_active_sensing_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_get_no_active_sensing>>(
          'snd_rawmidi_params_get_no_active_sensing');
  late final _dart_snd_rawmidi_params_get_no_active_sensing
      _snd_rawmidi_params_get_no_active_sensing =
      _snd_rawmidi_params_get_no_active_sensing_ptr
          .asFunction<_dart_snd_rawmidi_params_get_no_active_sensing>();

  int snd_rawmidi_params(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<snd_rawmidi_params_> params,
  ) {
    return _snd_rawmidi_params(
      rmidi,
      params,
    );
  }

  late final _snd_rawmidi_params_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params>>('snd_rawmidi_params');
  late final _dart_snd_rawmidi_params _snd_rawmidi_params =
      _snd_rawmidi_params_ptr.asFunction<_dart_snd_rawmidi_params>();

  int snd_rawmidi_params_current(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<snd_rawmidi_params_> params,
  ) {
    return _snd_rawmidi_params_current(
      rmidi,
      params,
    );
  }

  late final _snd_rawmidi_params_current_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_params_current>>(
          'snd_rawmidi_params_current');
  late final _dart_snd_rawmidi_params_current _snd_rawmidi_params_current =
      _snd_rawmidi_params_current_ptr
          .asFunction<_dart_snd_rawmidi_params_current>();

  int snd_rawmidi_status_sizeof() {
    return _snd_rawmidi_status_sizeof();
  }

  late final _snd_rawmidi_status_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_status_sizeof>>(
          'snd_rawmidi_status_sizeof');
  late final _dart_snd_rawmidi_status_sizeof _snd_rawmidi_status_sizeof =
      _snd_rawmidi_status_sizeof_ptr
          .asFunction<_dart_snd_rawmidi_status_sizeof>();

  int snd_rawmidi_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_status_>> ptr,
  ) {
    return _snd_rawmidi_status_malloc(
      ptr,
    );
  }

  late final _snd_rawmidi_status_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_status_malloc>>(
          'snd_rawmidi_status_malloc');
  late final _dart_snd_rawmidi_status_malloc _snd_rawmidi_status_malloc =
      _snd_rawmidi_status_malloc_ptr
          .asFunction<_dart_snd_rawmidi_status_malloc>();

  void snd_rawmidi_status_free(
    ffi.Pointer<snd_rawmidi_status_> obj,
  ) {
    return _snd_rawmidi_status_free(
      obj,
    );
  }

  late final _snd_rawmidi_status_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_status_free>>(
          'snd_rawmidi_status_free');
  late final _dart_snd_rawmidi_status_free _snd_rawmidi_status_free =
      _snd_rawmidi_status_free_ptr.asFunction<_dart_snd_rawmidi_status_free>();

  void snd_rawmidi_status_copy(
    ffi.Pointer<snd_rawmidi_status_> dst,
    ffi.Pointer<snd_rawmidi_status_> src,
  ) {
    return _snd_rawmidi_status_copy(
      dst,
      src,
    );
  }

  late final _snd_rawmidi_status_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_status_copy>>(
          'snd_rawmidi_status_copy');
  late final _dart_snd_rawmidi_status_copy _snd_rawmidi_status_copy =
      _snd_rawmidi_status_copy_ptr.asFunction<_dart_snd_rawmidi_status_copy>();

  void snd_rawmidi_status_get_tstamp(
    ffi.Pointer<snd_rawmidi_status_> obj,
    ffi.Pointer<timespec> ptr,
  ) {
    return _snd_rawmidi_status_get_tstamp(
      obj,
      ptr,
    );
  }

  late final _snd_rawmidi_status_get_tstamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_status_get_tstamp>>(
          'snd_rawmidi_status_get_tstamp');
  late final _dart_snd_rawmidi_status_get_tstamp
      _snd_rawmidi_status_get_tstamp = _snd_rawmidi_status_get_tstamp_ptr
          .asFunction<_dart_snd_rawmidi_status_get_tstamp>();

  int snd_rawmidi_status_get_avail(
    ffi.Pointer<snd_rawmidi_status_> obj,
  ) {
    return _snd_rawmidi_status_get_avail(
      obj,
    );
  }

  late final _snd_rawmidi_status_get_avail_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_status_get_avail>>(
          'snd_rawmidi_status_get_avail');
  late final _dart_snd_rawmidi_status_get_avail _snd_rawmidi_status_get_avail =
      _snd_rawmidi_status_get_avail_ptr
          .asFunction<_dart_snd_rawmidi_status_get_avail>();

  int snd_rawmidi_status_get_xruns(
    ffi.Pointer<snd_rawmidi_status_> obj,
  ) {
    return _snd_rawmidi_status_get_xruns(
      obj,
    );
  }

  late final _snd_rawmidi_status_get_xruns_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_status_get_xruns>>(
          'snd_rawmidi_status_get_xruns');
  late final _dart_snd_rawmidi_status_get_xruns _snd_rawmidi_status_get_xruns =
      _snd_rawmidi_status_get_xruns_ptr
          .asFunction<_dart_snd_rawmidi_status_get_xruns>();

  int snd_rawmidi_status(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<snd_rawmidi_status_> status,
  ) {
    return _snd_rawmidi_status(
      rmidi,
      status,
    );
  }

  late final _snd_rawmidi_status_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_status>>('snd_rawmidi_status');
  late final _dart_snd_rawmidi_status _snd_rawmidi_status =
      _snd_rawmidi_status_ptr.asFunction<_dart_snd_rawmidi_status>();

  int snd_rawmidi_drain(
    ffi.Pointer<snd_rawmidi_> rmidi,
  ) {
    return _snd_rawmidi_drain(
      rmidi,
    );
  }

  late final _snd_rawmidi_drain_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_drain>>('snd_rawmidi_drain');
  late final _dart_snd_rawmidi_drain _snd_rawmidi_drain =
      _snd_rawmidi_drain_ptr.asFunction<_dart_snd_rawmidi_drain>();

  int snd_rawmidi_drop(
    ffi.Pointer<snd_rawmidi_> rmidi,
  ) {
    return _snd_rawmidi_drop(
      rmidi,
    );
  }

  late final _snd_rawmidi_drop_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_drop>>('snd_rawmidi_drop');
  late final _dart_snd_rawmidi_drop _snd_rawmidi_drop =
      _snd_rawmidi_drop_ptr.asFunction<_dart_snd_rawmidi_drop>();

  int snd_rawmidi_write(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_rawmidi_write(
      rmidi,
      buffer,
      size,
    );
  }

  late final _snd_rawmidi_write_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_write>>('snd_rawmidi_write');
  late final _dart_snd_rawmidi_write _snd_rawmidi_write =
      _snd_rawmidi_write_ptr.asFunction<_dart_snd_rawmidi_write>();

  int snd_rawmidi_read(
    ffi.Pointer<snd_rawmidi_> rmidi,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_rawmidi_read(
      rmidi,
      buffer,
      size,
    );
  }

  late final _snd_rawmidi_read_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_read>>('snd_rawmidi_read');
  late final _dart_snd_rawmidi_read _snd_rawmidi_read =
      _snd_rawmidi_read_ptr.asFunction<_dart_snd_rawmidi_read>();

  ffi.Pointer<ffi.Int8> snd_rawmidi_name(
    ffi.Pointer<snd_rawmidi_> rmidi,
  ) {
    return _snd_rawmidi_name(
      rmidi,
    );
  }

  late final _snd_rawmidi_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_name>>('snd_rawmidi_name');
  late final _dart_snd_rawmidi_name _snd_rawmidi_name =
      _snd_rawmidi_name_ptr.asFunction<_dart_snd_rawmidi_name>();

  int snd_rawmidi_type(
    ffi.Pointer<snd_rawmidi_> rmidi,
  ) {
    return _snd_rawmidi_type(
      rmidi,
    );
  }

  late final _snd_rawmidi_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_type>>('snd_rawmidi_type');
  late final _dart_snd_rawmidi_type _snd_rawmidi_type =
      _snd_rawmidi_type_ptr.asFunction<_dart_snd_rawmidi_type>();

  int snd_rawmidi_stream(
    ffi.Pointer<snd_rawmidi_> rawmidi,
  ) {
    return _snd_rawmidi_stream(
      rawmidi,
    );
  }

  late final _snd_rawmidi_stream_ptr =
      _lookup<ffi.NativeFunction<_c_snd_rawmidi_stream>>('snd_rawmidi_stream');
  late final _dart_snd_rawmidi_stream _snd_rawmidi_stream =
      _snd_rawmidi_stream_ptr.asFunction<_dart_snd_rawmidi_stream>();

  int snd_timer_query_open(
    ffi.Pointer<ffi.Pointer<snd_timer_query_>> handle,
    ffi.Pointer<ffi.Int8> name,
    int mode,
  ) {
    return _snd_timer_query_open(
      handle,
      name,
      mode,
    );
  }

  late final _snd_timer_query_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_query_open>>(
          'snd_timer_query_open');
  late final _dart_snd_timer_query_open _snd_timer_query_open =
      _snd_timer_query_open_ptr.asFunction<_dart_snd_timer_query_open>();

  int snd_timer_query_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_timer_query_>> handle,
    ffi.Pointer<ffi.Int8> name,
    int mode,
    ffi.Pointer<snd_config_> lconf,
  ) {
    return _snd_timer_query_open_lconf(
      handle,
      name,
      mode,
      lconf,
    );
  }

  late final _snd_timer_query_open_lconf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_query_open_lconf>>(
          'snd_timer_query_open_lconf');
  late final _dart_snd_timer_query_open_lconf _snd_timer_query_open_lconf =
      _snd_timer_query_open_lconf_ptr
          .asFunction<_dart_snd_timer_query_open_lconf>();

  int snd_timer_query_close(
    ffi.Pointer<snd_timer_query_> handle,
  ) {
    return _snd_timer_query_close(
      handle,
    );
  }

  late final _snd_timer_query_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_query_close>>(
          'snd_timer_query_close');
  late final _dart_snd_timer_query_close _snd_timer_query_close =
      _snd_timer_query_close_ptr.asFunction<_dart_snd_timer_query_close>();

  int snd_timer_query_next_device(
    ffi.Pointer<snd_timer_query_> handle,
    ffi.Pointer<snd_timer_id_> tid,
  ) {
    return _snd_timer_query_next_device(
      handle,
      tid,
    );
  }

  late final _snd_timer_query_next_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_query_next_device>>(
          'snd_timer_query_next_device');
  late final _dart_snd_timer_query_next_device _snd_timer_query_next_device =
      _snd_timer_query_next_device_ptr
          .asFunction<_dart_snd_timer_query_next_device>();

  int snd_timer_query_info(
    ffi.Pointer<snd_timer_query_> handle,
    ffi.Pointer<snd_timer_ginfo_> info,
  ) {
    return _snd_timer_query_info(
      handle,
      info,
    );
  }

  late final _snd_timer_query_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_query_info>>(
          'snd_timer_query_info');
  late final _dart_snd_timer_query_info _snd_timer_query_info =
      _snd_timer_query_info_ptr.asFunction<_dart_snd_timer_query_info>();

  int snd_timer_query_params(
    ffi.Pointer<snd_timer_query_> handle,
    ffi.Pointer<snd_timer_gparams_> params,
  ) {
    return _snd_timer_query_params(
      handle,
      params,
    );
  }

  late final _snd_timer_query_params_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_query_params>>(
          'snd_timer_query_params');
  late final _dart_snd_timer_query_params _snd_timer_query_params =
      _snd_timer_query_params_ptr.asFunction<_dart_snd_timer_query_params>();

  int snd_timer_query_status(
    ffi.Pointer<snd_timer_query_> handle,
    ffi.Pointer<snd_timer_gstatus_> status,
  ) {
    return _snd_timer_query_status(
      handle,
      status,
    );
  }

  late final _snd_timer_query_status_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_query_status>>(
          'snd_timer_query_status');
  late final _dart_snd_timer_query_status _snd_timer_query_status =
      _snd_timer_query_status_ptr.asFunction<_dart_snd_timer_query_status>();

  int snd_timer_open(
    ffi.Pointer<ffi.Pointer<snd_timer_>> handle,
    ffi.Pointer<ffi.Int8> name,
    int mode,
  ) {
    return _snd_timer_open(
      handle,
      name,
      mode,
    );
  }

  late final _snd_timer_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_open>>('snd_timer_open');
  late final _dart_snd_timer_open _snd_timer_open =
      _snd_timer_open_ptr.asFunction<_dart_snd_timer_open>();

  int snd_timer_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_timer_>> handle,
    ffi.Pointer<ffi.Int8> name,
    int mode,
    ffi.Pointer<snd_config_> lconf,
  ) {
    return _snd_timer_open_lconf(
      handle,
      name,
      mode,
      lconf,
    );
  }

  late final _snd_timer_open_lconf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_open_lconf>>(
          'snd_timer_open_lconf');
  late final _dart_snd_timer_open_lconf _snd_timer_open_lconf =
      _snd_timer_open_lconf_ptr.asFunction<_dart_snd_timer_open_lconf>();

  int snd_timer_close(
    ffi.Pointer<snd_timer_> handle,
  ) {
    return _snd_timer_close(
      handle,
    );
  }

  late final _snd_timer_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_close>>('snd_timer_close');
  late final _dart_snd_timer_close _snd_timer_close =
      _snd_timer_close_ptr.asFunction<_dart_snd_timer_close>();

  int snd_async_add_timer_handler(
    ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
    ffi.Pointer<snd_timer_> timer,
    ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_async_add_timer_handler(
      handler,
      timer,
      callback,
      private_data,
    );
  }

  late final _snd_async_add_timer_handler_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_add_timer_handler>>(
          'snd_async_add_timer_handler');
  late final _dart_snd_async_add_timer_handler _snd_async_add_timer_handler =
      _snd_async_add_timer_handler_ptr
          .asFunction<_dart_snd_async_add_timer_handler>();

  ffi.Pointer<snd_timer_> snd_async_handler_get_timer(
    ffi.Pointer<snd_async_handler_> handler,
  ) {
    return _snd_async_handler_get_timer(
      handler,
    );
  }

  late final _snd_async_handler_get_timer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_handler_get_timer>>(
          'snd_async_handler_get_timer');
  late final _dart_snd_async_handler_get_timer _snd_async_handler_get_timer =
      _snd_async_handler_get_timer_ptr
          .asFunction<_dart_snd_async_handler_get_timer>();

  int snd_timer_poll_descriptors_count(
    ffi.Pointer<snd_timer_> handle,
  ) {
    return _snd_timer_poll_descriptors_count(
      handle,
    );
  }

  late final _snd_timer_poll_descriptors_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_poll_descriptors_count>>(
          'snd_timer_poll_descriptors_count');
  late final _dart_snd_timer_poll_descriptors_count
      _snd_timer_poll_descriptors_count = _snd_timer_poll_descriptors_count_ptr
          .asFunction<_dart_snd_timer_poll_descriptors_count>();

  int snd_timer_poll_descriptors(
    ffi.Pointer<snd_timer_> handle,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_timer_poll_descriptors(
      handle,
      pfds,
      space,
    );
  }

  late final _snd_timer_poll_descriptors_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_poll_descriptors>>(
          'snd_timer_poll_descriptors');
  late final _dart_snd_timer_poll_descriptors _snd_timer_poll_descriptors =
      _snd_timer_poll_descriptors_ptr
          .asFunction<_dart_snd_timer_poll_descriptors>();

  int snd_timer_poll_descriptors_revents(
    ffi.Pointer<snd_timer_> timer,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.Uint16> revents,
  ) {
    return _snd_timer_poll_descriptors_revents(
      timer,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_timer_poll_descriptors_revents_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_poll_descriptors_revents>>(
          'snd_timer_poll_descriptors_revents');
  late final _dart_snd_timer_poll_descriptors_revents
      _snd_timer_poll_descriptors_revents =
      _snd_timer_poll_descriptors_revents_ptr
          .asFunction<_dart_snd_timer_poll_descriptors_revents>();

  int snd_timer_info(
    ffi.Pointer<snd_timer_> handle,
    ffi.Pointer<snd_timer_info_> timer,
  ) {
    return _snd_timer_info(
      handle,
      timer,
    );
  }

  late final _snd_timer_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info>>('snd_timer_info');
  late final _dart_snd_timer_info _snd_timer_info =
      _snd_timer_info_ptr.asFunction<_dart_snd_timer_info>();

  int snd_timer_params(
    ffi.Pointer<snd_timer_> handle,
    ffi.Pointer<snd_timer_params_> params,
  ) {
    return _snd_timer_params(
      handle,
      params,
    );
  }

  late final _snd_timer_params_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params>>('snd_timer_params');
  late final _dart_snd_timer_params _snd_timer_params =
      _snd_timer_params_ptr.asFunction<_dart_snd_timer_params>();

  int snd_timer_status(
    ffi.Pointer<snd_timer_> handle,
    ffi.Pointer<snd_timer_status_> status,
  ) {
    return _snd_timer_status(
      handle,
      status,
    );
  }

  late final _snd_timer_status_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status>>('snd_timer_status');
  late final _dart_snd_timer_status _snd_timer_status =
      _snd_timer_status_ptr.asFunction<_dart_snd_timer_status>();

  int snd_timer_start(
    ffi.Pointer<snd_timer_> handle,
  ) {
    return _snd_timer_start(
      handle,
    );
  }

  late final _snd_timer_start_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_start>>('snd_timer_start');
  late final _dart_snd_timer_start _snd_timer_start =
      _snd_timer_start_ptr.asFunction<_dart_snd_timer_start>();

  int snd_timer_stop(
    ffi.Pointer<snd_timer_> handle,
  ) {
    return _snd_timer_stop(
      handle,
    );
  }

  late final _snd_timer_stop_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_stop>>('snd_timer_stop');
  late final _dart_snd_timer_stop _snd_timer_stop =
      _snd_timer_stop_ptr.asFunction<_dart_snd_timer_stop>();

  int snd_timer_continue(
    ffi.Pointer<snd_timer_> handle,
  ) {
    return _snd_timer_continue(
      handle,
    );
  }

  late final _snd_timer_continue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_continue>>('snd_timer_continue');
  late final _dart_snd_timer_continue _snd_timer_continue =
      _snd_timer_continue_ptr.asFunction<_dart_snd_timer_continue>();

  int snd_timer_read(
    ffi.Pointer<snd_timer_> handle,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_timer_read(
      handle,
      buffer,
      size,
    );
  }

  late final _snd_timer_read_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_read>>('snd_timer_read');
  late final _dart_snd_timer_read _snd_timer_read =
      _snd_timer_read_ptr.asFunction<_dart_snd_timer_read>();

  int snd_timer_id_sizeof() {
    return _snd_timer_id_sizeof();
  }

  late final _snd_timer_id_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_sizeof>>(
          'snd_timer_id_sizeof');
  late final _dart_snd_timer_id_sizeof _snd_timer_id_sizeof =
      _snd_timer_id_sizeof_ptr.asFunction<_dart_snd_timer_id_sizeof>();

  int snd_timer_id_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_id_>> ptr,
  ) {
    return _snd_timer_id_malloc(
      ptr,
    );
  }

  late final _snd_timer_id_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_malloc>>(
          'snd_timer_id_malloc');
  late final _dart_snd_timer_id_malloc _snd_timer_id_malloc =
      _snd_timer_id_malloc_ptr.asFunction<_dart_snd_timer_id_malloc>();

  void snd_timer_id_free(
    ffi.Pointer<snd_timer_id_> obj,
  ) {
    return _snd_timer_id_free(
      obj,
    );
  }

  late final _snd_timer_id_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_free>>('snd_timer_id_free');
  late final _dart_snd_timer_id_free _snd_timer_id_free =
      _snd_timer_id_free_ptr.asFunction<_dart_snd_timer_id_free>();

  void snd_timer_id_copy(
    ffi.Pointer<snd_timer_id_> dst,
    ffi.Pointer<snd_timer_id_> src,
  ) {
    return _snd_timer_id_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_id_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_copy>>('snd_timer_id_copy');
  late final _dart_snd_timer_id_copy _snd_timer_id_copy =
      _snd_timer_id_copy_ptr.asFunction<_dart_snd_timer_id_copy>();

  void snd_timer_id_set_class(
    ffi.Pointer<snd_timer_id_> id,
    int dev_class,
  ) {
    return _snd_timer_id_set_class(
      id,
      dev_class,
    );
  }

  late final _snd_timer_id_set_class_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_set_class>>(
          'snd_timer_id_set_class');
  late final _dart_snd_timer_id_set_class _snd_timer_id_set_class =
      _snd_timer_id_set_class_ptr.asFunction<_dart_snd_timer_id_set_class>();

  int snd_timer_id_get_class(
    ffi.Pointer<snd_timer_id_> id,
  ) {
    return _snd_timer_id_get_class(
      id,
    );
  }

  late final _snd_timer_id_get_class_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_get_class>>(
          'snd_timer_id_get_class');
  late final _dart_snd_timer_id_get_class _snd_timer_id_get_class =
      _snd_timer_id_get_class_ptr.asFunction<_dart_snd_timer_id_get_class>();

  void snd_timer_id_set_sclass(
    ffi.Pointer<snd_timer_id_> id,
    int dev_sclass,
  ) {
    return _snd_timer_id_set_sclass(
      id,
      dev_sclass,
    );
  }

  late final _snd_timer_id_set_sclass_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_set_sclass>>(
          'snd_timer_id_set_sclass');
  late final _dart_snd_timer_id_set_sclass _snd_timer_id_set_sclass =
      _snd_timer_id_set_sclass_ptr.asFunction<_dart_snd_timer_id_set_sclass>();

  int snd_timer_id_get_sclass(
    ffi.Pointer<snd_timer_id_> id,
  ) {
    return _snd_timer_id_get_sclass(
      id,
    );
  }

  late final _snd_timer_id_get_sclass_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_get_sclass>>(
          'snd_timer_id_get_sclass');
  late final _dart_snd_timer_id_get_sclass _snd_timer_id_get_sclass =
      _snd_timer_id_get_sclass_ptr.asFunction<_dart_snd_timer_id_get_sclass>();

  void snd_timer_id_set_card(
    ffi.Pointer<snd_timer_id_> id,
    int card,
  ) {
    return _snd_timer_id_set_card(
      id,
      card,
    );
  }

  late final _snd_timer_id_set_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_set_card>>(
          'snd_timer_id_set_card');
  late final _dart_snd_timer_id_set_card _snd_timer_id_set_card =
      _snd_timer_id_set_card_ptr.asFunction<_dart_snd_timer_id_set_card>();

  int snd_timer_id_get_card(
    ffi.Pointer<snd_timer_id_> id,
  ) {
    return _snd_timer_id_get_card(
      id,
    );
  }

  late final _snd_timer_id_get_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_get_card>>(
          'snd_timer_id_get_card');
  late final _dart_snd_timer_id_get_card _snd_timer_id_get_card =
      _snd_timer_id_get_card_ptr.asFunction<_dart_snd_timer_id_get_card>();

  void snd_timer_id_set_device(
    ffi.Pointer<snd_timer_id_> id,
    int device,
  ) {
    return _snd_timer_id_set_device(
      id,
      device,
    );
  }

  late final _snd_timer_id_set_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_set_device>>(
          'snd_timer_id_set_device');
  late final _dart_snd_timer_id_set_device _snd_timer_id_set_device =
      _snd_timer_id_set_device_ptr.asFunction<_dart_snd_timer_id_set_device>();

  int snd_timer_id_get_device(
    ffi.Pointer<snd_timer_id_> id,
  ) {
    return _snd_timer_id_get_device(
      id,
    );
  }

  late final _snd_timer_id_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_get_device>>(
          'snd_timer_id_get_device');
  late final _dart_snd_timer_id_get_device _snd_timer_id_get_device =
      _snd_timer_id_get_device_ptr.asFunction<_dart_snd_timer_id_get_device>();

  void snd_timer_id_set_subdevice(
    ffi.Pointer<snd_timer_id_> id,
    int subdevice,
  ) {
    return _snd_timer_id_set_subdevice(
      id,
      subdevice,
    );
  }

  late final _snd_timer_id_set_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_set_subdevice>>(
          'snd_timer_id_set_subdevice');
  late final _dart_snd_timer_id_set_subdevice _snd_timer_id_set_subdevice =
      _snd_timer_id_set_subdevice_ptr
          .asFunction<_dart_snd_timer_id_set_subdevice>();

  int snd_timer_id_get_subdevice(
    ffi.Pointer<snd_timer_id_> id,
  ) {
    return _snd_timer_id_get_subdevice(
      id,
    );
  }

  late final _snd_timer_id_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_id_get_subdevice>>(
          'snd_timer_id_get_subdevice');
  late final _dart_snd_timer_id_get_subdevice _snd_timer_id_get_subdevice =
      _snd_timer_id_get_subdevice_ptr
          .asFunction<_dart_snd_timer_id_get_subdevice>();

  int snd_timer_ginfo_sizeof() {
    return _snd_timer_ginfo_sizeof();
  }

  late final _snd_timer_ginfo_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_sizeof>>(
          'snd_timer_ginfo_sizeof');
  late final _dart_snd_timer_ginfo_sizeof _snd_timer_ginfo_sizeof =
      _snd_timer_ginfo_sizeof_ptr.asFunction<_dart_snd_timer_ginfo_sizeof>();

  int snd_timer_ginfo_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_ginfo_>> ptr,
  ) {
    return _snd_timer_ginfo_malloc(
      ptr,
    );
  }

  late final _snd_timer_ginfo_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_malloc>>(
          'snd_timer_ginfo_malloc');
  late final _dart_snd_timer_ginfo_malloc _snd_timer_ginfo_malloc =
      _snd_timer_ginfo_malloc_ptr.asFunction<_dart_snd_timer_ginfo_malloc>();

  void snd_timer_ginfo_free(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_free(
      obj,
    );
  }

  late final _snd_timer_ginfo_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_free>>(
          'snd_timer_ginfo_free');
  late final _dart_snd_timer_ginfo_free _snd_timer_ginfo_free =
      _snd_timer_ginfo_free_ptr.asFunction<_dart_snd_timer_ginfo_free>();

  void snd_timer_ginfo_copy(
    ffi.Pointer<snd_timer_ginfo_> dst,
    ffi.Pointer<snd_timer_ginfo_> src,
  ) {
    return _snd_timer_ginfo_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_ginfo_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_copy>>(
          'snd_timer_ginfo_copy');
  late final _dart_snd_timer_ginfo_copy _snd_timer_ginfo_copy =
      _snd_timer_ginfo_copy_ptr.asFunction<_dart_snd_timer_ginfo_copy>();

  int snd_timer_ginfo_set_tid(
    ffi.Pointer<snd_timer_ginfo_> obj,
    ffi.Pointer<snd_timer_id_> tid,
  ) {
    return _snd_timer_ginfo_set_tid(
      obj,
      tid,
    );
  }

  late final _snd_timer_ginfo_set_tid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_set_tid>>(
          'snd_timer_ginfo_set_tid');
  late final _dart_snd_timer_ginfo_set_tid _snd_timer_ginfo_set_tid =
      _snd_timer_ginfo_set_tid_ptr.asFunction<_dart_snd_timer_ginfo_set_tid>();

  ffi.Pointer<snd_timer_id_> snd_timer_ginfo_get_tid(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_tid(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_tid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_tid>>(
          'snd_timer_ginfo_get_tid');
  late final _dart_snd_timer_ginfo_get_tid _snd_timer_ginfo_get_tid =
      _snd_timer_ginfo_get_tid_ptr.asFunction<_dart_snd_timer_ginfo_get_tid>();

  int snd_timer_ginfo_get_flags(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_flags(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_flags_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_flags>>(
          'snd_timer_ginfo_get_flags');
  late final _dart_snd_timer_ginfo_get_flags _snd_timer_ginfo_get_flags =
      _snd_timer_ginfo_get_flags_ptr
          .asFunction<_dart_snd_timer_ginfo_get_flags>();

  int snd_timer_ginfo_get_card(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_card(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_card>>(
          'snd_timer_ginfo_get_card');
  late final _dart_snd_timer_ginfo_get_card _snd_timer_ginfo_get_card =
      _snd_timer_ginfo_get_card_ptr
          .asFunction<_dart_snd_timer_ginfo_get_card>();

  ffi.Pointer<ffi.Int8> snd_timer_ginfo_get_id(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_id(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_id>>(
          'snd_timer_ginfo_get_id');
  late final _dart_snd_timer_ginfo_get_id _snd_timer_ginfo_get_id =
      _snd_timer_ginfo_get_id_ptr.asFunction<_dart_snd_timer_ginfo_get_id>();

  ffi.Pointer<ffi.Int8> snd_timer_ginfo_get_name(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_name(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_name>>(
          'snd_timer_ginfo_get_name');
  late final _dart_snd_timer_ginfo_get_name _snd_timer_ginfo_get_name =
      _snd_timer_ginfo_get_name_ptr
          .asFunction<_dart_snd_timer_ginfo_get_name>();

  int snd_timer_ginfo_get_resolution(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_resolution(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_resolution_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_resolution>>(
          'snd_timer_ginfo_get_resolution');
  late final _dart_snd_timer_ginfo_get_resolution
      _snd_timer_ginfo_get_resolution = _snd_timer_ginfo_get_resolution_ptr
          .asFunction<_dart_snd_timer_ginfo_get_resolution>();

  int snd_timer_ginfo_get_resolution_min(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_resolution_min(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_resolution_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_resolution_min>>(
          'snd_timer_ginfo_get_resolution_min');
  late final _dart_snd_timer_ginfo_get_resolution_min
      _snd_timer_ginfo_get_resolution_min =
      _snd_timer_ginfo_get_resolution_min_ptr
          .asFunction<_dart_snd_timer_ginfo_get_resolution_min>();

  int snd_timer_ginfo_get_resolution_max(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_resolution_max(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_resolution_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_resolution_max>>(
          'snd_timer_ginfo_get_resolution_max');
  late final _dart_snd_timer_ginfo_get_resolution_max
      _snd_timer_ginfo_get_resolution_max =
      _snd_timer_ginfo_get_resolution_max_ptr
          .asFunction<_dart_snd_timer_ginfo_get_resolution_max>();

  int snd_timer_ginfo_get_clients(
    ffi.Pointer<snd_timer_ginfo_> obj,
  ) {
    return _snd_timer_ginfo_get_clients(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_clients_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_ginfo_get_clients>>(
          'snd_timer_ginfo_get_clients');
  late final _dart_snd_timer_ginfo_get_clients _snd_timer_ginfo_get_clients =
      _snd_timer_ginfo_get_clients_ptr
          .asFunction<_dart_snd_timer_ginfo_get_clients>();

  int snd_timer_info_sizeof() {
    return _snd_timer_info_sizeof();
  }

  late final _snd_timer_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_sizeof>>(
          'snd_timer_info_sizeof');
  late final _dart_snd_timer_info_sizeof _snd_timer_info_sizeof =
      _snd_timer_info_sizeof_ptr.asFunction<_dart_snd_timer_info_sizeof>();

  int snd_timer_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_info_>> ptr,
  ) {
    return _snd_timer_info_malloc(
      ptr,
    );
  }

  late final _snd_timer_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_malloc>>(
          'snd_timer_info_malloc');
  late final _dart_snd_timer_info_malloc _snd_timer_info_malloc =
      _snd_timer_info_malloc_ptr.asFunction<_dart_snd_timer_info_malloc>();

  void snd_timer_info_free(
    ffi.Pointer<snd_timer_info_> obj,
  ) {
    return _snd_timer_info_free(
      obj,
    );
  }

  late final _snd_timer_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_free>>(
          'snd_timer_info_free');
  late final _dart_snd_timer_info_free _snd_timer_info_free =
      _snd_timer_info_free_ptr.asFunction<_dart_snd_timer_info_free>();

  void snd_timer_info_copy(
    ffi.Pointer<snd_timer_info_> dst,
    ffi.Pointer<snd_timer_info_> src,
  ) {
    return _snd_timer_info_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_copy>>(
          'snd_timer_info_copy');
  late final _dart_snd_timer_info_copy _snd_timer_info_copy =
      _snd_timer_info_copy_ptr.asFunction<_dart_snd_timer_info_copy>();

  int snd_timer_info_is_slave(
    ffi.Pointer<snd_timer_info_> info,
  ) {
    return _snd_timer_info_is_slave(
      info,
    );
  }

  late final _snd_timer_info_is_slave_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_is_slave>>(
          'snd_timer_info_is_slave');
  late final _dart_snd_timer_info_is_slave _snd_timer_info_is_slave =
      _snd_timer_info_is_slave_ptr.asFunction<_dart_snd_timer_info_is_slave>();

  int snd_timer_info_get_card(
    ffi.Pointer<snd_timer_info_> info,
  ) {
    return _snd_timer_info_get_card(
      info,
    );
  }

  late final _snd_timer_info_get_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_get_card>>(
          'snd_timer_info_get_card');
  late final _dart_snd_timer_info_get_card _snd_timer_info_get_card =
      _snd_timer_info_get_card_ptr.asFunction<_dart_snd_timer_info_get_card>();

  ffi.Pointer<ffi.Int8> snd_timer_info_get_id(
    ffi.Pointer<snd_timer_info_> info,
  ) {
    return _snd_timer_info_get_id(
      info,
    );
  }

  late final _snd_timer_info_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_get_id>>(
          'snd_timer_info_get_id');
  late final _dart_snd_timer_info_get_id _snd_timer_info_get_id =
      _snd_timer_info_get_id_ptr.asFunction<_dart_snd_timer_info_get_id>();

  ffi.Pointer<ffi.Int8> snd_timer_info_get_name(
    ffi.Pointer<snd_timer_info_> info,
  ) {
    return _snd_timer_info_get_name(
      info,
    );
  }

  late final _snd_timer_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_get_name>>(
          'snd_timer_info_get_name');
  late final _dart_snd_timer_info_get_name _snd_timer_info_get_name =
      _snd_timer_info_get_name_ptr.asFunction<_dart_snd_timer_info_get_name>();

  int snd_timer_info_get_resolution(
    ffi.Pointer<snd_timer_info_> info,
  ) {
    return _snd_timer_info_get_resolution(
      info,
    );
  }

  late final _snd_timer_info_get_resolution_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_get_resolution>>(
          'snd_timer_info_get_resolution');
  late final _dart_snd_timer_info_get_resolution
      _snd_timer_info_get_resolution = _snd_timer_info_get_resolution_ptr
          .asFunction<_dart_snd_timer_info_get_resolution>();

  int snd_timer_params_sizeof() {
    return _snd_timer_params_sizeof();
  }

  late final _snd_timer_params_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_sizeof>>(
          'snd_timer_params_sizeof');
  late final _dart_snd_timer_params_sizeof _snd_timer_params_sizeof =
      _snd_timer_params_sizeof_ptr.asFunction<_dart_snd_timer_params_sizeof>();

  int snd_timer_params_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_params_>> ptr,
  ) {
    return _snd_timer_params_malloc(
      ptr,
    );
  }

  late final _snd_timer_params_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_malloc>>(
          'snd_timer_params_malloc');
  late final _dart_snd_timer_params_malloc _snd_timer_params_malloc =
      _snd_timer_params_malloc_ptr.asFunction<_dart_snd_timer_params_malloc>();

  void snd_timer_params_free(
    ffi.Pointer<snd_timer_params_> obj,
  ) {
    return _snd_timer_params_free(
      obj,
    );
  }

  late final _snd_timer_params_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_free>>(
          'snd_timer_params_free');
  late final _dart_snd_timer_params_free _snd_timer_params_free =
      _snd_timer_params_free_ptr.asFunction<_dart_snd_timer_params_free>();

  void snd_timer_params_copy(
    ffi.Pointer<snd_timer_params_> dst,
    ffi.Pointer<snd_timer_params_> src,
  ) {
    return _snd_timer_params_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_params_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_copy>>(
          'snd_timer_params_copy');
  late final _dart_snd_timer_params_copy _snd_timer_params_copy =
      _snd_timer_params_copy_ptr.asFunction<_dart_snd_timer_params_copy>();

  int snd_timer_params_set_auto_start(
    ffi.Pointer<snd_timer_params_> params,
    int auto_start,
  ) {
    return _snd_timer_params_set_auto_start(
      params,
      auto_start,
    );
  }

  late final _snd_timer_params_set_auto_start_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_set_auto_start>>(
          'snd_timer_params_set_auto_start');
  late final _dart_snd_timer_params_set_auto_start
      _snd_timer_params_set_auto_start = _snd_timer_params_set_auto_start_ptr
          .asFunction<_dart_snd_timer_params_set_auto_start>();

  int snd_timer_params_get_auto_start(
    ffi.Pointer<snd_timer_params_> params,
  ) {
    return _snd_timer_params_get_auto_start(
      params,
    );
  }

  late final _snd_timer_params_get_auto_start_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_get_auto_start>>(
          'snd_timer_params_get_auto_start');
  late final _dart_snd_timer_params_get_auto_start
      _snd_timer_params_get_auto_start = _snd_timer_params_get_auto_start_ptr
          .asFunction<_dart_snd_timer_params_get_auto_start>();

  int snd_timer_params_set_exclusive(
    ffi.Pointer<snd_timer_params_> params,
    int exclusive,
  ) {
    return _snd_timer_params_set_exclusive(
      params,
      exclusive,
    );
  }

  late final _snd_timer_params_set_exclusive_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_set_exclusive>>(
          'snd_timer_params_set_exclusive');
  late final _dart_snd_timer_params_set_exclusive
      _snd_timer_params_set_exclusive = _snd_timer_params_set_exclusive_ptr
          .asFunction<_dart_snd_timer_params_set_exclusive>();

  int snd_timer_params_get_exclusive(
    ffi.Pointer<snd_timer_params_> params,
  ) {
    return _snd_timer_params_get_exclusive(
      params,
    );
  }

  late final _snd_timer_params_get_exclusive_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_get_exclusive>>(
          'snd_timer_params_get_exclusive');
  late final _dart_snd_timer_params_get_exclusive
      _snd_timer_params_get_exclusive = _snd_timer_params_get_exclusive_ptr
          .asFunction<_dart_snd_timer_params_get_exclusive>();

  int snd_timer_params_set_early_event(
    ffi.Pointer<snd_timer_params_> params,
    int early_event,
  ) {
    return _snd_timer_params_set_early_event(
      params,
      early_event,
    );
  }

  late final _snd_timer_params_set_early_event_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_set_early_event>>(
          'snd_timer_params_set_early_event');
  late final _dart_snd_timer_params_set_early_event
      _snd_timer_params_set_early_event = _snd_timer_params_set_early_event_ptr
          .asFunction<_dart_snd_timer_params_set_early_event>();

  int snd_timer_params_get_early_event(
    ffi.Pointer<snd_timer_params_> params,
  ) {
    return _snd_timer_params_get_early_event(
      params,
    );
  }

  late final _snd_timer_params_get_early_event_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_get_early_event>>(
          'snd_timer_params_get_early_event');
  late final _dart_snd_timer_params_get_early_event
      _snd_timer_params_get_early_event = _snd_timer_params_get_early_event_ptr
          .asFunction<_dart_snd_timer_params_get_early_event>();

  void snd_timer_params_set_ticks(
    ffi.Pointer<snd_timer_params_> params,
    int ticks,
  ) {
    return _snd_timer_params_set_ticks(
      params,
      ticks,
    );
  }

  late final _snd_timer_params_set_ticks_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_set_ticks>>(
          'snd_timer_params_set_ticks');
  late final _dart_snd_timer_params_set_ticks _snd_timer_params_set_ticks =
      _snd_timer_params_set_ticks_ptr
          .asFunction<_dart_snd_timer_params_set_ticks>();

  int snd_timer_params_get_ticks(
    ffi.Pointer<snd_timer_params_> params,
  ) {
    return _snd_timer_params_get_ticks(
      params,
    );
  }

  late final _snd_timer_params_get_ticks_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_get_ticks>>(
          'snd_timer_params_get_ticks');
  late final _dart_snd_timer_params_get_ticks _snd_timer_params_get_ticks =
      _snd_timer_params_get_ticks_ptr
          .asFunction<_dart_snd_timer_params_get_ticks>();

  void snd_timer_params_set_queue_size(
    ffi.Pointer<snd_timer_params_> params,
    int queue_size,
  ) {
    return _snd_timer_params_set_queue_size(
      params,
      queue_size,
    );
  }

  late final _snd_timer_params_set_queue_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_set_queue_size>>(
          'snd_timer_params_set_queue_size');
  late final _dart_snd_timer_params_set_queue_size
      _snd_timer_params_set_queue_size = _snd_timer_params_set_queue_size_ptr
          .asFunction<_dart_snd_timer_params_set_queue_size>();

  int snd_timer_params_get_queue_size(
    ffi.Pointer<snd_timer_params_> params,
  ) {
    return _snd_timer_params_get_queue_size(
      params,
    );
  }

  late final _snd_timer_params_get_queue_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_get_queue_size>>(
          'snd_timer_params_get_queue_size');
  late final _dart_snd_timer_params_get_queue_size
      _snd_timer_params_get_queue_size = _snd_timer_params_get_queue_size_ptr
          .asFunction<_dart_snd_timer_params_get_queue_size>();

  void snd_timer_params_set_filter(
    ffi.Pointer<snd_timer_params_> params,
    int filter,
  ) {
    return _snd_timer_params_set_filter(
      params,
      filter,
    );
  }

  late final _snd_timer_params_set_filter_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_set_filter>>(
          'snd_timer_params_set_filter');
  late final _dart_snd_timer_params_set_filter _snd_timer_params_set_filter =
      _snd_timer_params_set_filter_ptr
          .asFunction<_dart_snd_timer_params_set_filter>();

  int snd_timer_params_get_filter(
    ffi.Pointer<snd_timer_params_> params,
  ) {
    return _snd_timer_params_get_filter(
      params,
    );
  }

  late final _snd_timer_params_get_filter_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_params_get_filter>>(
          'snd_timer_params_get_filter');
  late final _dart_snd_timer_params_get_filter _snd_timer_params_get_filter =
      _snd_timer_params_get_filter_ptr
          .asFunction<_dart_snd_timer_params_get_filter>();

  int snd_timer_status_sizeof() {
    return _snd_timer_status_sizeof();
  }

  late final _snd_timer_status_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_sizeof>>(
          'snd_timer_status_sizeof');
  late final _dart_snd_timer_status_sizeof _snd_timer_status_sizeof =
      _snd_timer_status_sizeof_ptr.asFunction<_dart_snd_timer_status_sizeof>();

  int snd_timer_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_status_>> ptr,
  ) {
    return _snd_timer_status_malloc(
      ptr,
    );
  }

  late final _snd_timer_status_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_malloc>>(
          'snd_timer_status_malloc');
  late final _dart_snd_timer_status_malloc _snd_timer_status_malloc =
      _snd_timer_status_malloc_ptr.asFunction<_dart_snd_timer_status_malloc>();

  void snd_timer_status_free(
    ffi.Pointer<snd_timer_status_> obj,
  ) {
    return _snd_timer_status_free(
      obj,
    );
  }

  late final _snd_timer_status_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_free>>(
          'snd_timer_status_free');
  late final _dart_snd_timer_status_free _snd_timer_status_free =
      _snd_timer_status_free_ptr.asFunction<_dart_snd_timer_status_free>();

  void snd_timer_status_copy(
    ffi.Pointer<snd_timer_status_> dst,
    ffi.Pointer<snd_timer_status_> src,
  ) {
    return _snd_timer_status_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_status_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_copy>>(
          'snd_timer_status_copy');
  late final _dart_snd_timer_status_copy _snd_timer_status_copy =
      _snd_timer_status_copy_ptr.asFunction<_dart_snd_timer_status_copy>();

  timespec snd_timer_status_get_timestamp(
    ffi.Pointer<snd_timer_status_> status,
  ) {
    return _snd_timer_status_get_timestamp(
      status,
    );
  }

  late final _snd_timer_status_get_timestamp_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_get_timestamp>>(
          'snd_timer_status_get_timestamp');
  late final _dart_snd_timer_status_get_timestamp
      _snd_timer_status_get_timestamp = _snd_timer_status_get_timestamp_ptr
          .asFunction<_dart_snd_timer_status_get_timestamp>();

  int snd_timer_status_get_resolution(
    ffi.Pointer<snd_timer_status_> status,
  ) {
    return _snd_timer_status_get_resolution(
      status,
    );
  }

  late final _snd_timer_status_get_resolution_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_get_resolution>>(
          'snd_timer_status_get_resolution');
  late final _dart_snd_timer_status_get_resolution
      _snd_timer_status_get_resolution = _snd_timer_status_get_resolution_ptr
          .asFunction<_dart_snd_timer_status_get_resolution>();

  int snd_timer_status_get_lost(
    ffi.Pointer<snd_timer_status_> status,
  ) {
    return _snd_timer_status_get_lost(
      status,
    );
  }

  late final _snd_timer_status_get_lost_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_get_lost>>(
          'snd_timer_status_get_lost');
  late final _dart_snd_timer_status_get_lost _snd_timer_status_get_lost =
      _snd_timer_status_get_lost_ptr
          .asFunction<_dart_snd_timer_status_get_lost>();

  int snd_timer_status_get_overrun(
    ffi.Pointer<snd_timer_status_> status,
  ) {
    return _snd_timer_status_get_overrun(
      status,
    );
  }

  late final _snd_timer_status_get_overrun_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_get_overrun>>(
          'snd_timer_status_get_overrun');
  late final _dart_snd_timer_status_get_overrun _snd_timer_status_get_overrun =
      _snd_timer_status_get_overrun_ptr
          .asFunction<_dart_snd_timer_status_get_overrun>();

  int snd_timer_status_get_queue(
    ffi.Pointer<snd_timer_status_> status,
  ) {
    return _snd_timer_status_get_queue(
      status,
    );
  }

  late final _snd_timer_status_get_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_status_get_queue>>(
          'snd_timer_status_get_queue');
  late final _dart_snd_timer_status_get_queue _snd_timer_status_get_queue =
      _snd_timer_status_get_queue_ptr
          .asFunction<_dart_snd_timer_status_get_queue>();

  int snd_timer_info_get_ticks(
    ffi.Pointer<snd_timer_info_> info,
  ) {
    return _snd_timer_info_get_ticks(
      info,
    );
  }

  late final _snd_timer_info_get_ticks_ptr =
      _lookup<ffi.NativeFunction<_c_snd_timer_info_get_ticks>>(
          'snd_timer_info_get_ticks');
  late final _dart_snd_timer_info_get_ticks _snd_timer_info_get_ticks =
      _snd_timer_info_get_ticks_ptr
          .asFunction<_dart_snd_timer_info_get_ticks>();

  int snd_hwdep_open(
    ffi.Pointer<ffi.Pointer<snd_hwdep_>> hwdep,
    ffi.Pointer<ffi.Int8> name,
    int mode,
  ) {
    return _snd_hwdep_open(
      hwdep,
      name,
      mode,
    );
  }

  late final _snd_hwdep_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_open>>('snd_hwdep_open');
  late final _dart_snd_hwdep_open _snd_hwdep_open =
      _snd_hwdep_open_ptr.asFunction<_dart_snd_hwdep_open>();

  int snd_hwdep_close(
    ffi.Pointer<snd_hwdep_> hwdep,
  ) {
    return _snd_hwdep_close(
      hwdep,
    );
  }

  late final _snd_hwdep_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_close>>('snd_hwdep_close');
  late final _dart_snd_hwdep_close _snd_hwdep_close =
      _snd_hwdep_close_ptr.asFunction<_dart_snd_hwdep_close>();

  int snd_hwdep_poll_descriptors(
    ffi.Pointer<snd_hwdep_> hwdep,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_hwdep_poll_descriptors(
      hwdep,
      pfds,
      space,
    );
  }

  late final _snd_hwdep_poll_descriptors_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_poll_descriptors>>(
          'snd_hwdep_poll_descriptors');
  late final _dart_snd_hwdep_poll_descriptors _snd_hwdep_poll_descriptors =
      _snd_hwdep_poll_descriptors_ptr
          .asFunction<_dart_snd_hwdep_poll_descriptors>();

  int snd_hwdep_poll_descriptors_count(
    ffi.Pointer<snd_hwdep_> hwdep,
  ) {
    return _snd_hwdep_poll_descriptors_count(
      hwdep,
    );
  }

  late final _snd_hwdep_poll_descriptors_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_poll_descriptors_count>>(
          'snd_hwdep_poll_descriptors_count');
  late final _dart_snd_hwdep_poll_descriptors_count
      _snd_hwdep_poll_descriptors_count = _snd_hwdep_poll_descriptors_count_ptr
          .asFunction<_dart_snd_hwdep_poll_descriptors_count>();

  int snd_hwdep_poll_descriptors_revents(
    ffi.Pointer<snd_hwdep_> hwdep,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.Uint16> revents,
  ) {
    return _snd_hwdep_poll_descriptors_revents(
      hwdep,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_hwdep_poll_descriptors_revents_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_poll_descriptors_revents>>(
          'snd_hwdep_poll_descriptors_revents');
  late final _dart_snd_hwdep_poll_descriptors_revents
      _snd_hwdep_poll_descriptors_revents =
      _snd_hwdep_poll_descriptors_revents_ptr
          .asFunction<_dart_snd_hwdep_poll_descriptors_revents>();

  int snd_hwdep_nonblock(
    ffi.Pointer<snd_hwdep_> hwdep,
    int nonblock,
  ) {
    return _snd_hwdep_nonblock(
      hwdep,
      nonblock,
    );
  }

  late final _snd_hwdep_nonblock_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_nonblock>>('snd_hwdep_nonblock');
  late final _dart_snd_hwdep_nonblock _snd_hwdep_nonblock =
      _snd_hwdep_nonblock_ptr.asFunction<_dart_snd_hwdep_nonblock>();

  int snd_hwdep_info(
    ffi.Pointer<snd_hwdep_> hwdep,
    ffi.Pointer<snd_hwdep_info_> info,
  ) {
    return _snd_hwdep_info(
      hwdep,
      info,
    );
  }

  late final _snd_hwdep_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info>>('snd_hwdep_info');
  late final _dart_snd_hwdep_info _snd_hwdep_info =
      _snd_hwdep_info_ptr.asFunction<_dart_snd_hwdep_info>();

  int snd_hwdep_dsp_status(
    ffi.Pointer<snd_hwdep_> hwdep,
    ffi.Pointer<snd_hwdep_dsp_status_> status,
  ) {
    return _snd_hwdep_dsp_status(
      hwdep,
      status,
    );
  }

  late final _snd_hwdep_dsp_status_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status>>(
          'snd_hwdep_dsp_status');
  late final _dart_snd_hwdep_dsp_status _snd_hwdep_dsp_status =
      _snd_hwdep_dsp_status_ptr.asFunction<_dart_snd_hwdep_dsp_status>();

  int snd_hwdep_dsp_load(
    ffi.Pointer<snd_hwdep_> hwdep,
    ffi.Pointer<snd_hwdep_dsp_image_> block,
  ) {
    return _snd_hwdep_dsp_load(
      hwdep,
      block,
    );
  }

  late final _snd_hwdep_dsp_load_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_load>>('snd_hwdep_dsp_load');
  late final _dart_snd_hwdep_dsp_load _snd_hwdep_dsp_load =
      _snd_hwdep_dsp_load_ptr.asFunction<_dart_snd_hwdep_dsp_load>();

  int snd_hwdep_ioctl(
    ffi.Pointer<snd_hwdep_> hwdep,
    int request,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _snd_hwdep_ioctl(
      hwdep,
      request,
      arg,
    );
  }

  late final _snd_hwdep_ioctl_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_ioctl>>('snd_hwdep_ioctl');
  late final _dart_snd_hwdep_ioctl _snd_hwdep_ioctl =
      _snd_hwdep_ioctl_ptr.asFunction<_dart_snd_hwdep_ioctl>();

  int snd_hwdep_write(
    ffi.Pointer<snd_hwdep_> hwdep,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_hwdep_write(
      hwdep,
      buffer,
      size,
    );
  }

  late final _snd_hwdep_write_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_write>>('snd_hwdep_write');
  late final _dart_snd_hwdep_write _snd_hwdep_write =
      _snd_hwdep_write_ptr.asFunction<_dart_snd_hwdep_write>();

  int snd_hwdep_read(
    ffi.Pointer<snd_hwdep_> hwdep,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_hwdep_read(
      hwdep,
      buffer,
      size,
    );
  }

  late final _snd_hwdep_read_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_read>>('snd_hwdep_read');
  late final _dart_snd_hwdep_read _snd_hwdep_read =
      _snd_hwdep_read_ptr.asFunction<_dart_snd_hwdep_read>();

  int snd_hwdep_info_sizeof() {
    return _snd_hwdep_info_sizeof();
  }

  late final _snd_hwdep_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_sizeof>>(
          'snd_hwdep_info_sizeof');
  late final _dart_snd_hwdep_info_sizeof _snd_hwdep_info_sizeof =
      _snd_hwdep_info_sizeof_ptr.asFunction<_dart_snd_hwdep_info_sizeof>();

  int snd_hwdep_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_hwdep_info_>> ptr,
  ) {
    return _snd_hwdep_info_malloc(
      ptr,
    );
  }

  late final _snd_hwdep_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_malloc>>(
          'snd_hwdep_info_malloc');
  late final _dart_snd_hwdep_info_malloc _snd_hwdep_info_malloc =
      _snd_hwdep_info_malloc_ptr.asFunction<_dart_snd_hwdep_info_malloc>();

  void snd_hwdep_info_free(
    ffi.Pointer<snd_hwdep_info_> obj,
  ) {
    return _snd_hwdep_info_free(
      obj,
    );
  }

  late final _snd_hwdep_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_free>>(
          'snd_hwdep_info_free');
  late final _dart_snd_hwdep_info_free _snd_hwdep_info_free =
      _snd_hwdep_info_free_ptr.asFunction<_dart_snd_hwdep_info_free>();

  void snd_hwdep_info_copy(
    ffi.Pointer<snd_hwdep_info_> dst,
    ffi.Pointer<snd_hwdep_info_> src,
  ) {
    return _snd_hwdep_info_copy(
      dst,
      src,
    );
  }

  late final _snd_hwdep_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_copy>>(
          'snd_hwdep_info_copy');
  late final _dart_snd_hwdep_info_copy _snd_hwdep_info_copy =
      _snd_hwdep_info_copy_ptr.asFunction<_dart_snd_hwdep_info_copy>();

  int snd_hwdep_info_get_device(
    ffi.Pointer<snd_hwdep_info_> obj,
  ) {
    return _snd_hwdep_info_get_device(
      obj,
    );
  }

  late final _snd_hwdep_info_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_get_device>>(
          'snd_hwdep_info_get_device');
  late final _dart_snd_hwdep_info_get_device _snd_hwdep_info_get_device =
      _snd_hwdep_info_get_device_ptr
          .asFunction<_dart_snd_hwdep_info_get_device>();

  int snd_hwdep_info_get_card(
    ffi.Pointer<snd_hwdep_info_> obj,
  ) {
    return _snd_hwdep_info_get_card(
      obj,
    );
  }

  late final _snd_hwdep_info_get_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_get_card>>(
          'snd_hwdep_info_get_card');
  late final _dart_snd_hwdep_info_get_card _snd_hwdep_info_get_card =
      _snd_hwdep_info_get_card_ptr.asFunction<_dart_snd_hwdep_info_get_card>();

  ffi.Pointer<ffi.Int8> snd_hwdep_info_get_id(
    ffi.Pointer<snd_hwdep_info_> obj,
  ) {
    return _snd_hwdep_info_get_id(
      obj,
    );
  }

  late final _snd_hwdep_info_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_get_id>>(
          'snd_hwdep_info_get_id');
  late final _dart_snd_hwdep_info_get_id _snd_hwdep_info_get_id =
      _snd_hwdep_info_get_id_ptr.asFunction<_dart_snd_hwdep_info_get_id>();

  ffi.Pointer<ffi.Int8> snd_hwdep_info_get_name(
    ffi.Pointer<snd_hwdep_info_> obj,
  ) {
    return _snd_hwdep_info_get_name(
      obj,
    );
  }

  late final _snd_hwdep_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_get_name>>(
          'snd_hwdep_info_get_name');
  late final _dart_snd_hwdep_info_get_name _snd_hwdep_info_get_name =
      _snd_hwdep_info_get_name_ptr.asFunction<_dart_snd_hwdep_info_get_name>();

  int snd_hwdep_info_get_iface(
    ffi.Pointer<snd_hwdep_info_> obj,
  ) {
    return _snd_hwdep_info_get_iface(
      obj,
    );
  }

  late final _snd_hwdep_info_get_iface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_get_iface>>(
          'snd_hwdep_info_get_iface');
  late final _dart_snd_hwdep_info_get_iface _snd_hwdep_info_get_iface =
      _snd_hwdep_info_get_iface_ptr
          .asFunction<_dart_snd_hwdep_info_get_iface>();

  void snd_hwdep_info_set_device(
    ffi.Pointer<snd_hwdep_info_> obj,
    int val,
  ) {
    return _snd_hwdep_info_set_device(
      obj,
      val,
    );
  }

  late final _snd_hwdep_info_set_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_info_set_device>>(
          'snd_hwdep_info_set_device');
  late final _dart_snd_hwdep_info_set_device _snd_hwdep_info_set_device =
      _snd_hwdep_info_set_device_ptr
          .asFunction<_dart_snd_hwdep_info_set_device>();

  int snd_hwdep_dsp_status_sizeof() {
    return _snd_hwdep_dsp_status_sizeof();
  }

  late final _snd_hwdep_dsp_status_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_sizeof>>(
          'snd_hwdep_dsp_status_sizeof');
  late final _dart_snd_hwdep_dsp_status_sizeof _snd_hwdep_dsp_status_sizeof =
      _snd_hwdep_dsp_status_sizeof_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_sizeof>();

  int snd_hwdep_dsp_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_status_>> ptr,
  ) {
    return _snd_hwdep_dsp_status_malloc(
      ptr,
    );
  }

  late final _snd_hwdep_dsp_status_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_malloc>>(
          'snd_hwdep_dsp_status_malloc');
  late final _dart_snd_hwdep_dsp_status_malloc _snd_hwdep_dsp_status_malloc =
      _snd_hwdep_dsp_status_malloc_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_malloc>();

  void snd_hwdep_dsp_status_free(
    ffi.Pointer<snd_hwdep_dsp_status_> obj,
  ) {
    return _snd_hwdep_dsp_status_free(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_free>>(
          'snd_hwdep_dsp_status_free');
  late final _dart_snd_hwdep_dsp_status_free _snd_hwdep_dsp_status_free =
      _snd_hwdep_dsp_status_free_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_free>();

  void snd_hwdep_dsp_status_copy(
    ffi.Pointer<snd_hwdep_dsp_status_> dst,
    ffi.Pointer<snd_hwdep_dsp_status_> src,
  ) {
    return _snd_hwdep_dsp_status_copy(
      dst,
      src,
    );
  }

  late final _snd_hwdep_dsp_status_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_copy>>(
          'snd_hwdep_dsp_status_copy');
  late final _dart_snd_hwdep_dsp_status_copy _snd_hwdep_dsp_status_copy =
      _snd_hwdep_dsp_status_copy_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_copy>();

  int snd_hwdep_dsp_status_get_version(
    ffi.Pointer<snd_hwdep_dsp_status_> obj,
  ) {
    return _snd_hwdep_dsp_status_get_version(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_version_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_get_version>>(
          'snd_hwdep_dsp_status_get_version');
  late final _dart_snd_hwdep_dsp_status_get_version
      _snd_hwdep_dsp_status_get_version = _snd_hwdep_dsp_status_get_version_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_get_version>();

  ffi.Pointer<ffi.Int8> snd_hwdep_dsp_status_get_id(
    ffi.Pointer<snd_hwdep_dsp_status_> obj,
  ) {
    return _snd_hwdep_dsp_status_get_id(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_get_id>>(
          'snd_hwdep_dsp_status_get_id');
  late final _dart_snd_hwdep_dsp_status_get_id _snd_hwdep_dsp_status_get_id =
      _snd_hwdep_dsp_status_get_id_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_get_id>();

  int snd_hwdep_dsp_status_get_num_dsps(
    ffi.Pointer<snd_hwdep_dsp_status_> obj,
  ) {
    return _snd_hwdep_dsp_status_get_num_dsps(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_num_dsps_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_get_num_dsps>>(
          'snd_hwdep_dsp_status_get_num_dsps');
  late final _dart_snd_hwdep_dsp_status_get_num_dsps
      _snd_hwdep_dsp_status_get_num_dsps =
      _snd_hwdep_dsp_status_get_num_dsps_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_get_num_dsps>();

  int snd_hwdep_dsp_status_get_dsp_loaded(
    ffi.Pointer<snd_hwdep_dsp_status_> obj,
  ) {
    return _snd_hwdep_dsp_status_get_dsp_loaded(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_dsp_loaded_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_get_dsp_loaded>>(
          'snd_hwdep_dsp_status_get_dsp_loaded');
  late final _dart_snd_hwdep_dsp_status_get_dsp_loaded
      _snd_hwdep_dsp_status_get_dsp_loaded =
      _snd_hwdep_dsp_status_get_dsp_loaded_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_get_dsp_loaded>();

  int snd_hwdep_dsp_status_get_chip_ready(
    ffi.Pointer<snd_hwdep_dsp_status_> obj,
  ) {
    return _snd_hwdep_dsp_status_get_chip_ready(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_chip_ready_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_status_get_chip_ready>>(
          'snd_hwdep_dsp_status_get_chip_ready');
  late final _dart_snd_hwdep_dsp_status_get_chip_ready
      _snd_hwdep_dsp_status_get_chip_ready =
      _snd_hwdep_dsp_status_get_chip_ready_ptr
          .asFunction<_dart_snd_hwdep_dsp_status_get_chip_ready>();

  int snd_hwdep_dsp_image_sizeof() {
    return _snd_hwdep_dsp_image_sizeof();
  }

  late final _snd_hwdep_dsp_image_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_sizeof>>(
          'snd_hwdep_dsp_image_sizeof');
  late final _dart_snd_hwdep_dsp_image_sizeof _snd_hwdep_dsp_image_sizeof =
      _snd_hwdep_dsp_image_sizeof_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_sizeof>();

  int snd_hwdep_dsp_image_malloc(
    ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_image_>> ptr,
  ) {
    return _snd_hwdep_dsp_image_malloc(
      ptr,
    );
  }

  late final _snd_hwdep_dsp_image_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_malloc>>(
          'snd_hwdep_dsp_image_malloc');
  late final _dart_snd_hwdep_dsp_image_malloc _snd_hwdep_dsp_image_malloc =
      _snd_hwdep_dsp_image_malloc_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_malloc>();

  void snd_hwdep_dsp_image_free(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ) {
    return _snd_hwdep_dsp_image_free(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_free>>(
          'snd_hwdep_dsp_image_free');
  late final _dart_snd_hwdep_dsp_image_free _snd_hwdep_dsp_image_free =
      _snd_hwdep_dsp_image_free_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_free>();

  void snd_hwdep_dsp_image_copy(
    ffi.Pointer<snd_hwdep_dsp_image_> dst,
    ffi.Pointer<snd_hwdep_dsp_image_> src,
  ) {
    return _snd_hwdep_dsp_image_copy(
      dst,
      src,
    );
  }

  late final _snd_hwdep_dsp_image_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_copy>>(
          'snd_hwdep_dsp_image_copy');
  late final _dart_snd_hwdep_dsp_image_copy _snd_hwdep_dsp_image_copy =
      _snd_hwdep_dsp_image_copy_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_copy>();

  int snd_hwdep_dsp_image_get_index(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ) {
    return _snd_hwdep_dsp_image_get_index(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_get_index>>(
          'snd_hwdep_dsp_image_get_index');
  late final _dart_snd_hwdep_dsp_image_get_index
      _snd_hwdep_dsp_image_get_index = _snd_hwdep_dsp_image_get_index_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_get_index>();

  ffi.Pointer<ffi.Int8> snd_hwdep_dsp_image_get_name(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ) {
    return _snd_hwdep_dsp_image_get_name(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_get_name>>(
          'snd_hwdep_dsp_image_get_name');
  late final _dart_snd_hwdep_dsp_image_get_name _snd_hwdep_dsp_image_get_name =
      _snd_hwdep_dsp_image_get_name_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_get_name>();

  ffi.Pointer<ffi.Void> snd_hwdep_dsp_image_get_image(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ) {
    return _snd_hwdep_dsp_image_get_image(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_get_image_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_get_image>>(
          'snd_hwdep_dsp_image_get_image');
  late final _dart_snd_hwdep_dsp_image_get_image
      _snd_hwdep_dsp_image_get_image = _snd_hwdep_dsp_image_get_image_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_get_image>();

  int snd_hwdep_dsp_image_get_length(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ) {
    return _snd_hwdep_dsp_image_get_length(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_get_length_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_get_length>>(
          'snd_hwdep_dsp_image_get_length');
  late final _dart_snd_hwdep_dsp_image_get_length
      _snd_hwdep_dsp_image_get_length = _snd_hwdep_dsp_image_get_length_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_get_length>();

  void snd_hwdep_dsp_image_set_index(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
    int _index,
  ) {
    return _snd_hwdep_dsp_image_set_index(
      obj,
      _index,
    );
  }

  late final _snd_hwdep_dsp_image_set_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_set_index>>(
          'snd_hwdep_dsp_image_set_index');
  late final _dart_snd_hwdep_dsp_image_set_index
      _snd_hwdep_dsp_image_set_index = _snd_hwdep_dsp_image_set_index_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_set_index>();

  void snd_hwdep_dsp_image_set_name(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_hwdep_dsp_image_set_name(
      obj,
      name,
    );
  }

  late final _snd_hwdep_dsp_image_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_set_name>>(
          'snd_hwdep_dsp_image_set_name');
  late final _dart_snd_hwdep_dsp_image_set_name _snd_hwdep_dsp_image_set_name =
      _snd_hwdep_dsp_image_set_name_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_set_name>();

  void snd_hwdep_dsp_image_set_image(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
    ffi.Pointer<ffi.Void> buffer,
  ) {
    return _snd_hwdep_dsp_image_set_image(
      obj,
      buffer,
    );
  }

  late final _snd_hwdep_dsp_image_set_image_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_set_image>>(
          'snd_hwdep_dsp_image_set_image');
  late final _dart_snd_hwdep_dsp_image_set_image
      _snd_hwdep_dsp_image_set_image = _snd_hwdep_dsp_image_set_image_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_set_image>();

  void snd_hwdep_dsp_image_set_length(
    ffi.Pointer<snd_hwdep_dsp_image_> obj,
    int length,
  ) {
    return _snd_hwdep_dsp_image_set_length(
      obj,
      length,
    );
  }

  late final _snd_hwdep_dsp_image_set_length_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hwdep_dsp_image_set_length>>(
          'snd_hwdep_dsp_image_set_length');
  late final _dart_snd_hwdep_dsp_image_set_length
      _snd_hwdep_dsp_image_set_length = _snd_hwdep_dsp_image_set_length_ptr
          .asFunction<_dart_snd_hwdep_dsp_image_set_length>();

  int snd_card_load(
    int card,
  ) {
    return _snd_card_load(
      card,
    );
  }

  late final _snd_card_load_ptr =
      _lookup<ffi.NativeFunction<_c_snd_card_load>>('snd_card_load');
  late final _dart_snd_card_load _snd_card_load =
      _snd_card_load_ptr.asFunction<_dart_snd_card_load>();

  int snd_card_next(
    ffi.Pointer<ffi.Int32> card,
  ) {
    return _snd_card_next(
      card,
    );
  }

  late final _snd_card_next_ptr =
      _lookup<ffi.NativeFunction<_c_snd_card_next>>('snd_card_next');
  late final _dart_snd_card_next _snd_card_next =
      _snd_card_next_ptr.asFunction<_dart_snd_card_next>();

  int snd_card_get_index(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_card_get_index(
      name,
    );
  }

  late final _snd_card_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_card_get_index>>('snd_card_get_index');
  late final _dart_snd_card_get_index _snd_card_get_index =
      _snd_card_get_index_ptr.asFunction<_dart_snd_card_get_index>();

  int snd_card_get_name(
    int card,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ) {
    return _snd_card_get_name(
      card,
      name,
    );
  }

  late final _snd_card_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_card_get_name>>('snd_card_get_name');
  late final _dart_snd_card_get_name _snd_card_get_name =
      _snd_card_get_name_ptr.asFunction<_dart_snd_card_get_name>();

  int snd_card_get_longname(
    int card,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ) {
    return _snd_card_get_longname(
      card,
      name,
    );
  }

  late final _snd_card_get_longname_ptr =
      _lookup<ffi.NativeFunction<_c_snd_card_get_longname>>(
          'snd_card_get_longname');
  late final _dart_snd_card_get_longname _snd_card_get_longname =
      _snd_card_get_longname_ptr.asFunction<_dart_snd_card_get_longname>();

  int snd_device_name_hint(
    int card,
    ffi.Pointer<ffi.Int8> iface,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> hints,
  ) {
    return _snd_device_name_hint(
      card,
      iface,
      hints,
    );
  }

  late final _snd_device_name_hint_ptr =
      _lookup<ffi.NativeFunction<_c_snd_device_name_hint>>(
          'snd_device_name_hint');
  late final _dart_snd_device_name_hint _snd_device_name_hint =
      _snd_device_name_hint_ptr.asFunction<_dart_snd_device_name_hint>();

  int snd_device_name_free_hint(
    ffi.Pointer<ffi.Pointer<ffi.Void>> hints,
  ) {
    return _snd_device_name_free_hint(
      hints,
    );
  }

  late final _snd_device_name_free_hint_ptr =
      _lookup<ffi.NativeFunction<_c_snd_device_name_free_hint>>(
          'snd_device_name_free_hint');
  late final _dart_snd_device_name_free_hint _snd_device_name_free_hint =
      _snd_device_name_free_hint_ptr
          .asFunction<_dart_snd_device_name_free_hint>();

  ffi.Pointer<ffi.Int8> snd_device_name_get_hint(
    ffi.Pointer<ffi.Void> hint,
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _snd_device_name_get_hint(
      hint,
      id,
    );
  }

  late final _snd_device_name_get_hint_ptr =
      _lookup<ffi.NativeFunction<_c_snd_device_name_get_hint>>(
          'snd_device_name_get_hint');
  late final _dart_snd_device_name_get_hint _snd_device_name_get_hint =
      _snd_device_name_get_hint_ptr
          .asFunction<_dart_snd_device_name_get_hint>();

  int snd_ctl_open(
    ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
    ffi.Pointer<ffi.Int8> name,
    int mode,
  ) {
    return _snd_ctl_open(
      ctl,
      name,
      mode,
    );
  }

  late final _snd_ctl_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_open>>('snd_ctl_open');
  late final _dart_snd_ctl_open _snd_ctl_open =
      _snd_ctl_open_ptr.asFunction<_dart_snd_ctl_open>();

  int snd_ctl_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
    ffi.Pointer<ffi.Int8> name,
    int mode,
    ffi.Pointer<snd_config_> lconf,
  ) {
    return _snd_ctl_open_lconf(
      ctl,
      name,
      mode,
      lconf,
    );
  }

  late final _snd_ctl_open_lconf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_open_lconf>>('snd_ctl_open_lconf');
  late final _dart_snd_ctl_open_lconf _snd_ctl_open_lconf =
      _snd_ctl_open_lconf_ptr.asFunction<_dart_snd_ctl_open_lconf>();

  int snd_ctl_open_fallback(
    ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
    ffi.Pointer<snd_config_> root,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> orig_name,
    int mode,
  ) {
    return _snd_ctl_open_fallback(
      ctl,
      root,
      name,
      orig_name,
      mode,
    );
  }

  late final _snd_ctl_open_fallback_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_open_fallback>>(
          'snd_ctl_open_fallback');
  late final _dart_snd_ctl_open_fallback _snd_ctl_open_fallback =
      _snd_ctl_open_fallback_ptr.asFunction<_dart_snd_ctl_open_fallback>();

  int snd_ctl_close(
    ffi.Pointer<snd_ctl_> ctl,
  ) {
    return _snd_ctl_close(
      ctl,
    );
  }

  late final _snd_ctl_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_close>>('snd_ctl_close');
  late final _dart_snd_ctl_close _snd_ctl_close =
      _snd_ctl_close_ptr.asFunction<_dart_snd_ctl_close>();

  int snd_ctl_nonblock(
    ffi.Pointer<snd_ctl_> ctl,
    int nonblock,
  ) {
    return _snd_ctl_nonblock(
      ctl,
      nonblock,
    );
  }

  late final _snd_ctl_nonblock_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_nonblock>>('snd_ctl_nonblock');
  late final _dart_snd_ctl_nonblock _snd_ctl_nonblock =
      _snd_ctl_nonblock_ptr.asFunction<_dart_snd_ctl_nonblock>();

  int snd_async_add_ctl_handler(
    ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_async_add_ctl_handler(
      handler,
      ctl,
      callback,
      private_data,
    );
  }

  late final _snd_async_add_ctl_handler_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_add_ctl_handler>>(
          'snd_async_add_ctl_handler');
  late final _dart_snd_async_add_ctl_handler _snd_async_add_ctl_handler =
      _snd_async_add_ctl_handler_ptr
          .asFunction<_dart_snd_async_add_ctl_handler>();

  ffi.Pointer<snd_ctl_> snd_async_handler_get_ctl(
    ffi.Pointer<snd_async_handler_> handler,
  ) {
    return _snd_async_handler_get_ctl(
      handler,
    );
  }

  late final _snd_async_handler_get_ctl_ptr =
      _lookup<ffi.NativeFunction<_c_snd_async_handler_get_ctl>>(
          'snd_async_handler_get_ctl');
  late final _dart_snd_async_handler_get_ctl _snd_async_handler_get_ctl =
      _snd_async_handler_get_ctl_ptr
          .asFunction<_dart_snd_async_handler_get_ctl>();

  int snd_ctl_poll_descriptors_count(
    ffi.Pointer<snd_ctl_> ctl,
  ) {
    return _snd_ctl_poll_descriptors_count(
      ctl,
    );
  }

  late final _snd_ctl_poll_descriptors_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_poll_descriptors_count>>(
          'snd_ctl_poll_descriptors_count');
  late final _dart_snd_ctl_poll_descriptors_count
      _snd_ctl_poll_descriptors_count = _snd_ctl_poll_descriptors_count_ptr
          .asFunction<_dart_snd_ctl_poll_descriptors_count>();

  int snd_ctl_poll_descriptors(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_ctl_poll_descriptors(
      ctl,
      pfds,
      space,
    );
  }

  late final _snd_ctl_poll_descriptors_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_poll_descriptors>>(
          'snd_ctl_poll_descriptors');
  late final _dart_snd_ctl_poll_descriptors _snd_ctl_poll_descriptors =
      _snd_ctl_poll_descriptors_ptr
          .asFunction<_dart_snd_ctl_poll_descriptors>();

  int snd_ctl_poll_descriptors_revents(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.Uint16> revents,
  ) {
    return _snd_ctl_poll_descriptors_revents(
      ctl,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_ctl_poll_descriptors_revents_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_poll_descriptors_revents>>(
          'snd_ctl_poll_descriptors_revents');
  late final _dart_snd_ctl_poll_descriptors_revents
      _snd_ctl_poll_descriptors_revents = _snd_ctl_poll_descriptors_revents_ptr
          .asFunction<_dart_snd_ctl_poll_descriptors_revents>();

  int snd_ctl_subscribe_events(
    ffi.Pointer<snd_ctl_> ctl,
    int subscribe,
  ) {
    return _snd_ctl_subscribe_events(
      ctl,
      subscribe,
    );
  }

  late final _snd_ctl_subscribe_events_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_subscribe_events>>(
          'snd_ctl_subscribe_events');
  late final _dart_snd_ctl_subscribe_events _snd_ctl_subscribe_events =
      _snd_ctl_subscribe_events_ptr
          .asFunction<_dart_snd_ctl_subscribe_events>();

  int snd_ctl_card_info(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_card_info_> info,
  ) {
    return _snd_ctl_card_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_card_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info>>('snd_ctl_card_info');
  late final _dart_snd_ctl_card_info _snd_ctl_card_info =
      _snd_ctl_card_info_ptr.asFunction<_dart_snd_ctl_card_info>();

  int snd_ctl_elem_list(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_list_> list,
  ) {
    return _snd_ctl_elem_list(
      ctl,
      list,
    );
  }

  late final _snd_ctl_elem_list_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list>>('snd_ctl_elem_list');
  late final _dart_snd_ctl_elem_list _snd_ctl_elem_list =
      _snd_ctl_elem_list_ptr.asFunction<_dart_snd_ctl_elem_list>();

  int snd_ctl_elem_info(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_info_> info,
  ) {
    return _snd_ctl_elem_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_elem_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info>>('snd_ctl_elem_info');
  late final _dart_snd_ctl_elem_info _snd_ctl_elem_info =
      _snd_ctl_elem_info_ptr.asFunction<_dart_snd_ctl_elem_info>();

  int snd_ctl_elem_read(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_value_> data,
  ) {
    return _snd_ctl_elem_read(
      ctl,
      data,
    );
  }

  late final _snd_ctl_elem_read_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_read>>('snd_ctl_elem_read');
  late final _dart_snd_ctl_elem_read _snd_ctl_elem_read =
      _snd_ctl_elem_read_ptr.asFunction<_dart_snd_ctl_elem_read>();

  int snd_ctl_elem_write(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_value_> data,
  ) {
    return _snd_ctl_elem_write(
      ctl,
      data,
    );
  }

  late final _snd_ctl_elem_write_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_write>>('snd_ctl_elem_write');
  late final _dart_snd_ctl_elem_write _snd_ctl_elem_write =
      _snd_ctl_elem_write_ptr.asFunction<_dart_snd_ctl_elem_write>();

  int snd_ctl_elem_lock(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
  ) {
    return _snd_ctl_elem_lock(
      ctl,
      id,
    );
  }

  late final _snd_ctl_elem_lock_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_lock>>('snd_ctl_elem_lock');
  late final _dart_snd_ctl_elem_lock _snd_ctl_elem_lock =
      _snd_ctl_elem_lock_ptr.asFunction<_dart_snd_ctl_elem_lock>();

  int snd_ctl_elem_unlock(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
  ) {
    return _snd_ctl_elem_unlock(
      ctl,
      id,
    );
  }

  late final _snd_ctl_elem_unlock_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_unlock>>(
          'snd_ctl_elem_unlock');
  late final _dart_snd_ctl_elem_unlock _snd_ctl_elem_unlock =
      _snd_ctl_elem_unlock_ptr.asFunction<_dart_snd_ctl_elem_unlock>();

  int snd_ctl_elem_tlv_read(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    ffi.Pointer<ffi.Uint32> tlv,
    int tlv_size,
  ) {
    return _snd_ctl_elem_tlv_read(
      ctl,
      id,
      tlv,
      tlv_size,
    );
  }

  late final _snd_ctl_elem_tlv_read_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_tlv_read>>(
          'snd_ctl_elem_tlv_read');
  late final _dart_snd_ctl_elem_tlv_read _snd_ctl_elem_tlv_read =
      _snd_ctl_elem_tlv_read_ptr.asFunction<_dart_snd_ctl_elem_tlv_read>();

  int snd_ctl_elem_tlv_write(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    ffi.Pointer<ffi.Uint32> tlv,
  ) {
    return _snd_ctl_elem_tlv_write(
      ctl,
      id,
      tlv,
    );
  }

  late final _snd_ctl_elem_tlv_write_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_tlv_write>>(
          'snd_ctl_elem_tlv_write');
  late final _dart_snd_ctl_elem_tlv_write _snd_ctl_elem_tlv_write =
      _snd_ctl_elem_tlv_write_ptr.asFunction<_dart_snd_ctl_elem_tlv_write>();

  int snd_ctl_elem_tlv_command(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    ffi.Pointer<ffi.Uint32> tlv,
  ) {
    return _snd_ctl_elem_tlv_command(
      ctl,
      id,
      tlv,
    );
  }

  late final _snd_ctl_elem_tlv_command_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_tlv_command>>(
          'snd_ctl_elem_tlv_command');
  late final _dart_snd_ctl_elem_tlv_command _snd_ctl_elem_tlv_command =
      _snd_ctl_elem_tlv_command_ptr
          .asFunction<_dart_snd_ctl_elem_tlv_command>();

  int snd_ctl_hwdep_next_device(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<ffi.Int32> device,
  ) {
    return _snd_ctl_hwdep_next_device(
      ctl,
      device,
    );
  }

  late final _snd_ctl_hwdep_next_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_hwdep_next_device>>(
          'snd_ctl_hwdep_next_device');
  late final _dart_snd_ctl_hwdep_next_device _snd_ctl_hwdep_next_device =
      _snd_ctl_hwdep_next_device_ptr
          .asFunction<_dart_snd_ctl_hwdep_next_device>();

  int snd_ctl_hwdep_info(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_hwdep_info_> info,
  ) {
    return _snd_ctl_hwdep_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_hwdep_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_hwdep_info>>('snd_ctl_hwdep_info');
  late final _dart_snd_ctl_hwdep_info _snd_ctl_hwdep_info =
      _snd_ctl_hwdep_info_ptr.asFunction<_dart_snd_ctl_hwdep_info>();

  int snd_ctl_pcm_next_device(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<ffi.Int32> device,
  ) {
    return _snd_ctl_pcm_next_device(
      ctl,
      device,
    );
  }

  late final _snd_ctl_pcm_next_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_pcm_next_device>>(
          'snd_ctl_pcm_next_device');
  late final _dart_snd_ctl_pcm_next_device _snd_ctl_pcm_next_device =
      _snd_ctl_pcm_next_device_ptr.asFunction<_dart_snd_ctl_pcm_next_device>();

  int snd_ctl_pcm_info(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_pcm_info_> info,
  ) {
    return _snd_ctl_pcm_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_pcm_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_pcm_info>>('snd_ctl_pcm_info');
  late final _dart_snd_ctl_pcm_info _snd_ctl_pcm_info =
      _snd_ctl_pcm_info_ptr.asFunction<_dart_snd_ctl_pcm_info>();

  int snd_ctl_pcm_prefer_subdevice(
    ffi.Pointer<snd_ctl_> ctl,
    int subdev,
  ) {
    return _snd_ctl_pcm_prefer_subdevice(
      ctl,
      subdev,
    );
  }

  late final _snd_ctl_pcm_prefer_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_pcm_prefer_subdevice>>(
          'snd_ctl_pcm_prefer_subdevice');
  late final _dart_snd_ctl_pcm_prefer_subdevice _snd_ctl_pcm_prefer_subdevice =
      _snd_ctl_pcm_prefer_subdevice_ptr
          .asFunction<_dart_snd_ctl_pcm_prefer_subdevice>();

  int snd_ctl_rawmidi_next_device(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<ffi.Int32> device,
  ) {
    return _snd_ctl_rawmidi_next_device(
      ctl,
      device,
    );
  }

  late final _snd_ctl_rawmidi_next_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_rawmidi_next_device>>(
          'snd_ctl_rawmidi_next_device');
  late final _dart_snd_ctl_rawmidi_next_device _snd_ctl_rawmidi_next_device =
      _snd_ctl_rawmidi_next_device_ptr
          .asFunction<_dart_snd_ctl_rawmidi_next_device>();

  int snd_ctl_rawmidi_info(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_rawmidi_info_> info,
  ) {
    return _snd_ctl_rawmidi_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_rawmidi_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_rawmidi_info>>(
          'snd_ctl_rawmidi_info');
  late final _dart_snd_ctl_rawmidi_info _snd_ctl_rawmidi_info =
      _snd_ctl_rawmidi_info_ptr.asFunction<_dart_snd_ctl_rawmidi_info>();

  int snd_ctl_rawmidi_prefer_subdevice(
    ffi.Pointer<snd_ctl_> ctl,
    int subdev,
  ) {
    return _snd_ctl_rawmidi_prefer_subdevice(
      ctl,
      subdev,
    );
  }

  late final _snd_ctl_rawmidi_prefer_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_rawmidi_prefer_subdevice>>(
          'snd_ctl_rawmidi_prefer_subdevice');
  late final _dart_snd_ctl_rawmidi_prefer_subdevice
      _snd_ctl_rawmidi_prefer_subdevice = _snd_ctl_rawmidi_prefer_subdevice_ptr
          .asFunction<_dart_snd_ctl_rawmidi_prefer_subdevice>();

  int snd_ctl_set_power_state(
    ffi.Pointer<snd_ctl_> ctl,
    int state,
  ) {
    return _snd_ctl_set_power_state(
      ctl,
      state,
    );
  }

  late final _snd_ctl_set_power_state_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_set_power_state>>(
          'snd_ctl_set_power_state');
  late final _dart_snd_ctl_set_power_state _snd_ctl_set_power_state =
      _snd_ctl_set_power_state_ptr.asFunction<_dart_snd_ctl_set_power_state>();

  int snd_ctl_get_power_state(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<ffi.Uint32> state,
  ) {
    return _snd_ctl_get_power_state(
      ctl,
      state,
    );
  }

  late final _snd_ctl_get_power_state_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_get_power_state>>(
          'snd_ctl_get_power_state');
  late final _dart_snd_ctl_get_power_state _snd_ctl_get_power_state =
      _snd_ctl_get_power_state_ptr.asFunction<_dart_snd_ctl_get_power_state>();

  int snd_ctl_read(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_event_> event,
  ) {
    return _snd_ctl_read(
      ctl,
      event,
    );
  }

  late final _snd_ctl_read_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_read>>('snd_ctl_read');
  late final _dart_snd_ctl_read _snd_ctl_read =
      _snd_ctl_read_ptr.asFunction<_dart_snd_ctl_read>();

  int snd_ctl_wait(
    ffi.Pointer<snd_ctl_> ctl,
    int timeout,
  ) {
    return _snd_ctl_wait(
      ctl,
      timeout,
    );
  }

  late final _snd_ctl_wait_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_wait>>('snd_ctl_wait');
  late final _dart_snd_ctl_wait _snd_ctl_wait =
      _snd_ctl_wait_ptr.asFunction<_dart_snd_ctl_wait>();

  ffi.Pointer<ffi.Int8> snd_ctl_name(
    ffi.Pointer<snd_ctl_> ctl,
  ) {
    return _snd_ctl_name(
      ctl,
    );
  }

  late final _snd_ctl_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_name>>('snd_ctl_name');
  late final _dart_snd_ctl_name _snd_ctl_name =
      _snd_ctl_name_ptr.asFunction<_dart_snd_ctl_name>();

  int snd_ctl_type(
    ffi.Pointer<snd_ctl_> ctl,
  ) {
    return _snd_ctl_type(
      ctl,
    );
  }

  late final _snd_ctl_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_type>>('snd_ctl_type');
  late final _dart_snd_ctl_type _snd_ctl_type =
      _snd_ctl_type_ptr.asFunction<_dart_snd_ctl_type>();

  ffi.Pointer<ffi.Int8> snd_ctl_elem_type_name(
    int type,
  ) {
    return _snd_ctl_elem_type_name(
      type,
    );
  }

  late final _snd_ctl_elem_type_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_type_name>>(
          'snd_ctl_elem_type_name');
  late final _dart_snd_ctl_elem_type_name _snd_ctl_elem_type_name =
      _snd_ctl_elem_type_name_ptr.asFunction<_dart_snd_ctl_elem_type_name>();

  ffi.Pointer<ffi.Int8> snd_ctl_elem_iface_name(
    int iface,
  ) {
    return _snd_ctl_elem_iface_name(
      iface,
    );
  }

  late final _snd_ctl_elem_iface_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_iface_name>>(
          'snd_ctl_elem_iface_name');
  late final _dart_snd_ctl_elem_iface_name _snd_ctl_elem_iface_name =
      _snd_ctl_elem_iface_name_ptr.asFunction<_dart_snd_ctl_elem_iface_name>();

  ffi.Pointer<ffi.Int8> snd_ctl_event_type_name(
    int type,
  ) {
    return _snd_ctl_event_type_name(
      type,
    );
  }

  late final _snd_ctl_event_type_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_type_name>>(
          'snd_ctl_event_type_name');
  late final _dart_snd_ctl_event_type_name _snd_ctl_event_type_name =
      _snd_ctl_event_type_name_ptr.asFunction<_dart_snd_ctl_event_type_name>();

  int snd_ctl_event_elem_get_mask(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_elem_get_mask(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_mask_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_elem_get_mask>>(
          'snd_ctl_event_elem_get_mask');
  late final _dart_snd_ctl_event_elem_get_mask _snd_ctl_event_elem_get_mask =
      _snd_ctl_event_elem_get_mask_ptr
          .asFunction<_dart_snd_ctl_event_elem_get_mask>();

  int snd_ctl_event_elem_get_numid(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_elem_get_numid(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_elem_get_numid>>(
          'snd_ctl_event_elem_get_numid');
  late final _dart_snd_ctl_event_elem_get_numid _snd_ctl_event_elem_get_numid =
      _snd_ctl_event_elem_get_numid_ptr
          .asFunction<_dart_snd_ctl_event_elem_get_numid>();

  void snd_ctl_event_elem_get_id(
    ffi.Pointer<snd_ctl_event_> obj,
    ffi.Pointer<snd_ctl_elem_id_> ptr,
  ) {
    return _snd_ctl_event_elem_get_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_event_elem_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_elem_get_id>>(
          'snd_ctl_event_elem_get_id');
  late final _dart_snd_ctl_event_elem_get_id _snd_ctl_event_elem_get_id =
      _snd_ctl_event_elem_get_id_ptr
          .asFunction<_dart_snd_ctl_event_elem_get_id>();

  int snd_ctl_event_elem_get_interface(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_elem_get_interface(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_elem_get_interface>>(
          'snd_ctl_event_elem_get_interface');
  late final _dart_snd_ctl_event_elem_get_interface
      _snd_ctl_event_elem_get_interface = _snd_ctl_event_elem_get_interface_ptr
          .asFunction<_dart_snd_ctl_event_elem_get_interface>();

  int snd_ctl_event_elem_get_device(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_elem_get_device(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_elem_get_device>>(
          'snd_ctl_event_elem_get_device');
  late final _dart_snd_ctl_event_elem_get_device
      _snd_ctl_event_elem_get_device = _snd_ctl_event_elem_get_device_ptr
          .asFunction<_dart_snd_ctl_event_elem_get_device>();

  int snd_ctl_event_elem_get_subdevice(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_elem_get_subdevice(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_elem_get_subdevice>>(
          'snd_ctl_event_elem_get_subdevice');
  late final _dart_snd_ctl_event_elem_get_subdevice
      _snd_ctl_event_elem_get_subdevice = _snd_ctl_event_elem_get_subdevice_ptr
          .asFunction<_dart_snd_ctl_event_elem_get_subdevice>();

  ffi.Pointer<ffi.Int8> snd_ctl_event_elem_get_name(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_elem_get_name(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_elem_get_name>>(
          'snd_ctl_event_elem_get_name');
  late final _dart_snd_ctl_event_elem_get_name _snd_ctl_event_elem_get_name =
      _snd_ctl_event_elem_get_name_ptr
          .asFunction<_dart_snd_ctl_event_elem_get_name>();

  int snd_ctl_event_elem_get_index(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_elem_get_index(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_elem_get_index>>(
          'snd_ctl_event_elem_get_index');
  late final _dart_snd_ctl_event_elem_get_index _snd_ctl_event_elem_get_index =
      _snd_ctl_event_elem_get_index_ptr
          .asFunction<_dart_snd_ctl_event_elem_get_index>();

  int snd_ctl_elem_list_alloc_space(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int entries,
  ) {
    return _snd_ctl_elem_list_alloc_space(
      obj,
      entries,
    );
  }

  late final _snd_ctl_elem_list_alloc_space_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_alloc_space>>(
          'snd_ctl_elem_list_alloc_space');
  late final _dart_snd_ctl_elem_list_alloc_space
      _snd_ctl_elem_list_alloc_space = _snd_ctl_elem_list_alloc_space_ptr
          .asFunction<_dart_snd_ctl_elem_list_alloc_space>();

  void snd_ctl_elem_list_free_space(
    ffi.Pointer<snd_ctl_elem_list_> obj,
  ) {
    return _snd_ctl_elem_list_free_space(
      obj,
    );
  }

  late final _snd_ctl_elem_list_free_space_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_free_space>>(
          'snd_ctl_elem_list_free_space');
  late final _dart_snd_ctl_elem_list_free_space _snd_ctl_elem_list_free_space =
      _snd_ctl_elem_list_free_space_ptr
          .asFunction<_dart_snd_ctl_elem_list_free_space>();

  ffi.Pointer<ffi.Int8> snd_ctl_ascii_elem_id_get(
    ffi.Pointer<snd_ctl_elem_id_> id,
  ) {
    return _snd_ctl_ascii_elem_id_get(
      id,
    );
  }

  late final _snd_ctl_ascii_elem_id_get_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_ascii_elem_id_get>>(
          'snd_ctl_ascii_elem_id_get');
  late final _dart_snd_ctl_ascii_elem_id_get _snd_ctl_ascii_elem_id_get =
      _snd_ctl_ascii_elem_id_get_ptr
          .asFunction<_dart_snd_ctl_ascii_elem_id_get>();

  int snd_ctl_ascii_elem_id_parse(
    ffi.Pointer<snd_ctl_elem_id_> dst,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _snd_ctl_ascii_elem_id_parse(
      dst,
      str,
    );
  }

  late final _snd_ctl_ascii_elem_id_parse_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_ascii_elem_id_parse>>(
          'snd_ctl_ascii_elem_id_parse');
  late final _dart_snd_ctl_ascii_elem_id_parse _snd_ctl_ascii_elem_id_parse =
      _snd_ctl_ascii_elem_id_parse_ptr
          .asFunction<_dart_snd_ctl_ascii_elem_id_parse>();

  int snd_ctl_ascii_value_parse(
    ffi.Pointer<snd_ctl_> handle,
    ffi.Pointer<snd_ctl_elem_value_> dst,
    ffi.Pointer<snd_ctl_elem_info_> info,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _snd_ctl_ascii_value_parse(
      handle,
      dst,
      info,
      value,
    );
  }

  late final _snd_ctl_ascii_value_parse_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_ascii_value_parse>>(
          'snd_ctl_ascii_value_parse');
  late final _dart_snd_ctl_ascii_value_parse _snd_ctl_ascii_value_parse =
      _snd_ctl_ascii_value_parse_ptr
          .asFunction<_dart_snd_ctl_ascii_value_parse>();

  int snd_ctl_elem_id_sizeof() {
    return _snd_ctl_elem_id_sizeof();
  }

  late final _snd_ctl_elem_id_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_sizeof>>(
          'snd_ctl_elem_id_sizeof');
  late final _dart_snd_ctl_elem_id_sizeof _snd_ctl_elem_id_sizeof =
      _snd_ctl_elem_id_sizeof_ptr.asFunction<_dart_snd_ctl_elem_id_sizeof>();

  int snd_ctl_elem_id_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_elem_id_>> ptr,
  ) {
    return _snd_ctl_elem_id_malloc(
      ptr,
    );
  }

  late final _snd_ctl_elem_id_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_malloc>>(
          'snd_ctl_elem_id_malloc');
  late final _dart_snd_ctl_elem_id_malloc _snd_ctl_elem_id_malloc =
      _snd_ctl_elem_id_malloc_ptr.asFunction<_dart_snd_ctl_elem_id_malloc>();

  void snd_ctl_elem_id_free(
    ffi.Pointer<snd_ctl_elem_id_> obj,
  ) {
    return _snd_ctl_elem_id_free(
      obj,
    );
  }

  late final _snd_ctl_elem_id_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_free>>(
          'snd_ctl_elem_id_free');
  late final _dart_snd_ctl_elem_id_free _snd_ctl_elem_id_free =
      _snd_ctl_elem_id_free_ptr.asFunction<_dart_snd_ctl_elem_id_free>();

  void snd_ctl_elem_id_clear(
    ffi.Pointer<snd_ctl_elem_id_> obj,
  ) {
    return _snd_ctl_elem_id_clear(
      obj,
    );
  }

  late final _snd_ctl_elem_id_clear_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_clear>>(
          'snd_ctl_elem_id_clear');
  late final _dart_snd_ctl_elem_id_clear _snd_ctl_elem_id_clear =
      _snd_ctl_elem_id_clear_ptr.asFunction<_dart_snd_ctl_elem_id_clear>();

  void snd_ctl_elem_id_copy(
    ffi.Pointer<snd_ctl_elem_id_> dst,
    ffi.Pointer<snd_ctl_elem_id_> src,
  ) {
    return _snd_ctl_elem_id_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_elem_id_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_copy>>(
          'snd_ctl_elem_id_copy');
  late final _dart_snd_ctl_elem_id_copy _snd_ctl_elem_id_copy =
      _snd_ctl_elem_id_copy_ptr.asFunction<_dart_snd_ctl_elem_id_copy>();

  int snd_ctl_elem_id_get_numid(
    ffi.Pointer<snd_ctl_elem_id_> obj,
  ) {
    return _snd_ctl_elem_id_get_numid(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_get_numid>>(
          'snd_ctl_elem_id_get_numid');
  late final _dart_snd_ctl_elem_id_get_numid _snd_ctl_elem_id_get_numid =
      _snd_ctl_elem_id_get_numid_ptr
          .asFunction<_dart_snd_ctl_elem_id_get_numid>();

  int snd_ctl_elem_id_get_interface(
    ffi.Pointer<snd_ctl_elem_id_> obj,
  ) {
    return _snd_ctl_elem_id_get_interface(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_get_interface>>(
          'snd_ctl_elem_id_get_interface');
  late final _dart_snd_ctl_elem_id_get_interface
      _snd_ctl_elem_id_get_interface = _snd_ctl_elem_id_get_interface_ptr
          .asFunction<_dart_snd_ctl_elem_id_get_interface>();

  int snd_ctl_elem_id_get_device(
    ffi.Pointer<snd_ctl_elem_id_> obj,
  ) {
    return _snd_ctl_elem_id_get_device(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_get_device>>(
          'snd_ctl_elem_id_get_device');
  late final _dart_snd_ctl_elem_id_get_device _snd_ctl_elem_id_get_device =
      _snd_ctl_elem_id_get_device_ptr
          .asFunction<_dart_snd_ctl_elem_id_get_device>();

  int snd_ctl_elem_id_get_subdevice(
    ffi.Pointer<snd_ctl_elem_id_> obj,
  ) {
    return _snd_ctl_elem_id_get_subdevice(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_get_subdevice>>(
          'snd_ctl_elem_id_get_subdevice');
  late final _dart_snd_ctl_elem_id_get_subdevice
      _snd_ctl_elem_id_get_subdevice = _snd_ctl_elem_id_get_subdevice_ptr
          .asFunction<_dart_snd_ctl_elem_id_get_subdevice>();

  ffi.Pointer<ffi.Int8> snd_ctl_elem_id_get_name(
    ffi.Pointer<snd_ctl_elem_id_> obj,
  ) {
    return _snd_ctl_elem_id_get_name(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_get_name>>(
          'snd_ctl_elem_id_get_name');
  late final _dart_snd_ctl_elem_id_get_name _snd_ctl_elem_id_get_name =
      _snd_ctl_elem_id_get_name_ptr
          .asFunction<_dart_snd_ctl_elem_id_get_name>();

  int snd_ctl_elem_id_get_index(
    ffi.Pointer<snd_ctl_elem_id_> obj,
  ) {
    return _snd_ctl_elem_id_get_index(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_get_index>>(
          'snd_ctl_elem_id_get_index');
  late final _dart_snd_ctl_elem_id_get_index _snd_ctl_elem_id_get_index =
      _snd_ctl_elem_id_get_index_ptr
          .asFunction<_dart_snd_ctl_elem_id_get_index>();

  void snd_ctl_elem_id_set_numid(
    ffi.Pointer<snd_ctl_elem_id_> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_numid(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_set_numid>>(
          'snd_ctl_elem_id_set_numid');
  late final _dart_snd_ctl_elem_id_set_numid _snd_ctl_elem_id_set_numid =
      _snd_ctl_elem_id_set_numid_ptr
          .asFunction<_dart_snd_ctl_elem_id_set_numid>();

  void snd_ctl_elem_id_set_interface(
    ffi.Pointer<snd_ctl_elem_id_> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_interface(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_set_interface>>(
          'snd_ctl_elem_id_set_interface');
  late final _dart_snd_ctl_elem_id_set_interface
      _snd_ctl_elem_id_set_interface = _snd_ctl_elem_id_set_interface_ptr
          .asFunction<_dart_snd_ctl_elem_id_set_interface>();

  void snd_ctl_elem_id_set_device(
    ffi.Pointer<snd_ctl_elem_id_> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_device(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_set_device>>(
          'snd_ctl_elem_id_set_device');
  late final _dart_snd_ctl_elem_id_set_device _snd_ctl_elem_id_set_device =
      _snd_ctl_elem_id_set_device_ptr
          .asFunction<_dart_snd_ctl_elem_id_set_device>();

  void snd_ctl_elem_id_set_subdevice(
    ffi.Pointer<snd_ctl_elem_id_> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_set_subdevice>>(
          'snd_ctl_elem_id_set_subdevice');
  late final _dart_snd_ctl_elem_id_set_subdevice
      _snd_ctl_elem_id_set_subdevice = _snd_ctl_elem_id_set_subdevice_ptr
          .asFunction<_dart_snd_ctl_elem_id_set_subdevice>();

  void snd_ctl_elem_id_set_name(
    ffi.Pointer<snd_ctl_elem_id_> obj,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _snd_ctl_elem_id_set_name(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_set_name>>(
          'snd_ctl_elem_id_set_name');
  late final _dart_snd_ctl_elem_id_set_name _snd_ctl_elem_id_set_name =
      _snd_ctl_elem_id_set_name_ptr
          .asFunction<_dart_snd_ctl_elem_id_set_name>();

  void snd_ctl_elem_id_set_index(
    ffi.Pointer<snd_ctl_elem_id_> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_index(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_id_set_index>>(
          'snd_ctl_elem_id_set_index');
  late final _dart_snd_ctl_elem_id_set_index _snd_ctl_elem_id_set_index =
      _snd_ctl_elem_id_set_index_ptr
          .asFunction<_dart_snd_ctl_elem_id_set_index>();

  int snd_ctl_card_info_sizeof() {
    return _snd_ctl_card_info_sizeof();
  }

  late final _snd_ctl_card_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_sizeof>>(
          'snd_ctl_card_info_sizeof');
  late final _dart_snd_ctl_card_info_sizeof _snd_ctl_card_info_sizeof =
      _snd_ctl_card_info_sizeof_ptr
          .asFunction<_dart_snd_ctl_card_info_sizeof>();

  int snd_ctl_card_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_card_info_>> ptr,
  ) {
    return _snd_ctl_card_info_malloc(
      ptr,
    );
  }

  late final _snd_ctl_card_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_malloc>>(
          'snd_ctl_card_info_malloc');
  late final _dart_snd_ctl_card_info_malloc _snd_ctl_card_info_malloc =
      _snd_ctl_card_info_malloc_ptr
          .asFunction<_dart_snd_ctl_card_info_malloc>();

  void snd_ctl_card_info_free(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_free(
      obj,
    );
  }

  late final _snd_ctl_card_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_free>>(
          'snd_ctl_card_info_free');
  late final _dart_snd_ctl_card_info_free _snd_ctl_card_info_free =
      _snd_ctl_card_info_free_ptr.asFunction<_dart_snd_ctl_card_info_free>();

  void snd_ctl_card_info_clear(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_clear(
      obj,
    );
  }

  late final _snd_ctl_card_info_clear_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_clear>>(
          'snd_ctl_card_info_clear');
  late final _dart_snd_ctl_card_info_clear _snd_ctl_card_info_clear =
      _snd_ctl_card_info_clear_ptr.asFunction<_dart_snd_ctl_card_info_clear>();

  void snd_ctl_card_info_copy(
    ffi.Pointer<snd_ctl_card_info_> dst,
    ffi.Pointer<snd_ctl_card_info_> src,
  ) {
    return _snd_ctl_card_info_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_card_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_copy>>(
          'snd_ctl_card_info_copy');
  late final _dart_snd_ctl_card_info_copy _snd_ctl_card_info_copy =
      _snd_ctl_card_info_copy_ptr.asFunction<_dart_snd_ctl_card_info_copy>();

  int snd_ctl_card_info_get_card(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_get_card(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_get_card>>(
          'snd_ctl_card_info_get_card');
  late final _dart_snd_ctl_card_info_get_card _snd_ctl_card_info_get_card =
      _snd_ctl_card_info_get_card_ptr
          .asFunction<_dart_snd_ctl_card_info_get_card>();

  ffi.Pointer<ffi.Int8> snd_ctl_card_info_get_id(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_get_id(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_get_id>>(
          'snd_ctl_card_info_get_id');
  late final _dart_snd_ctl_card_info_get_id _snd_ctl_card_info_get_id =
      _snd_ctl_card_info_get_id_ptr
          .asFunction<_dart_snd_ctl_card_info_get_id>();

  ffi.Pointer<ffi.Int8> snd_ctl_card_info_get_driver(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_get_driver(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_driver_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_get_driver>>(
          'snd_ctl_card_info_get_driver');
  late final _dart_snd_ctl_card_info_get_driver _snd_ctl_card_info_get_driver =
      _snd_ctl_card_info_get_driver_ptr
          .asFunction<_dart_snd_ctl_card_info_get_driver>();

  ffi.Pointer<ffi.Int8> snd_ctl_card_info_get_name(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_get_name(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_get_name>>(
          'snd_ctl_card_info_get_name');
  late final _dart_snd_ctl_card_info_get_name _snd_ctl_card_info_get_name =
      _snd_ctl_card_info_get_name_ptr
          .asFunction<_dart_snd_ctl_card_info_get_name>();

  ffi.Pointer<ffi.Int8> snd_ctl_card_info_get_longname(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_get_longname(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_longname_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_get_longname>>(
          'snd_ctl_card_info_get_longname');
  late final _dart_snd_ctl_card_info_get_longname
      _snd_ctl_card_info_get_longname = _snd_ctl_card_info_get_longname_ptr
          .asFunction<_dart_snd_ctl_card_info_get_longname>();

  ffi.Pointer<ffi.Int8> snd_ctl_card_info_get_mixername(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_get_mixername(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_mixername_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_get_mixername>>(
          'snd_ctl_card_info_get_mixername');
  late final _dart_snd_ctl_card_info_get_mixername
      _snd_ctl_card_info_get_mixername = _snd_ctl_card_info_get_mixername_ptr
          .asFunction<_dart_snd_ctl_card_info_get_mixername>();

  ffi.Pointer<ffi.Int8> snd_ctl_card_info_get_components(
    ffi.Pointer<snd_ctl_card_info_> obj,
  ) {
    return _snd_ctl_card_info_get_components(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_components_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_card_info_get_components>>(
          'snd_ctl_card_info_get_components');
  late final _dart_snd_ctl_card_info_get_components
      _snd_ctl_card_info_get_components = _snd_ctl_card_info_get_components_ptr
          .asFunction<_dart_snd_ctl_card_info_get_components>();

  int snd_ctl_event_sizeof() {
    return _snd_ctl_event_sizeof();
  }

  late final _snd_ctl_event_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_sizeof>>(
          'snd_ctl_event_sizeof');
  late final _dart_snd_ctl_event_sizeof _snd_ctl_event_sizeof =
      _snd_ctl_event_sizeof_ptr.asFunction<_dart_snd_ctl_event_sizeof>();

  int snd_ctl_event_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_event_>> ptr,
  ) {
    return _snd_ctl_event_malloc(
      ptr,
    );
  }

  late final _snd_ctl_event_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_malloc>>(
          'snd_ctl_event_malloc');
  late final _dart_snd_ctl_event_malloc _snd_ctl_event_malloc =
      _snd_ctl_event_malloc_ptr.asFunction<_dart_snd_ctl_event_malloc>();

  void snd_ctl_event_free(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_free(
      obj,
    );
  }

  late final _snd_ctl_event_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_free>>('snd_ctl_event_free');
  late final _dart_snd_ctl_event_free _snd_ctl_event_free =
      _snd_ctl_event_free_ptr.asFunction<_dart_snd_ctl_event_free>();

  void snd_ctl_event_clear(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_clear(
      obj,
    );
  }

  late final _snd_ctl_event_clear_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_clear>>(
          'snd_ctl_event_clear');
  late final _dart_snd_ctl_event_clear _snd_ctl_event_clear =
      _snd_ctl_event_clear_ptr.asFunction<_dart_snd_ctl_event_clear>();

  void snd_ctl_event_copy(
    ffi.Pointer<snd_ctl_event_> dst,
    ffi.Pointer<snd_ctl_event_> src,
  ) {
    return _snd_ctl_event_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_event_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_copy>>('snd_ctl_event_copy');
  late final _dart_snd_ctl_event_copy _snd_ctl_event_copy =
      _snd_ctl_event_copy_ptr.asFunction<_dart_snd_ctl_event_copy>();

  int snd_ctl_event_get_type(
    ffi.Pointer<snd_ctl_event_> obj,
  ) {
    return _snd_ctl_event_get_type(
      obj,
    );
  }

  late final _snd_ctl_event_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_event_get_type>>(
          'snd_ctl_event_get_type');
  late final _dart_snd_ctl_event_get_type _snd_ctl_event_get_type =
      _snd_ctl_event_get_type_ptr.asFunction<_dart_snd_ctl_event_get_type>();

  int snd_ctl_elem_list_sizeof() {
    return _snd_ctl_elem_list_sizeof();
  }

  late final _snd_ctl_elem_list_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_sizeof>>(
          'snd_ctl_elem_list_sizeof');
  late final _dart_snd_ctl_elem_list_sizeof _snd_ctl_elem_list_sizeof =
      _snd_ctl_elem_list_sizeof_ptr
          .asFunction<_dart_snd_ctl_elem_list_sizeof>();

  int snd_ctl_elem_list_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_elem_list_>> ptr,
  ) {
    return _snd_ctl_elem_list_malloc(
      ptr,
    );
  }

  late final _snd_ctl_elem_list_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_malloc>>(
          'snd_ctl_elem_list_malloc');
  late final _dart_snd_ctl_elem_list_malloc _snd_ctl_elem_list_malloc =
      _snd_ctl_elem_list_malloc_ptr
          .asFunction<_dart_snd_ctl_elem_list_malloc>();

  void snd_ctl_elem_list_free(
    ffi.Pointer<snd_ctl_elem_list_> obj,
  ) {
    return _snd_ctl_elem_list_free(
      obj,
    );
  }

  late final _snd_ctl_elem_list_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_free>>(
          'snd_ctl_elem_list_free');
  late final _dart_snd_ctl_elem_list_free _snd_ctl_elem_list_free =
      _snd_ctl_elem_list_free_ptr.asFunction<_dart_snd_ctl_elem_list_free>();

  void snd_ctl_elem_list_clear(
    ffi.Pointer<snd_ctl_elem_list_> obj,
  ) {
    return _snd_ctl_elem_list_clear(
      obj,
    );
  }

  late final _snd_ctl_elem_list_clear_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_clear>>(
          'snd_ctl_elem_list_clear');
  late final _dart_snd_ctl_elem_list_clear _snd_ctl_elem_list_clear =
      _snd_ctl_elem_list_clear_ptr.asFunction<_dart_snd_ctl_elem_list_clear>();

  void snd_ctl_elem_list_copy(
    ffi.Pointer<snd_ctl_elem_list_> dst,
    ffi.Pointer<snd_ctl_elem_list_> src,
  ) {
    return _snd_ctl_elem_list_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_elem_list_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_copy>>(
          'snd_ctl_elem_list_copy');
  late final _dart_snd_ctl_elem_list_copy _snd_ctl_elem_list_copy =
      _snd_ctl_elem_list_copy_ptr.asFunction<_dart_snd_ctl_elem_list_copy>();

  void snd_ctl_elem_list_set_offset(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int val,
  ) {
    return _snd_ctl_elem_list_set_offset(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_list_set_offset_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_set_offset>>(
          'snd_ctl_elem_list_set_offset');
  late final _dart_snd_ctl_elem_list_set_offset _snd_ctl_elem_list_set_offset =
      _snd_ctl_elem_list_set_offset_ptr
          .asFunction<_dart_snd_ctl_elem_list_set_offset>();

  int snd_ctl_elem_list_get_used(
    ffi.Pointer<snd_ctl_elem_list_> obj,
  ) {
    return _snd_ctl_elem_list_get_used(
      obj,
    );
  }

  late final _snd_ctl_elem_list_get_used_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_used>>(
          'snd_ctl_elem_list_get_used');
  late final _dart_snd_ctl_elem_list_get_used _snd_ctl_elem_list_get_used =
      _snd_ctl_elem_list_get_used_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_used>();

  int snd_ctl_elem_list_get_count(
    ffi.Pointer<snd_ctl_elem_list_> obj,
  ) {
    return _snd_ctl_elem_list_get_count(
      obj,
    );
  }

  late final _snd_ctl_elem_list_get_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_count>>(
          'snd_ctl_elem_list_get_count');
  late final _dart_snd_ctl_elem_list_get_count _snd_ctl_elem_list_get_count =
      _snd_ctl_elem_list_get_count_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_count>();

  void snd_ctl_elem_list_get_id(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int idx,
    ffi.Pointer<snd_ctl_elem_id_> ptr,
  ) {
    return _snd_ctl_elem_list_get_id(
      obj,
      idx,
      ptr,
    );
  }

  late final _snd_ctl_elem_list_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_id>>(
          'snd_ctl_elem_list_get_id');
  late final _dart_snd_ctl_elem_list_get_id _snd_ctl_elem_list_get_id =
      _snd_ctl_elem_list_get_id_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_id>();

  int snd_ctl_elem_list_get_numid(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_numid(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_numid>>(
          'snd_ctl_elem_list_get_numid');
  late final _dart_snd_ctl_elem_list_get_numid _snd_ctl_elem_list_get_numid =
      _snd_ctl_elem_list_get_numid_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_numid>();

  int snd_ctl_elem_list_get_interface(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_interface(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_interface>>(
          'snd_ctl_elem_list_get_interface');
  late final _dart_snd_ctl_elem_list_get_interface
      _snd_ctl_elem_list_get_interface = _snd_ctl_elem_list_get_interface_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_interface>();

  int snd_ctl_elem_list_get_device(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_device(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_device>>(
          'snd_ctl_elem_list_get_device');
  late final _dart_snd_ctl_elem_list_get_device _snd_ctl_elem_list_get_device =
      _snd_ctl_elem_list_get_device_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_device>();

  int snd_ctl_elem_list_get_subdevice(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_subdevice(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_subdevice>>(
          'snd_ctl_elem_list_get_subdevice');
  late final _dart_snd_ctl_elem_list_get_subdevice
      _snd_ctl_elem_list_get_subdevice = _snd_ctl_elem_list_get_subdevice_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_subdevice>();

  ffi.Pointer<ffi.Int8> snd_ctl_elem_list_get_name(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_name(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_name>>(
          'snd_ctl_elem_list_get_name');
  late final _dart_snd_ctl_elem_list_get_name _snd_ctl_elem_list_get_name =
      _snd_ctl_elem_list_get_name_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_name>();

  int snd_ctl_elem_list_get_index(
    ffi.Pointer<snd_ctl_elem_list_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_index(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_list_get_index>>(
          'snd_ctl_elem_list_get_index');
  late final _dart_snd_ctl_elem_list_get_index _snd_ctl_elem_list_get_index =
      _snd_ctl_elem_list_get_index_ptr
          .asFunction<_dart_snd_ctl_elem_list_get_index>();

  int snd_ctl_elem_info_sizeof() {
    return _snd_ctl_elem_info_sizeof();
  }

  late final _snd_ctl_elem_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_sizeof>>(
          'snd_ctl_elem_info_sizeof');
  late final _dart_snd_ctl_elem_info_sizeof _snd_ctl_elem_info_sizeof =
      _snd_ctl_elem_info_sizeof_ptr
          .asFunction<_dart_snd_ctl_elem_info_sizeof>();

  int snd_ctl_elem_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_elem_info_>> ptr,
  ) {
    return _snd_ctl_elem_info_malloc(
      ptr,
    );
  }

  late final _snd_ctl_elem_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_malloc>>(
          'snd_ctl_elem_info_malloc');
  late final _dart_snd_ctl_elem_info_malloc _snd_ctl_elem_info_malloc =
      _snd_ctl_elem_info_malloc_ptr
          .asFunction<_dart_snd_ctl_elem_info_malloc>();

  void snd_ctl_elem_info_free(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_free(
      obj,
    );
  }

  late final _snd_ctl_elem_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_free>>(
          'snd_ctl_elem_info_free');
  late final _dart_snd_ctl_elem_info_free _snd_ctl_elem_info_free =
      _snd_ctl_elem_info_free_ptr.asFunction<_dart_snd_ctl_elem_info_free>();

  void snd_ctl_elem_info_clear(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_clear(
      obj,
    );
  }

  late final _snd_ctl_elem_info_clear_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_clear>>(
          'snd_ctl_elem_info_clear');
  late final _dart_snd_ctl_elem_info_clear _snd_ctl_elem_info_clear =
      _snd_ctl_elem_info_clear_ptr.asFunction<_dart_snd_ctl_elem_info_clear>();

  void snd_ctl_elem_info_copy(
    ffi.Pointer<snd_ctl_elem_info_> dst,
    ffi.Pointer<snd_ctl_elem_info_> src,
  ) {
    return _snd_ctl_elem_info_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_elem_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_copy>>(
          'snd_ctl_elem_info_copy');
  late final _dart_snd_ctl_elem_info_copy _snd_ctl_elem_info_copy =
      _snd_ctl_elem_info_copy_ptr.asFunction<_dart_snd_ctl_elem_info_copy>();

  int snd_ctl_elem_info_get_type(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_type(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_type>>(
          'snd_ctl_elem_info_get_type');
  late final _dart_snd_ctl_elem_info_get_type _snd_ctl_elem_info_get_type =
      _snd_ctl_elem_info_get_type_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_type>();

  int snd_ctl_elem_info_is_readable(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_readable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_readable_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_readable>>(
          'snd_ctl_elem_info_is_readable');
  late final _dart_snd_ctl_elem_info_is_readable
      _snd_ctl_elem_info_is_readable = _snd_ctl_elem_info_is_readable_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_readable>();

  int snd_ctl_elem_info_is_writable(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_writable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_writable_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_writable>>(
          'snd_ctl_elem_info_is_writable');
  late final _dart_snd_ctl_elem_info_is_writable
      _snd_ctl_elem_info_is_writable = _snd_ctl_elem_info_is_writable_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_writable>();

  int snd_ctl_elem_info_is_volatile(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_volatile(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_volatile_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_volatile>>(
          'snd_ctl_elem_info_is_volatile');
  late final _dart_snd_ctl_elem_info_is_volatile
      _snd_ctl_elem_info_is_volatile = _snd_ctl_elem_info_is_volatile_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_volatile>();

  int snd_ctl_elem_info_is_inactive(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_inactive(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_inactive_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_inactive>>(
          'snd_ctl_elem_info_is_inactive');
  late final _dart_snd_ctl_elem_info_is_inactive
      _snd_ctl_elem_info_is_inactive = _snd_ctl_elem_info_is_inactive_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_inactive>();

  int snd_ctl_elem_info_is_locked(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_locked(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_locked_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_locked>>(
          'snd_ctl_elem_info_is_locked');
  late final _dart_snd_ctl_elem_info_is_locked _snd_ctl_elem_info_is_locked =
      _snd_ctl_elem_info_is_locked_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_locked>();

  int snd_ctl_elem_info_is_tlv_readable(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_tlv_readable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_tlv_readable_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_tlv_readable>>(
          'snd_ctl_elem_info_is_tlv_readable');
  late final _dart_snd_ctl_elem_info_is_tlv_readable
      _snd_ctl_elem_info_is_tlv_readable =
      _snd_ctl_elem_info_is_tlv_readable_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_tlv_readable>();

  int snd_ctl_elem_info_is_tlv_writable(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_tlv_writable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_tlv_writable_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_tlv_writable>>(
          'snd_ctl_elem_info_is_tlv_writable');
  late final _dart_snd_ctl_elem_info_is_tlv_writable
      _snd_ctl_elem_info_is_tlv_writable =
      _snd_ctl_elem_info_is_tlv_writable_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_tlv_writable>();

  int snd_ctl_elem_info_is_tlv_commandable(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_tlv_commandable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_tlv_commandable_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_tlv_commandable>>(
          'snd_ctl_elem_info_is_tlv_commandable');
  late final _dart_snd_ctl_elem_info_is_tlv_commandable
      _snd_ctl_elem_info_is_tlv_commandable =
      _snd_ctl_elem_info_is_tlv_commandable_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_tlv_commandable>();

  int snd_ctl_elem_info_is_owner(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_owner(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_owner_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_owner>>(
          'snd_ctl_elem_info_is_owner');
  late final _dart_snd_ctl_elem_info_is_owner _snd_ctl_elem_info_is_owner =
      _snd_ctl_elem_info_is_owner_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_owner>();

  int snd_ctl_elem_info_is_user(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_is_user(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_user_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_is_user>>(
          'snd_ctl_elem_info_is_user');
  late final _dart_snd_ctl_elem_info_is_user _snd_ctl_elem_info_is_user =
      _snd_ctl_elem_info_is_user_ptr
          .asFunction<_dart_snd_ctl_elem_info_is_user>();

  int snd_ctl_elem_info_get_owner(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_owner(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_owner_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_owner>>(
          'snd_ctl_elem_info_get_owner');
  late final _dart_snd_ctl_elem_info_get_owner _snd_ctl_elem_info_get_owner =
      _snd_ctl_elem_info_get_owner_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_owner>();

  int snd_ctl_elem_info_get_count(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_count(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_count>>(
          'snd_ctl_elem_info_get_count');
  late final _dart_snd_ctl_elem_info_get_count _snd_ctl_elem_info_get_count =
      _snd_ctl_elem_info_get_count_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_count>();

  int snd_ctl_elem_info_get_min(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_min(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_min_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_min>>(
          'snd_ctl_elem_info_get_min');
  late final _dart_snd_ctl_elem_info_get_min _snd_ctl_elem_info_get_min =
      _snd_ctl_elem_info_get_min_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_min>();

  int snd_ctl_elem_info_get_max(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_max(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_max_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_max>>(
          'snd_ctl_elem_info_get_max');
  late final _dart_snd_ctl_elem_info_get_max _snd_ctl_elem_info_get_max =
      _snd_ctl_elem_info_get_max_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_max>();

  int snd_ctl_elem_info_get_step(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_step(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_step_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_step>>(
          'snd_ctl_elem_info_get_step');
  late final _dart_snd_ctl_elem_info_get_step _snd_ctl_elem_info_get_step =
      _snd_ctl_elem_info_get_step_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_step>();

  int snd_ctl_elem_info_get_min64(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_min64(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_min64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_min64>>(
          'snd_ctl_elem_info_get_min64');
  late final _dart_snd_ctl_elem_info_get_min64 _snd_ctl_elem_info_get_min64 =
      _snd_ctl_elem_info_get_min64_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_min64>();

  int snd_ctl_elem_info_get_max64(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_max64(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_max64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_max64>>(
          'snd_ctl_elem_info_get_max64');
  late final _dart_snd_ctl_elem_info_get_max64 _snd_ctl_elem_info_get_max64 =
      _snd_ctl_elem_info_get_max64_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_max64>();

  int snd_ctl_elem_info_get_step64(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_step64(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_step64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_step64>>(
          'snd_ctl_elem_info_get_step64');
  late final _dart_snd_ctl_elem_info_get_step64 _snd_ctl_elem_info_get_step64 =
      _snd_ctl_elem_info_get_step64_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_step64>();

  int snd_ctl_elem_info_get_items(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_items(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_items_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_items>>(
          'snd_ctl_elem_info_get_items');
  late final _dart_snd_ctl_elem_info_get_items _snd_ctl_elem_info_get_items =
      _snd_ctl_elem_info_get_items_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_items>();

  void snd_ctl_elem_info_set_item(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_item(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_item_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_item>>(
          'snd_ctl_elem_info_set_item');
  late final _dart_snd_ctl_elem_info_set_item _snd_ctl_elem_info_set_item =
      _snd_ctl_elem_info_set_item_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_item>();

  ffi.Pointer<ffi.Int8> snd_ctl_elem_info_get_item_name(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_item_name(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_item_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_item_name>>(
          'snd_ctl_elem_info_get_item_name');
  late final _dart_snd_ctl_elem_info_get_item_name
      _snd_ctl_elem_info_get_item_name = _snd_ctl_elem_info_get_item_name_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_item_name>();

  int snd_ctl_elem_info_get_dimensions(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_dimensions(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_dimensions_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_dimensions>>(
          'snd_ctl_elem_info_get_dimensions');
  late final _dart_snd_ctl_elem_info_get_dimensions
      _snd_ctl_elem_info_get_dimensions = _snd_ctl_elem_info_get_dimensions_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_dimensions>();

  int snd_ctl_elem_info_get_dimension(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_info_get_dimension(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_info_get_dimension_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_dimension>>(
          'snd_ctl_elem_info_get_dimension');
  late final _dart_snd_ctl_elem_info_get_dimension
      _snd_ctl_elem_info_get_dimension = _snd_ctl_elem_info_get_dimension_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_dimension>();

  int snd_ctl_elem_info_set_dimension(
    ffi.Pointer<snd_ctl_elem_info_> info,
    ffi.Pointer<ffi.Int32> dimension,
  ) {
    return _snd_ctl_elem_info_set_dimension(
      info,
      dimension,
    );
  }

  late final _snd_ctl_elem_info_set_dimension_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_dimension>>(
          'snd_ctl_elem_info_set_dimension');
  late final _dart_snd_ctl_elem_info_set_dimension
      _snd_ctl_elem_info_set_dimension = _snd_ctl_elem_info_set_dimension_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_dimension>();

  void snd_ctl_elem_info_get_id(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    ffi.Pointer<snd_ctl_elem_id_> ptr,
  ) {
    return _snd_ctl_elem_info_get_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_info_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_id>>(
          'snd_ctl_elem_info_get_id');
  late final _dart_snd_ctl_elem_info_get_id _snd_ctl_elem_info_get_id =
      _snd_ctl_elem_info_get_id_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_id>();

  int snd_ctl_elem_info_get_numid(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_numid(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_numid>>(
          'snd_ctl_elem_info_get_numid');
  late final _dart_snd_ctl_elem_info_get_numid _snd_ctl_elem_info_get_numid =
      _snd_ctl_elem_info_get_numid_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_numid>();

  int snd_ctl_elem_info_get_interface(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_interface(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_interface>>(
          'snd_ctl_elem_info_get_interface');
  late final _dart_snd_ctl_elem_info_get_interface
      _snd_ctl_elem_info_get_interface = _snd_ctl_elem_info_get_interface_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_interface>();

  int snd_ctl_elem_info_get_device(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_device(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_device>>(
          'snd_ctl_elem_info_get_device');
  late final _dart_snd_ctl_elem_info_get_device _snd_ctl_elem_info_get_device =
      _snd_ctl_elem_info_get_device_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_device>();

  int snd_ctl_elem_info_get_subdevice(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_subdevice(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_subdevice>>(
          'snd_ctl_elem_info_get_subdevice');
  late final _dart_snd_ctl_elem_info_get_subdevice
      _snd_ctl_elem_info_get_subdevice = _snd_ctl_elem_info_get_subdevice_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_subdevice>();

  ffi.Pointer<ffi.Int8> snd_ctl_elem_info_get_name(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_name(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_name>>(
          'snd_ctl_elem_info_get_name');
  late final _dart_snd_ctl_elem_info_get_name _snd_ctl_elem_info_get_name =
      _snd_ctl_elem_info_get_name_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_name>();

  int snd_ctl_elem_info_get_index(
    ffi.Pointer<snd_ctl_elem_info_> obj,
  ) {
    return _snd_ctl_elem_info_get_index(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_get_index>>(
          'snd_ctl_elem_info_get_index');
  late final _dart_snd_ctl_elem_info_get_index _snd_ctl_elem_info_get_index =
      _snd_ctl_elem_info_get_index_ptr
          .asFunction<_dart_snd_ctl_elem_info_get_index>();

  void snd_ctl_elem_info_set_id(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    ffi.Pointer<snd_ctl_elem_id_> ptr,
  ) {
    return _snd_ctl_elem_info_set_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_info_set_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_id>>(
          'snd_ctl_elem_info_set_id');
  late final _dart_snd_ctl_elem_info_set_id _snd_ctl_elem_info_set_id =
      _snd_ctl_elem_info_set_id_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_id>();

  void snd_ctl_elem_info_set_numid(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_numid(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_numid>>(
          'snd_ctl_elem_info_set_numid');
  late final _dart_snd_ctl_elem_info_set_numid _snd_ctl_elem_info_set_numid =
      _snd_ctl_elem_info_set_numid_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_numid>();

  void snd_ctl_elem_info_set_interface(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_interface(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_interface>>(
          'snd_ctl_elem_info_set_interface');
  late final _dart_snd_ctl_elem_info_set_interface
      _snd_ctl_elem_info_set_interface = _snd_ctl_elem_info_set_interface_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_interface>();

  void snd_ctl_elem_info_set_device(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_device(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_device>>(
          'snd_ctl_elem_info_set_device');
  late final _dart_snd_ctl_elem_info_set_device _snd_ctl_elem_info_set_device =
      _snd_ctl_elem_info_set_device_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_device>();

  void snd_ctl_elem_info_set_subdevice(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_subdevice>>(
          'snd_ctl_elem_info_set_subdevice');
  late final _dart_snd_ctl_elem_info_set_subdevice
      _snd_ctl_elem_info_set_subdevice = _snd_ctl_elem_info_set_subdevice_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_subdevice>();

  void snd_ctl_elem_info_set_name(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _snd_ctl_elem_info_set_name(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_name>>(
          'snd_ctl_elem_info_set_name');
  late final _dart_snd_ctl_elem_info_set_name _snd_ctl_elem_info_set_name =
      _snd_ctl_elem_info_set_name_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_name>();

  void snd_ctl_elem_info_set_index(
    ffi.Pointer<snd_ctl_elem_info_> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_index(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_info_set_index>>(
          'snd_ctl_elem_info_set_index');
  late final _dart_snd_ctl_elem_info_set_index _snd_ctl_elem_info_set_index =
      _snd_ctl_elem_info_set_index_ptr
          .asFunction<_dart_snd_ctl_elem_info_set_index>();

  int snd_ctl_add_integer_elem_set(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_info_> info,
    int element_count,
    int member_count,
    int min,
    int max,
    int step,
  ) {
    return _snd_ctl_add_integer_elem_set(
      ctl,
      info,
      element_count,
      member_count,
      min,
      max,
      step,
    );
  }

  late final _snd_ctl_add_integer_elem_set_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_add_integer_elem_set>>(
          'snd_ctl_add_integer_elem_set');
  late final _dart_snd_ctl_add_integer_elem_set _snd_ctl_add_integer_elem_set =
      _snd_ctl_add_integer_elem_set_ptr
          .asFunction<_dart_snd_ctl_add_integer_elem_set>();

  int snd_ctl_add_integer64_elem_set(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_info_> info,
    int element_count,
    int member_count,
    int min,
    int max,
    int step,
  ) {
    return _snd_ctl_add_integer64_elem_set(
      ctl,
      info,
      element_count,
      member_count,
      min,
      max,
      step,
    );
  }

  late final _snd_ctl_add_integer64_elem_set_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_add_integer64_elem_set>>(
          'snd_ctl_add_integer64_elem_set');
  late final _dart_snd_ctl_add_integer64_elem_set
      _snd_ctl_add_integer64_elem_set = _snd_ctl_add_integer64_elem_set_ptr
          .asFunction<_dart_snd_ctl_add_integer64_elem_set>();

  int snd_ctl_add_boolean_elem_set(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_info_> info,
    int element_count,
    int member_count,
  ) {
    return _snd_ctl_add_boolean_elem_set(
      ctl,
      info,
      element_count,
      member_count,
    );
  }

  late final _snd_ctl_add_boolean_elem_set_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_add_boolean_elem_set>>(
          'snd_ctl_add_boolean_elem_set');
  late final _dart_snd_ctl_add_boolean_elem_set _snd_ctl_add_boolean_elem_set =
      _snd_ctl_add_boolean_elem_set_ptr
          .asFunction<_dart_snd_ctl_add_boolean_elem_set>();

  int snd_ctl_add_enumerated_elem_set(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_info_> info,
    int element_count,
    int member_count,
    int items,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> labels,
  ) {
    return _snd_ctl_add_enumerated_elem_set(
      ctl,
      info,
      element_count,
      member_count,
      items,
      labels,
    );
  }

  late final _snd_ctl_add_enumerated_elem_set_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_add_enumerated_elem_set>>(
          'snd_ctl_add_enumerated_elem_set');
  late final _dart_snd_ctl_add_enumerated_elem_set
      _snd_ctl_add_enumerated_elem_set = _snd_ctl_add_enumerated_elem_set_ptr
          .asFunction<_dart_snd_ctl_add_enumerated_elem_set>();

  int snd_ctl_add_bytes_elem_set(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_info_> info,
    int element_count,
    int member_count,
  ) {
    return _snd_ctl_add_bytes_elem_set(
      ctl,
      info,
      element_count,
      member_count,
    );
  }

  late final _snd_ctl_add_bytes_elem_set_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_add_bytes_elem_set>>(
          'snd_ctl_add_bytes_elem_set');
  late final _dart_snd_ctl_add_bytes_elem_set _snd_ctl_add_bytes_elem_set =
      _snd_ctl_add_bytes_elem_set_ptr
          .asFunction<_dart_snd_ctl_add_bytes_elem_set>();

  int snd_ctl_elem_add_integer(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    int count,
    int imin,
    int imax,
    int istep,
  ) {
    return _snd_ctl_elem_add_integer(
      ctl,
      id,
      count,
      imin,
      imax,
      istep,
    );
  }

  late final _snd_ctl_elem_add_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_add_integer>>(
          'snd_ctl_elem_add_integer');
  late final _dart_snd_ctl_elem_add_integer _snd_ctl_elem_add_integer =
      _snd_ctl_elem_add_integer_ptr
          .asFunction<_dart_snd_ctl_elem_add_integer>();

  int snd_ctl_elem_add_integer64(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    int count,
    int imin,
    int imax,
    int istep,
  ) {
    return _snd_ctl_elem_add_integer64(
      ctl,
      id,
      count,
      imin,
      imax,
      istep,
    );
  }

  late final _snd_ctl_elem_add_integer64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_add_integer64>>(
          'snd_ctl_elem_add_integer64');
  late final _dart_snd_ctl_elem_add_integer64 _snd_ctl_elem_add_integer64 =
      _snd_ctl_elem_add_integer64_ptr
          .asFunction<_dart_snd_ctl_elem_add_integer64>();

  int snd_ctl_elem_add_boolean(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    int count,
  ) {
    return _snd_ctl_elem_add_boolean(
      ctl,
      id,
      count,
    );
  }

  late final _snd_ctl_elem_add_boolean_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_add_boolean>>(
          'snd_ctl_elem_add_boolean');
  late final _dart_snd_ctl_elem_add_boolean _snd_ctl_elem_add_boolean =
      _snd_ctl_elem_add_boolean_ptr
          .asFunction<_dart_snd_ctl_elem_add_boolean>();

  int snd_ctl_elem_add_enumerated(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    int count,
    int items,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> names,
  ) {
    return _snd_ctl_elem_add_enumerated(
      ctl,
      id,
      count,
      items,
      names,
    );
  }

  late final _snd_ctl_elem_add_enumerated_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_add_enumerated>>(
          'snd_ctl_elem_add_enumerated');
  late final _dart_snd_ctl_elem_add_enumerated _snd_ctl_elem_add_enumerated =
      _snd_ctl_elem_add_enumerated_ptr
          .asFunction<_dart_snd_ctl_elem_add_enumerated>();

  int snd_ctl_elem_add_iec958(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
  ) {
    return _snd_ctl_elem_add_iec958(
      ctl,
      id,
    );
  }

  late final _snd_ctl_elem_add_iec958_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_add_iec958>>(
          'snd_ctl_elem_add_iec958');
  late final _dart_snd_ctl_elem_add_iec958 _snd_ctl_elem_add_iec958 =
      _snd_ctl_elem_add_iec958_ptr.asFunction<_dart_snd_ctl_elem_add_iec958>();

  int snd_ctl_elem_remove(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
  ) {
    return _snd_ctl_elem_remove(
      ctl,
      id,
    );
  }

  late final _snd_ctl_elem_remove_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_remove>>(
          'snd_ctl_elem_remove');
  late final _dart_snd_ctl_elem_remove _snd_ctl_elem_remove =
      _snd_ctl_elem_remove_ptr.asFunction<_dart_snd_ctl_elem_remove>();

  int snd_ctl_elem_value_sizeof() {
    return _snd_ctl_elem_value_sizeof();
  }

  late final _snd_ctl_elem_value_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_sizeof>>(
          'snd_ctl_elem_value_sizeof');
  late final _dart_snd_ctl_elem_value_sizeof _snd_ctl_elem_value_sizeof =
      _snd_ctl_elem_value_sizeof_ptr
          .asFunction<_dart_snd_ctl_elem_value_sizeof>();

  int snd_ctl_elem_value_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_elem_value_>> ptr,
  ) {
    return _snd_ctl_elem_value_malloc(
      ptr,
    );
  }

  late final _snd_ctl_elem_value_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_malloc>>(
          'snd_ctl_elem_value_malloc');
  late final _dart_snd_ctl_elem_value_malloc _snd_ctl_elem_value_malloc =
      _snd_ctl_elem_value_malloc_ptr
          .asFunction<_dart_snd_ctl_elem_value_malloc>();

  void snd_ctl_elem_value_free(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_free(
      obj,
    );
  }

  late final _snd_ctl_elem_value_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_free>>(
          'snd_ctl_elem_value_free');
  late final _dart_snd_ctl_elem_value_free _snd_ctl_elem_value_free =
      _snd_ctl_elem_value_free_ptr.asFunction<_dart_snd_ctl_elem_value_free>();

  void snd_ctl_elem_value_clear(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_clear(
      obj,
    );
  }

  late final _snd_ctl_elem_value_clear_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_clear>>(
          'snd_ctl_elem_value_clear');
  late final _dart_snd_ctl_elem_value_clear _snd_ctl_elem_value_clear =
      _snd_ctl_elem_value_clear_ptr
          .asFunction<_dart_snd_ctl_elem_value_clear>();

  void snd_ctl_elem_value_copy(
    ffi.Pointer<snd_ctl_elem_value_> dst,
    ffi.Pointer<snd_ctl_elem_value_> src,
  ) {
    return _snd_ctl_elem_value_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_elem_value_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_copy>>(
          'snd_ctl_elem_value_copy');
  late final _dart_snd_ctl_elem_value_copy _snd_ctl_elem_value_copy =
      _snd_ctl_elem_value_copy_ptr.asFunction<_dart_snd_ctl_elem_value_copy>();

  int snd_ctl_elem_value_compare(
    ffi.Pointer<snd_ctl_elem_value_> left,
    ffi.Pointer<snd_ctl_elem_value_> right,
  ) {
    return _snd_ctl_elem_value_compare(
      left,
      right,
    );
  }

  late final _snd_ctl_elem_value_compare_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_compare>>(
          'snd_ctl_elem_value_compare');
  late final _dart_snd_ctl_elem_value_compare _snd_ctl_elem_value_compare =
      _snd_ctl_elem_value_compare_ptr
          .asFunction<_dart_snd_ctl_elem_value_compare>();

  void snd_ctl_elem_value_get_id(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    ffi.Pointer<snd_ctl_elem_id_> ptr,
  ) {
    return _snd_ctl_elem_value_get_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_value_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_id>>(
          'snd_ctl_elem_value_get_id');
  late final _dart_snd_ctl_elem_value_get_id _snd_ctl_elem_value_get_id =
      _snd_ctl_elem_value_get_id_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_id>();

  int snd_ctl_elem_value_get_numid(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_get_numid(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_numid>>(
          'snd_ctl_elem_value_get_numid');
  late final _dart_snd_ctl_elem_value_get_numid _snd_ctl_elem_value_get_numid =
      _snd_ctl_elem_value_get_numid_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_numid>();

  int snd_ctl_elem_value_get_interface(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_get_interface(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_interface>>(
          'snd_ctl_elem_value_get_interface');
  late final _dart_snd_ctl_elem_value_get_interface
      _snd_ctl_elem_value_get_interface = _snd_ctl_elem_value_get_interface_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_interface>();

  int snd_ctl_elem_value_get_device(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_get_device(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_device>>(
          'snd_ctl_elem_value_get_device');
  late final _dart_snd_ctl_elem_value_get_device
      _snd_ctl_elem_value_get_device = _snd_ctl_elem_value_get_device_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_device>();

  int snd_ctl_elem_value_get_subdevice(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_get_subdevice(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_subdevice>>(
          'snd_ctl_elem_value_get_subdevice');
  late final _dart_snd_ctl_elem_value_get_subdevice
      _snd_ctl_elem_value_get_subdevice = _snd_ctl_elem_value_get_subdevice_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_subdevice>();

  ffi.Pointer<ffi.Int8> snd_ctl_elem_value_get_name(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_get_name(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_name>>(
          'snd_ctl_elem_value_get_name');
  late final _dart_snd_ctl_elem_value_get_name _snd_ctl_elem_value_get_name =
      _snd_ctl_elem_value_get_name_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_name>();

  int snd_ctl_elem_value_get_index(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_get_index(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_index>>(
          'snd_ctl_elem_value_get_index');
  late final _dart_snd_ctl_elem_value_get_index _snd_ctl_elem_value_get_index =
      _snd_ctl_elem_value_get_index_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_index>();

  void snd_ctl_elem_value_set_id(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    ffi.Pointer<snd_ctl_elem_id_> ptr,
  ) {
    return _snd_ctl_elem_value_set_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_value_set_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_id>>(
          'snd_ctl_elem_value_set_id');
  late final _dart_snd_ctl_elem_value_set_id _snd_ctl_elem_value_set_id =
      _snd_ctl_elem_value_set_id_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_id>();

  void snd_ctl_elem_value_set_numid(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_numid(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_numid>>(
          'snd_ctl_elem_value_set_numid');
  late final _dart_snd_ctl_elem_value_set_numid _snd_ctl_elem_value_set_numid =
      _snd_ctl_elem_value_set_numid_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_numid>();

  void snd_ctl_elem_value_set_interface(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_interface(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_interface>>(
          'snd_ctl_elem_value_set_interface');
  late final _dart_snd_ctl_elem_value_set_interface
      _snd_ctl_elem_value_set_interface = _snd_ctl_elem_value_set_interface_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_interface>();

  void snd_ctl_elem_value_set_device(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_device(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_device>>(
          'snd_ctl_elem_value_set_device');
  late final _dart_snd_ctl_elem_value_set_device
      _snd_ctl_elem_value_set_device = _snd_ctl_elem_value_set_device_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_device>();

  void snd_ctl_elem_value_set_subdevice(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_subdevice>>(
          'snd_ctl_elem_value_set_subdevice');
  late final _dart_snd_ctl_elem_value_set_subdevice
      _snd_ctl_elem_value_set_subdevice = _snd_ctl_elem_value_set_subdevice_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_subdevice>();

  void snd_ctl_elem_value_set_name(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _snd_ctl_elem_value_set_name(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_name>>(
          'snd_ctl_elem_value_set_name');
  late final _dart_snd_ctl_elem_value_set_name _snd_ctl_elem_value_set_name =
      _snd_ctl_elem_value_set_name_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_name>();

  void snd_ctl_elem_value_set_index(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_index(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_index>>(
          'snd_ctl_elem_value_set_index');
  late final _dart_snd_ctl_elem_value_set_index _snd_ctl_elem_value_set_index =
      _snd_ctl_elem_value_set_index_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_index>();

  int snd_ctl_elem_value_get_boolean(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_boolean(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_boolean_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_boolean>>(
          'snd_ctl_elem_value_get_boolean');
  late final _dart_snd_ctl_elem_value_get_boolean
      _snd_ctl_elem_value_get_boolean = _snd_ctl_elem_value_get_boolean_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_boolean>();

  int snd_ctl_elem_value_get_integer(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_integer(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_integer>>(
          'snd_ctl_elem_value_get_integer');
  late final _dart_snd_ctl_elem_value_get_integer
      _snd_ctl_elem_value_get_integer = _snd_ctl_elem_value_get_integer_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_integer>();

  int snd_ctl_elem_value_get_integer64(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_integer64(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_integer64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_integer64>>(
          'snd_ctl_elem_value_get_integer64');
  late final _dart_snd_ctl_elem_value_get_integer64
      _snd_ctl_elem_value_get_integer64 = _snd_ctl_elem_value_get_integer64_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_integer64>();

  int snd_ctl_elem_value_get_enumerated(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_enumerated(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_enumerated_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_enumerated>>(
          'snd_ctl_elem_value_get_enumerated');
  late final _dart_snd_ctl_elem_value_get_enumerated
      _snd_ctl_elem_value_get_enumerated =
      _snd_ctl_elem_value_get_enumerated_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_enumerated>();

  int snd_ctl_elem_value_get_byte(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_byte(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_byte_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_byte>>(
          'snd_ctl_elem_value_get_byte');
  late final _dart_snd_ctl_elem_value_get_byte _snd_ctl_elem_value_get_byte =
      _snd_ctl_elem_value_get_byte_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_byte>();

  void snd_ctl_elem_value_set_boolean(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_boolean(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_boolean_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_boolean>>(
          'snd_ctl_elem_value_set_boolean');
  late final _dart_snd_ctl_elem_value_set_boolean
      _snd_ctl_elem_value_set_boolean = _snd_ctl_elem_value_set_boolean_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_boolean>();

  void snd_ctl_elem_value_set_integer(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_integer(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_integer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_integer>>(
          'snd_ctl_elem_value_set_integer');
  late final _dart_snd_ctl_elem_value_set_integer
      _snd_ctl_elem_value_set_integer = _snd_ctl_elem_value_set_integer_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_integer>();

  void snd_ctl_elem_value_set_integer64(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_integer64(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_integer64_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_integer64>>(
          'snd_ctl_elem_value_set_integer64');
  late final _dart_snd_ctl_elem_value_set_integer64
      _snd_ctl_elem_value_set_integer64 = _snd_ctl_elem_value_set_integer64_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_integer64>();

  void snd_ctl_elem_value_set_enumerated(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_enumerated(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_enumerated_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_enumerated>>(
          'snd_ctl_elem_value_set_enumerated');
  late final _dart_snd_ctl_elem_value_set_enumerated
      _snd_ctl_elem_value_set_enumerated =
      _snd_ctl_elem_value_set_enumerated_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_enumerated>();

  void snd_ctl_elem_value_set_byte(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_byte(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_byte_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_byte>>(
          'snd_ctl_elem_value_set_byte');
  late final _dart_snd_ctl_elem_value_set_byte _snd_ctl_elem_value_set_byte =
      _snd_ctl_elem_value_set_byte_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_byte>();

  void snd_ctl_elem_set_bytes(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return _snd_ctl_elem_set_bytes(
      obj,
      data,
      size,
    );
  }

  late final _snd_ctl_elem_set_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_set_bytes>>(
          'snd_ctl_elem_set_bytes');
  late final _dart_snd_ctl_elem_set_bytes _snd_ctl_elem_set_bytes =
      _snd_ctl_elem_set_bytes_ptr.asFunction<_dart_snd_ctl_elem_set_bytes>();

  ffi.Pointer<ffi.Void> snd_ctl_elem_value_get_bytes(
    ffi.Pointer<snd_ctl_elem_value_> obj,
  ) {
    return _snd_ctl_elem_value_get_bytes(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_bytes>>(
          'snd_ctl_elem_value_get_bytes');
  late final _dart_snd_ctl_elem_value_get_bytes _snd_ctl_elem_value_get_bytes =
      _snd_ctl_elem_value_get_bytes_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_bytes>();

  void snd_ctl_elem_value_get_iec958(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    ffi.Pointer<snd_aes_iec958_t> ptr,
  ) {
    return _snd_ctl_elem_value_get_iec958(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_value_get_iec958_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_get_iec958>>(
          'snd_ctl_elem_value_get_iec958');
  late final _dart_snd_ctl_elem_value_get_iec958
      _snd_ctl_elem_value_get_iec958 = _snd_ctl_elem_value_get_iec958_ptr
          .asFunction<_dart_snd_ctl_elem_value_get_iec958>();

  void snd_ctl_elem_value_set_iec958(
    ffi.Pointer<snd_ctl_elem_value_> obj,
    ffi.Pointer<snd_aes_iec958_t> ptr,
  ) {
    return _snd_ctl_elem_value_set_iec958(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_value_set_iec958_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_elem_value_set_iec958>>(
          'snd_ctl_elem_value_set_iec958');
  late final _dart_snd_ctl_elem_value_set_iec958
      _snd_ctl_elem_value_set_iec958 = _snd_ctl_elem_value_set_iec958_ptr
          .asFunction<_dart_snd_ctl_elem_value_set_iec958>();

  int snd_tlv_parse_dB_info(
    ffi.Pointer<ffi.Uint32> tlv,
    int tlv_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint32>> db_tlvp,
  ) {
    return _snd_tlv_parse_dB_info(
      tlv,
      tlv_size,
      db_tlvp,
    );
  }

  late final _snd_tlv_parse_dB_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_tlv_parse_dB_info>>(
          'snd_tlv_parse_dB_info');
  late final _dart_snd_tlv_parse_dB_info _snd_tlv_parse_dB_info =
      _snd_tlv_parse_dB_info_ptr.asFunction<_dart_snd_tlv_parse_dB_info>();

  int snd_tlv_get_dB_range(
    ffi.Pointer<ffi.Uint32> tlv,
    int rangemin,
    int rangemax,
    ffi.Pointer<ffi.Int64> min,
    ffi.Pointer<ffi.Int64> max,
  ) {
    return _snd_tlv_get_dB_range(
      tlv,
      rangemin,
      rangemax,
      min,
      max,
    );
  }

  late final _snd_tlv_get_dB_range_ptr =
      _lookup<ffi.NativeFunction<_c_snd_tlv_get_dB_range>>(
          'snd_tlv_get_dB_range');
  late final _dart_snd_tlv_get_dB_range _snd_tlv_get_dB_range =
      _snd_tlv_get_dB_range_ptr.asFunction<_dart_snd_tlv_get_dB_range>();

  int snd_tlv_convert_to_dB(
    ffi.Pointer<ffi.Uint32> tlv,
    int rangemin,
    int rangemax,
    int volume,
    ffi.Pointer<ffi.Int64> db_gain,
  ) {
    return _snd_tlv_convert_to_dB(
      tlv,
      rangemin,
      rangemax,
      volume,
      db_gain,
    );
  }

  late final _snd_tlv_convert_to_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_tlv_convert_to_dB>>(
          'snd_tlv_convert_to_dB');
  late final _dart_snd_tlv_convert_to_dB _snd_tlv_convert_to_dB =
      _snd_tlv_convert_to_dB_ptr.asFunction<_dart_snd_tlv_convert_to_dB>();

  int snd_tlv_convert_from_dB(
    ffi.Pointer<ffi.Uint32> tlv,
    int rangemin,
    int rangemax,
    int db_gain,
    ffi.Pointer<ffi.Int64> value,
    int xdir,
  ) {
    return _snd_tlv_convert_from_dB(
      tlv,
      rangemin,
      rangemax,
      db_gain,
      value,
      xdir,
    );
  }

  late final _snd_tlv_convert_from_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_tlv_convert_from_dB>>(
          'snd_tlv_convert_from_dB');
  late final _dart_snd_tlv_convert_from_dB _snd_tlv_convert_from_dB =
      _snd_tlv_convert_from_dB_ptr.asFunction<_dart_snd_tlv_convert_from_dB>();

  int snd_ctl_get_dB_range(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    ffi.Pointer<ffi.Int64> min,
    ffi.Pointer<ffi.Int64> max,
  ) {
    return _snd_ctl_get_dB_range(
      ctl,
      id,
      min,
      max,
    );
  }

  late final _snd_ctl_get_dB_range_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_get_dB_range>>(
          'snd_ctl_get_dB_range');
  late final _dart_snd_ctl_get_dB_range _snd_ctl_get_dB_range =
      _snd_ctl_get_dB_range_ptr.asFunction<_dart_snd_ctl_get_dB_range>();

  int snd_ctl_convert_to_dB(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    int volume,
    ffi.Pointer<ffi.Int64> db_gain,
  ) {
    return _snd_ctl_convert_to_dB(
      ctl,
      id,
      volume,
      db_gain,
    );
  }

  late final _snd_ctl_convert_to_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_convert_to_dB>>(
          'snd_ctl_convert_to_dB');
  late final _dart_snd_ctl_convert_to_dB _snd_ctl_convert_to_dB =
      _snd_ctl_convert_to_dB_ptr.asFunction<_dart_snd_ctl_convert_to_dB>();

  int snd_ctl_convert_from_dB(
    ffi.Pointer<snd_ctl_> ctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
    int db_gain,
    ffi.Pointer<ffi.Int64> value,
    int xdir,
  ) {
    return _snd_ctl_convert_from_dB(
      ctl,
      id,
      db_gain,
      value,
      xdir,
    );
  }

  late final _snd_ctl_convert_from_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_ctl_convert_from_dB>>(
          'snd_ctl_convert_from_dB');
  late final _dart_snd_ctl_convert_from_dB _snd_ctl_convert_from_dB =
      _snd_ctl_convert_from_dB_ptr.asFunction<_dart_snd_ctl_convert_from_dB>();

  int snd_hctl_compare_fast(
    ffi.Pointer<snd_hctl_elem_> c1,
    ffi.Pointer<snd_hctl_elem_> c2,
  ) {
    return _snd_hctl_compare_fast(
      c1,
      c2,
    );
  }

  late final _snd_hctl_compare_fast_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_compare_fast>>(
          'snd_hctl_compare_fast');
  late final _dart_snd_hctl_compare_fast _snd_hctl_compare_fast =
      _snd_hctl_compare_fast_ptr.asFunction<_dart_snd_hctl_compare_fast>();

  int snd_hctl_open(
    ffi.Pointer<ffi.Pointer<snd_hctl_>> hctl,
    ffi.Pointer<ffi.Int8> name,
    int mode,
  ) {
    return _snd_hctl_open(
      hctl,
      name,
      mode,
    );
  }

  late final _snd_hctl_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_open>>('snd_hctl_open');
  late final _dart_snd_hctl_open _snd_hctl_open =
      _snd_hctl_open_ptr.asFunction<_dart_snd_hctl_open>();

  int snd_hctl_open_ctl(
    ffi.Pointer<ffi.Pointer<snd_hctl_>> hctlp,
    ffi.Pointer<snd_ctl_> ctl,
  ) {
    return _snd_hctl_open_ctl(
      hctlp,
      ctl,
    );
  }

  late final _snd_hctl_open_ctl_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_open_ctl>>('snd_hctl_open_ctl');
  late final _dart_snd_hctl_open_ctl _snd_hctl_open_ctl =
      _snd_hctl_open_ctl_ptr.asFunction<_dart_snd_hctl_open_ctl>();

  int snd_hctl_close(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_close(
      hctl,
    );
  }

  late final _snd_hctl_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_close>>('snd_hctl_close');
  late final _dart_snd_hctl_close _snd_hctl_close =
      _snd_hctl_close_ptr.asFunction<_dart_snd_hctl_close>();

  int snd_hctl_nonblock(
    ffi.Pointer<snd_hctl_> hctl,
    int nonblock,
  ) {
    return _snd_hctl_nonblock(
      hctl,
      nonblock,
    );
  }

  late final _snd_hctl_nonblock_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_nonblock>>('snd_hctl_nonblock');
  late final _dart_snd_hctl_nonblock _snd_hctl_nonblock =
      _snd_hctl_nonblock_ptr.asFunction<_dart_snd_hctl_nonblock>();

  int snd_hctl_poll_descriptors_count(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_poll_descriptors_count(
      hctl,
    );
  }

  late final _snd_hctl_poll_descriptors_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_poll_descriptors_count>>(
          'snd_hctl_poll_descriptors_count');
  late final _dart_snd_hctl_poll_descriptors_count
      _snd_hctl_poll_descriptors_count = _snd_hctl_poll_descriptors_count_ptr
          .asFunction<_dart_snd_hctl_poll_descriptors_count>();

  int snd_hctl_poll_descriptors(
    ffi.Pointer<snd_hctl_> hctl,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_hctl_poll_descriptors(
      hctl,
      pfds,
      space,
    );
  }

  late final _snd_hctl_poll_descriptors_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_poll_descriptors>>(
          'snd_hctl_poll_descriptors');
  late final _dart_snd_hctl_poll_descriptors _snd_hctl_poll_descriptors =
      _snd_hctl_poll_descriptors_ptr
          .asFunction<_dart_snd_hctl_poll_descriptors>();

  int snd_hctl_poll_descriptors_revents(
    ffi.Pointer<snd_hctl_> ctl,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.Uint16> revents,
  ) {
    return _snd_hctl_poll_descriptors_revents(
      ctl,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_hctl_poll_descriptors_revents_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_poll_descriptors_revents>>(
          'snd_hctl_poll_descriptors_revents');
  late final _dart_snd_hctl_poll_descriptors_revents
      _snd_hctl_poll_descriptors_revents =
      _snd_hctl_poll_descriptors_revents_ptr
          .asFunction<_dart_snd_hctl_poll_descriptors_revents>();

  int snd_hctl_get_count(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_get_count(
      hctl,
    );
  }

  late final _snd_hctl_get_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_get_count>>('snd_hctl_get_count');
  late final _dart_snd_hctl_get_count _snd_hctl_get_count =
      _snd_hctl_get_count_ptr.asFunction<_dart_snd_hctl_get_count>();

  int snd_hctl_set_compare(
    ffi.Pointer<snd_hctl_> hctl,
    ffi.Pointer<ffi.NativeFunction<snd_hctl_compare_t>> hsort,
  ) {
    return _snd_hctl_set_compare(
      hctl,
      hsort,
    );
  }

  late final _snd_hctl_set_compare_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_set_compare>>(
          'snd_hctl_set_compare');
  late final _dart_snd_hctl_set_compare _snd_hctl_set_compare =
      _snd_hctl_set_compare_ptr.asFunction<_dart_snd_hctl_set_compare>();

  ffi.Pointer<snd_hctl_elem_> snd_hctl_first_elem(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_first_elem(
      hctl,
    );
  }

  late final _snd_hctl_first_elem_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_first_elem>>(
          'snd_hctl_first_elem');
  late final _dart_snd_hctl_first_elem _snd_hctl_first_elem =
      _snd_hctl_first_elem_ptr.asFunction<_dart_snd_hctl_first_elem>();

  ffi.Pointer<snd_hctl_elem_> snd_hctl_last_elem(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_last_elem(
      hctl,
    );
  }

  late final _snd_hctl_last_elem_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_last_elem>>('snd_hctl_last_elem');
  late final _dart_snd_hctl_last_elem _snd_hctl_last_elem =
      _snd_hctl_last_elem_ptr.asFunction<_dart_snd_hctl_last_elem>();

  ffi.Pointer<snd_hctl_elem_> snd_hctl_find_elem(
    ffi.Pointer<snd_hctl_> hctl,
    ffi.Pointer<snd_ctl_elem_id_> id,
  ) {
    return _snd_hctl_find_elem(
      hctl,
      id,
    );
  }

  late final _snd_hctl_find_elem_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_find_elem>>('snd_hctl_find_elem');
  late final _dart_snd_hctl_find_elem _snd_hctl_find_elem =
      _snd_hctl_find_elem_ptr.asFunction<_dart_snd_hctl_find_elem>();

  void snd_hctl_set_callback(
    ffi.Pointer<snd_hctl_> hctl,
    ffi.Pointer<ffi.NativeFunction<snd_hctl_callback_t>> callback,
  ) {
    return _snd_hctl_set_callback(
      hctl,
      callback,
    );
  }

  late final _snd_hctl_set_callback_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_set_callback>>(
          'snd_hctl_set_callback');
  late final _dart_snd_hctl_set_callback _snd_hctl_set_callback =
      _snd_hctl_set_callback_ptr.asFunction<_dart_snd_hctl_set_callback>();

  void snd_hctl_set_callback_private(
    ffi.Pointer<snd_hctl_> hctl,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _snd_hctl_set_callback_private(
      hctl,
      data,
    );
  }

  late final _snd_hctl_set_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_set_callback_private>>(
          'snd_hctl_set_callback_private');
  late final _dart_snd_hctl_set_callback_private
      _snd_hctl_set_callback_private = _snd_hctl_set_callback_private_ptr
          .asFunction<_dart_snd_hctl_set_callback_private>();

  ffi.Pointer<ffi.Void> snd_hctl_get_callback_private(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_get_callback_private(
      hctl,
    );
  }

  late final _snd_hctl_get_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_get_callback_private>>(
          'snd_hctl_get_callback_private');
  late final _dart_snd_hctl_get_callback_private
      _snd_hctl_get_callback_private = _snd_hctl_get_callback_private_ptr
          .asFunction<_dart_snd_hctl_get_callback_private>();

  int snd_hctl_load(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_load(
      hctl,
    );
  }

  late final _snd_hctl_load_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_load>>('snd_hctl_load');
  late final _dart_snd_hctl_load _snd_hctl_load =
      _snd_hctl_load_ptr.asFunction<_dart_snd_hctl_load>();

  int snd_hctl_free(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_free(
      hctl,
    );
  }

  late final _snd_hctl_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_free>>('snd_hctl_free');
  late final _dart_snd_hctl_free _snd_hctl_free =
      _snd_hctl_free_ptr.asFunction<_dart_snd_hctl_free>();

  int snd_hctl_handle_events(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_handle_events(
      hctl,
    );
  }

  late final _snd_hctl_handle_events_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_handle_events>>(
          'snd_hctl_handle_events');
  late final _dart_snd_hctl_handle_events _snd_hctl_handle_events =
      _snd_hctl_handle_events_ptr.asFunction<_dart_snd_hctl_handle_events>();

  ffi.Pointer<ffi.Int8> snd_hctl_name(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_name(
      hctl,
    );
  }

  late final _snd_hctl_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_name>>('snd_hctl_name');
  late final _dart_snd_hctl_name _snd_hctl_name =
      _snd_hctl_name_ptr.asFunction<_dart_snd_hctl_name>();

  int snd_hctl_wait(
    ffi.Pointer<snd_hctl_> hctl,
    int timeout,
  ) {
    return _snd_hctl_wait(
      hctl,
      timeout,
    );
  }

  late final _snd_hctl_wait_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_wait>>('snd_hctl_wait');
  late final _dart_snd_hctl_wait _snd_hctl_wait =
      _snd_hctl_wait_ptr.asFunction<_dart_snd_hctl_wait>();

  ffi.Pointer<snd_ctl_> snd_hctl_ctl(
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_hctl_ctl(
      hctl,
    );
  }

  late final _snd_hctl_ctl_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_ctl>>('snd_hctl_ctl');
  late final _dart_snd_hctl_ctl _snd_hctl_ctl =
      _snd_hctl_ctl_ptr.asFunction<_dart_snd_hctl_ctl>();

  ffi.Pointer<snd_hctl_elem_> snd_hctl_elem_next(
    ffi.Pointer<snd_hctl_elem_> elem,
  ) {
    return _snd_hctl_elem_next(
      elem,
    );
  }

  late final _snd_hctl_elem_next_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_next>>('snd_hctl_elem_next');
  late final _dart_snd_hctl_elem_next _snd_hctl_elem_next =
      _snd_hctl_elem_next_ptr.asFunction<_dart_snd_hctl_elem_next>();

  ffi.Pointer<snd_hctl_elem_> snd_hctl_elem_prev(
    ffi.Pointer<snd_hctl_elem_> elem,
  ) {
    return _snd_hctl_elem_prev(
      elem,
    );
  }

  late final _snd_hctl_elem_prev_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_prev>>('snd_hctl_elem_prev');
  late final _dart_snd_hctl_elem_prev _snd_hctl_elem_prev =
      _snd_hctl_elem_prev_ptr.asFunction<_dart_snd_hctl_elem_prev>();

  int snd_hctl_elem_info(
    ffi.Pointer<snd_hctl_elem_> elem,
    ffi.Pointer<snd_ctl_elem_info_> info,
  ) {
    return _snd_hctl_elem_info(
      elem,
      info,
    );
  }

  late final _snd_hctl_elem_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_info>>('snd_hctl_elem_info');
  late final _dart_snd_hctl_elem_info _snd_hctl_elem_info =
      _snd_hctl_elem_info_ptr.asFunction<_dart_snd_hctl_elem_info>();

  int snd_hctl_elem_read(
    ffi.Pointer<snd_hctl_elem_> elem,
    ffi.Pointer<snd_ctl_elem_value_> value,
  ) {
    return _snd_hctl_elem_read(
      elem,
      value,
    );
  }

  late final _snd_hctl_elem_read_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_read>>('snd_hctl_elem_read');
  late final _dart_snd_hctl_elem_read _snd_hctl_elem_read =
      _snd_hctl_elem_read_ptr.asFunction<_dart_snd_hctl_elem_read>();

  int snd_hctl_elem_write(
    ffi.Pointer<snd_hctl_elem_> elem,
    ffi.Pointer<snd_ctl_elem_value_> value,
  ) {
    return _snd_hctl_elem_write(
      elem,
      value,
    );
  }

  late final _snd_hctl_elem_write_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_write>>(
          'snd_hctl_elem_write');
  late final _dart_snd_hctl_elem_write _snd_hctl_elem_write =
      _snd_hctl_elem_write_ptr.asFunction<_dart_snd_hctl_elem_write>();

  int snd_hctl_elem_tlv_read(
    ffi.Pointer<snd_hctl_elem_> elem,
    ffi.Pointer<ffi.Uint32> tlv,
    int tlv_size,
  ) {
    return _snd_hctl_elem_tlv_read(
      elem,
      tlv,
      tlv_size,
    );
  }

  late final _snd_hctl_elem_tlv_read_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_tlv_read>>(
          'snd_hctl_elem_tlv_read');
  late final _dart_snd_hctl_elem_tlv_read _snd_hctl_elem_tlv_read =
      _snd_hctl_elem_tlv_read_ptr.asFunction<_dart_snd_hctl_elem_tlv_read>();

  int snd_hctl_elem_tlv_write(
    ffi.Pointer<snd_hctl_elem_> elem,
    ffi.Pointer<ffi.Uint32> tlv,
  ) {
    return _snd_hctl_elem_tlv_write(
      elem,
      tlv,
    );
  }

  late final _snd_hctl_elem_tlv_write_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_tlv_write>>(
          'snd_hctl_elem_tlv_write');
  late final _dart_snd_hctl_elem_tlv_write _snd_hctl_elem_tlv_write =
      _snd_hctl_elem_tlv_write_ptr.asFunction<_dart_snd_hctl_elem_tlv_write>();

  int snd_hctl_elem_tlv_command(
    ffi.Pointer<snd_hctl_elem_> elem,
    ffi.Pointer<ffi.Uint32> tlv,
  ) {
    return _snd_hctl_elem_tlv_command(
      elem,
      tlv,
    );
  }

  late final _snd_hctl_elem_tlv_command_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_tlv_command>>(
          'snd_hctl_elem_tlv_command');
  late final _dart_snd_hctl_elem_tlv_command _snd_hctl_elem_tlv_command =
      _snd_hctl_elem_tlv_command_ptr
          .asFunction<_dart_snd_hctl_elem_tlv_command>();

  ffi.Pointer<snd_hctl_> snd_hctl_elem_get_hctl(
    ffi.Pointer<snd_hctl_elem_> elem,
  ) {
    return _snd_hctl_elem_get_hctl(
      elem,
    );
  }

  late final _snd_hctl_elem_get_hctl_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_hctl>>(
          'snd_hctl_elem_get_hctl');
  late final _dart_snd_hctl_elem_get_hctl _snd_hctl_elem_get_hctl =
      _snd_hctl_elem_get_hctl_ptr.asFunction<_dart_snd_hctl_elem_get_hctl>();

  void snd_hctl_elem_get_id(
    ffi.Pointer<snd_hctl_elem_> obj,
    ffi.Pointer<snd_ctl_elem_id_> ptr,
  ) {
    return _snd_hctl_elem_get_id(
      obj,
      ptr,
    );
  }

  late final _snd_hctl_elem_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_id>>(
          'snd_hctl_elem_get_id');
  late final _dart_snd_hctl_elem_get_id _snd_hctl_elem_get_id =
      _snd_hctl_elem_get_id_ptr.asFunction<_dart_snd_hctl_elem_get_id>();

  int snd_hctl_elem_get_numid(
    ffi.Pointer<snd_hctl_elem_> obj,
  ) {
    return _snd_hctl_elem_get_numid(
      obj,
    );
  }

  late final _snd_hctl_elem_get_numid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_numid>>(
          'snd_hctl_elem_get_numid');
  late final _dart_snd_hctl_elem_get_numid _snd_hctl_elem_get_numid =
      _snd_hctl_elem_get_numid_ptr.asFunction<_dart_snd_hctl_elem_get_numid>();

  int snd_hctl_elem_get_interface(
    ffi.Pointer<snd_hctl_elem_> obj,
  ) {
    return _snd_hctl_elem_get_interface(
      obj,
    );
  }

  late final _snd_hctl_elem_get_interface_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_interface>>(
          'snd_hctl_elem_get_interface');
  late final _dart_snd_hctl_elem_get_interface _snd_hctl_elem_get_interface =
      _snd_hctl_elem_get_interface_ptr
          .asFunction<_dart_snd_hctl_elem_get_interface>();

  int snd_hctl_elem_get_device(
    ffi.Pointer<snd_hctl_elem_> obj,
  ) {
    return _snd_hctl_elem_get_device(
      obj,
    );
  }

  late final _snd_hctl_elem_get_device_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_device>>(
          'snd_hctl_elem_get_device');
  late final _dart_snd_hctl_elem_get_device _snd_hctl_elem_get_device =
      _snd_hctl_elem_get_device_ptr
          .asFunction<_dart_snd_hctl_elem_get_device>();

  int snd_hctl_elem_get_subdevice(
    ffi.Pointer<snd_hctl_elem_> obj,
  ) {
    return _snd_hctl_elem_get_subdevice(
      obj,
    );
  }

  late final _snd_hctl_elem_get_subdevice_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_subdevice>>(
          'snd_hctl_elem_get_subdevice');
  late final _dart_snd_hctl_elem_get_subdevice _snd_hctl_elem_get_subdevice =
      _snd_hctl_elem_get_subdevice_ptr
          .asFunction<_dart_snd_hctl_elem_get_subdevice>();

  ffi.Pointer<ffi.Int8> snd_hctl_elem_get_name(
    ffi.Pointer<snd_hctl_elem_> obj,
  ) {
    return _snd_hctl_elem_get_name(
      obj,
    );
  }

  late final _snd_hctl_elem_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_name>>(
          'snd_hctl_elem_get_name');
  late final _dart_snd_hctl_elem_get_name _snd_hctl_elem_get_name =
      _snd_hctl_elem_get_name_ptr.asFunction<_dart_snd_hctl_elem_get_name>();

  int snd_hctl_elem_get_index(
    ffi.Pointer<snd_hctl_elem_> obj,
  ) {
    return _snd_hctl_elem_get_index(
      obj,
    );
  }

  late final _snd_hctl_elem_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_index>>(
          'snd_hctl_elem_get_index');
  late final _dart_snd_hctl_elem_get_index _snd_hctl_elem_get_index =
      _snd_hctl_elem_get_index_ptr.asFunction<_dart_snd_hctl_elem_get_index>();

  void snd_hctl_elem_set_callback(
    ffi.Pointer<snd_hctl_elem_> obj,
    ffi.Pointer<ffi.NativeFunction<snd_hctl_elem_callback_t>> val,
  ) {
    return _snd_hctl_elem_set_callback(
      obj,
      val,
    );
  }

  late final _snd_hctl_elem_set_callback_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_set_callback>>(
          'snd_hctl_elem_set_callback');
  late final _dart_snd_hctl_elem_set_callback _snd_hctl_elem_set_callback =
      _snd_hctl_elem_set_callback_ptr
          .asFunction<_dart_snd_hctl_elem_set_callback>();

  ffi.Pointer<ffi.Void> snd_hctl_elem_get_callback_private(
    ffi.Pointer<snd_hctl_elem_> obj,
  ) {
    return _snd_hctl_elem_get_callback_private(
      obj,
    );
  }

  late final _snd_hctl_elem_get_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_get_callback_private>>(
          'snd_hctl_elem_get_callback_private');
  late final _dart_snd_hctl_elem_get_callback_private
      _snd_hctl_elem_get_callback_private =
      _snd_hctl_elem_get_callback_private_ptr
          .asFunction<_dart_snd_hctl_elem_get_callback_private>();

  void snd_hctl_elem_set_callback_private(
    ffi.Pointer<snd_hctl_elem_> obj,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _snd_hctl_elem_set_callback_private(
      obj,
      val,
    );
  }

  late final _snd_hctl_elem_set_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_hctl_elem_set_callback_private>>(
          'snd_hctl_elem_set_callback_private');
  late final _dart_snd_hctl_elem_set_callback_private
      _snd_hctl_elem_set_callback_private =
      _snd_hctl_elem_set_callback_private_ptr
          .asFunction<_dart_snd_hctl_elem_set_callback_private>();

  int snd_sctl_build(
    ffi.Pointer<ffi.Pointer<snd_sctl_>> ctl,
    ffi.Pointer<snd_ctl_> handle,
    ffi.Pointer<snd_config_> config,
    ffi.Pointer<snd_config_> private_data,
    int mode,
  ) {
    return _snd_sctl_build(
      ctl,
      handle,
      config,
      private_data,
      mode,
    );
  }

  late final _snd_sctl_build_ptr =
      _lookup<ffi.NativeFunction<_c_snd_sctl_build>>('snd_sctl_build');
  late final _dart_snd_sctl_build _snd_sctl_build =
      _snd_sctl_build_ptr.asFunction<_dart_snd_sctl_build>();

  int snd_sctl_free(
    ffi.Pointer<snd_sctl_> handle,
  ) {
    return _snd_sctl_free(
      handle,
    );
  }

  late final _snd_sctl_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_sctl_free>>('snd_sctl_free');
  late final _dart_snd_sctl_free _snd_sctl_free =
      _snd_sctl_free_ptr.asFunction<_dart_snd_sctl_free>();

  int snd_sctl_install(
    ffi.Pointer<snd_sctl_> handle,
  ) {
    return _snd_sctl_install(
      handle,
    );
  }

  late final _snd_sctl_install_ptr =
      _lookup<ffi.NativeFunction<_c_snd_sctl_install>>('snd_sctl_install');
  late final _dart_snd_sctl_install _snd_sctl_install =
      _snd_sctl_install_ptr.asFunction<_dart_snd_sctl_install>();

  int snd_sctl_remove(
    ffi.Pointer<snd_sctl_> handle,
  ) {
    return _snd_sctl_remove(
      handle,
    );
  }

  late final _snd_sctl_remove_ptr =
      _lookup<ffi.NativeFunction<_c_snd_sctl_remove>>('snd_sctl_remove');
  late final _dart_snd_sctl_remove _snd_sctl_remove =
      _snd_sctl_remove_ptr.asFunction<_dart_snd_sctl_remove>();

  int snd_mixer_open(
    ffi.Pointer<ffi.Pointer<snd_mixer_>> mixer,
    int mode,
  ) {
    return _snd_mixer_open(
      mixer,
      mode,
    );
  }

  late final _snd_mixer_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_open>>('snd_mixer_open');
  late final _dart_snd_mixer_open _snd_mixer_open =
      _snd_mixer_open_ptr.asFunction<_dart_snd_mixer_open>();

  int snd_mixer_close(
    ffi.Pointer<snd_mixer_> mixer,
  ) {
    return _snd_mixer_close(
      mixer,
    );
  }

  late final _snd_mixer_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_close>>('snd_mixer_close');
  late final _dart_snd_mixer_close _snd_mixer_close =
      _snd_mixer_close_ptr.asFunction<_dart_snd_mixer_close>();

  ffi.Pointer<snd_mixer_elem_> snd_mixer_first_elem(
    ffi.Pointer<snd_mixer_> mixer,
  ) {
    return _snd_mixer_first_elem(
      mixer,
    );
  }

  late final _snd_mixer_first_elem_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_first_elem>>(
          'snd_mixer_first_elem');
  late final _dart_snd_mixer_first_elem _snd_mixer_first_elem =
      _snd_mixer_first_elem_ptr.asFunction<_dart_snd_mixer_first_elem>();

  ffi.Pointer<snd_mixer_elem_> snd_mixer_last_elem(
    ffi.Pointer<snd_mixer_> mixer,
  ) {
    return _snd_mixer_last_elem(
      mixer,
    );
  }

  late final _snd_mixer_last_elem_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_last_elem>>(
          'snd_mixer_last_elem');
  late final _dart_snd_mixer_last_elem _snd_mixer_last_elem =
      _snd_mixer_last_elem_ptr.asFunction<_dart_snd_mixer_last_elem>();

  int snd_mixer_handle_events(
    ffi.Pointer<snd_mixer_> mixer,
  ) {
    return _snd_mixer_handle_events(
      mixer,
    );
  }

  late final _snd_mixer_handle_events_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_handle_events>>(
          'snd_mixer_handle_events');
  late final _dart_snd_mixer_handle_events _snd_mixer_handle_events =
      _snd_mixer_handle_events_ptr.asFunction<_dart_snd_mixer_handle_events>();

  int snd_mixer_attach(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_mixer_attach(
      mixer,
      name,
    );
  }

  late final _snd_mixer_attach_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_attach>>('snd_mixer_attach');
  late final _dart_snd_mixer_attach _snd_mixer_attach =
      _snd_mixer_attach_ptr.asFunction<_dart_snd_mixer_attach>();

  int snd_mixer_attach_hctl(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_mixer_attach_hctl(
      mixer,
      hctl,
    );
  }

  late final _snd_mixer_attach_hctl_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_attach_hctl>>(
          'snd_mixer_attach_hctl');
  late final _dart_snd_mixer_attach_hctl _snd_mixer_attach_hctl =
      _snd_mixer_attach_hctl_ptr.asFunction<_dart_snd_mixer_attach_hctl>();

  int snd_mixer_detach(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_mixer_detach(
      mixer,
      name,
    );
  }

  late final _snd_mixer_detach_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_detach>>('snd_mixer_detach');
  late final _dart_snd_mixer_detach _snd_mixer_detach =
      _snd_mixer_detach_ptr.asFunction<_dart_snd_mixer_detach>();

  int snd_mixer_detach_hctl(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<snd_hctl_> hctl,
  ) {
    return _snd_mixer_detach_hctl(
      mixer,
      hctl,
    );
  }

  late final _snd_mixer_detach_hctl_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_detach_hctl>>(
          'snd_mixer_detach_hctl');
  late final _dart_snd_mixer_detach_hctl _snd_mixer_detach_hctl =
      _snd_mixer_detach_hctl_ptr.asFunction<_dart_snd_mixer_detach_hctl>();

  int snd_mixer_get_hctl(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<snd_hctl_>> hctl,
  ) {
    return _snd_mixer_get_hctl(
      mixer,
      name,
      hctl,
    );
  }

  late final _snd_mixer_get_hctl_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_get_hctl>>('snd_mixer_get_hctl');
  late final _dart_snd_mixer_get_hctl _snd_mixer_get_hctl =
      _snd_mixer_get_hctl_ptr.asFunction<_dart_snd_mixer_get_hctl>();

  int snd_mixer_poll_descriptors_count(
    ffi.Pointer<snd_mixer_> mixer,
  ) {
    return _snd_mixer_poll_descriptors_count(
      mixer,
    );
  }

  late final _snd_mixer_poll_descriptors_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_poll_descriptors_count>>(
          'snd_mixer_poll_descriptors_count');
  late final _dart_snd_mixer_poll_descriptors_count
      _snd_mixer_poll_descriptors_count = _snd_mixer_poll_descriptors_count_ptr
          .asFunction<_dart_snd_mixer_poll_descriptors_count>();

  int snd_mixer_poll_descriptors(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_mixer_poll_descriptors(
      mixer,
      pfds,
      space,
    );
  }

  late final _snd_mixer_poll_descriptors_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_poll_descriptors>>(
          'snd_mixer_poll_descriptors');
  late final _dart_snd_mixer_poll_descriptors _snd_mixer_poll_descriptors =
      _snd_mixer_poll_descriptors_ptr
          .asFunction<_dart_snd_mixer_poll_descriptors>();

  int snd_mixer_poll_descriptors_revents(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.Uint16> revents,
  ) {
    return _snd_mixer_poll_descriptors_revents(
      mixer,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_mixer_poll_descriptors_revents_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_poll_descriptors_revents>>(
          'snd_mixer_poll_descriptors_revents');
  late final _dart_snd_mixer_poll_descriptors_revents
      _snd_mixer_poll_descriptors_revents =
      _snd_mixer_poll_descriptors_revents_ptr
          .asFunction<_dart_snd_mixer_poll_descriptors_revents>();

  int snd_mixer_load(
    ffi.Pointer<snd_mixer_> mixer,
  ) {
    return _snd_mixer_load(
      mixer,
    );
  }

  late final _snd_mixer_load_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_load>>('snd_mixer_load');
  late final _dart_snd_mixer_load _snd_mixer_load =
      _snd_mixer_load_ptr.asFunction<_dart_snd_mixer_load>();

  void snd_mixer_free(
    ffi.Pointer<snd_mixer_> mixer,
  ) {
    return _snd_mixer_free(
      mixer,
    );
  }

  late final _snd_mixer_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_free>>('snd_mixer_free');
  late final _dart_snd_mixer_free _snd_mixer_free =
      _snd_mixer_free_ptr.asFunction<_dart_snd_mixer_free>();

  int snd_mixer_wait(
    ffi.Pointer<snd_mixer_> mixer,
    int timeout,
  ) {
    return _snd_mixer_wait(
      mixer,
      timeout,
    );
  }

  late final _snd_mixer_wait_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_wait>>('snd_mixer_wait');
  late final _dart_snd_mixer_wait _snd_mixer_wait =
      _snd_mixer_wait_ptr.asFunction<_dart_snd_mixer_wait>();

  int snd_mixer_set_compare(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>> msort,
  ) {
    return _snd_mixer_set_compare(
      mixer,
      msort,
    );
  }

  late final _snd_mixer_set_compare_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_set_compare>>(
          'snd_mixer_set_compare');
  late final _dart_snd_mixer_set_compare _snd_mixer_set_compare =
      _snd_mixer_set_compare_ptr.asFunction<_dart_snd_mixer_set_compare>();

  void snd_mixer_set_callback(
    ffi.Pointer<snd_mixer_> obj,
    ffi.Pointer<ffi.NativeFunction<snd_mixer_callback_t>> val,
  ) {
    return _snd_mixer_set_callback(
      obj,
      val,
    );
  }

  late final _snd_mixer_set_callback_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_set_callback>>(
          'snd_mixer_set_callback');
  late final _dart_snd_mixer_set_callback _snd_mixer_set_callback =
      _snd_mixer_set_callback_ptr.asFunction<_dart_snd_mixer_set_callback>();

  ffi.Pointer<ffi.Void> snd_mixer_get_callback_private(
    ffi.Pointer<snd_mixer_> obj,
  ) {
    return _snd_mixer_get_callback_private(
      obj,
    );
  }

  late final _snd_mixer_get_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_get_callback_private>>(
          'snd_mixer_get_callback_private');
  late final _dart_snd_mixer_get_callback_private
      _snd_mixer_get_callback_private = _snd_mixer_get_callback_private_ptr
          .asFunction<_dart_snd_mixer_get_callback_private>();

  void snd_mixer_set_callback_private(
    ffi.Pointer<snd_mixer_> obj,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _snd_mixer_set_callback_private(
      obj,
      val,
    );
  }

  late final _snd_mixer_set_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_set_callback_private>>(
          'snd_mixer_set_callback_private');
  late final _dart_snd_mixer_set_callback_private
      _snd_mixer_set_callback_private = _snd_mixer_set_callback_private_ptr
          .asFunction<_dart_snd_mixer_set_callback_private>();

  int snd_mixer_get_count(
    ffi.Pointer<snd_mixer_> obj,
  ) {
    return _snd_mixer_get_count(
      obj,
    );
  }

  late final _snd_mixer_get_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_get_count>>(
          'snd_mixer_get_count');
  late final _dart_snd_mixer_get_count _snd_mixer_get_count =
      _snd_mixer_get_count_ptr.asFunction<_dart_snd_mixer_get_count>();

  int snd_mixer_class_unregister(
    ffi.Pointer<snd_mixer_class_> clss,
  ) {
    return _snd_mixer_class_unregister(
      clss,
    );
  }

  late final _snd_mixer_class_unregister_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_unregister>>(
          'snd_mixer_class_unregister');
  late final _dart_snd_mixer_class_unregister _snd_mixer_class_unregister =
      _snd_mixer_class_unregister_ptr
          .asFunction<_dart_snd_mixer_class_unregister>();

  ffi.Pointer<snd_mixer_elem_> snd_mixer_elem_next(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_elem_next(
      elem,
    );
  }

  late final _snd_mixer_elem_next_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_next>>(
          'snd_mixer_elem_next');
  late final _dart_snd_mixer_elem_next _snd_mixer_elem_next =
      _snd_mixer_elem_next_ptr.asFunction<_dart_snd_mixer_elem_next>();

  ffi.Pointer<snd_mixer_elem_> snd_mixer_elem_prev(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_elem_prev(
      elem,
    );
  }

  late final _snd_mixer_elem_prev_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_prev>>(
          'snd_mixer_elem_prev');
  late final _dart_snd_mixer_elem_prev _snd_mixer_elem_prev =
      _snd_mixer_elem_prev_ptr.asFunction<_dart_snd_mixer_elem_prev>();

  void snd_mixer_elem_set_callback(
    ffi.Pointer<snd_mixer_elem_> obj,
    ffi.Pointer<ffi.NativeFunction<snd_mixer_elem_callback_t>> val,
  ) {
    return _snd_mixer_elem_set_callback(
      obj,
      val,
    );
  }

  late final _snd_mixer_elem_set_callback_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_set_callback>>(
          'snd_mixer_elem_set_callback');
  late final _dart_snd_mixer_elem_set_callback _snd_mixer_elem_set_callback =
      _snd_mixer_elem_set_callback_ptr
          .asFunction<_dart_snd_mixer_elem_set_callback>();

  ffi.Pointer<ffi.Void> snd_mixer_elem_get_callback_private(
    ffi.Pointer<snd_mixer_elem_> obj,
  ) {
    return _snd_mixer_elem_get_callback_private(
      obj,
    );
  }

  late final _snd_mixer_elem_get_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_get_callback_private>>(
          'snd_mixer_elem_get_callback_private');
  late final _dart_snd_mixer_elem_get_callback_private
      _snd_mixer_elem_get_callback_private =
      _snd_mixer_elem_get_callback_private_ptr
          .asFunction<_dart_snd_mixer_elem_get_callback_private>();

  void snd_mixer_elem_set_callback_private(
    ffi.Pointer<snd_mixer_elem_> obj,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _snd_mixer_elem_set_callback_private(
      obj,
      val,
    );
  }

  late final _snd_mixer_elem_set_callback_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_set_callback_private>>(
          'snd_mixer_elem_set_callback_private');
  late final _dart_snd_mixer_elem_set_callback_private
      _snd_mixer_elem_set_callback_private =
      _snd_mixer_elem_set_callback_private_ptr
          .asFunction<_dart_snd_mixer_elem_set_callback_private>();

  int snd_mixer_elem_get_type(
    ffi.Pointer<snd_mixer_elem_> obj,
  ) {
    return _snd_mixer_elem_get_type(
      obj,
    );
  }

  late final _snd_mixer_elem_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_get_type>>(
          'snd_mixer_elem_get_type');
  late final _dart_snd_mixer_elem_get_type _snd_mixer_elem_get_type =
      _snd_mixer_elem_get_type_ptr.asFunction<_dart_snd_mixer_elem_get_type>();

  int snd_mixer_class_register(
    ffi.Pointer<snd_mixer_class_> class_,
    ffi.Pointer<snd_mixer_> mixer,
  ) {
    return _snd_mixer_class_register(
      class_,
      mixer,
    );
  }

  late final _snd_mixer_class_register_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_register>>(
          'snd_mixer_class_register');
  late final _dart_snd_mixer_class_register _snd_mixer_class_register =
      _snd_mixer_class_register_ptr
          .asFunction<_dart_snd_mixer_class_register>();

  int snd_mixer_elem_new(
    ffi.Pointer<ffi.Pointer<snd_mixer_elem_>> elem,
    int type,
    int compare_weight,
    ffi.Pointer<ffi.Void> private_data,
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> private_free,
  ) {
    return _snd_mixer_elem_new(
      elem,
      type,
      compare_weight,
      private_data,
      private_free,
    );
  }

  late final _snd_mixer_elem_new_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_new>>('snd_mixer_elem_new');
  late final _dart_snd_mixer_elem_new _snd_mixer_elem_new =
      _snd_mixer_elem_new_ptr.asFunction<_dart_snd_mixer_elem_new>();

  int snd_mixer_elem_add(
    ffi.Pointer<snd_mixer_elem_> elem,
    ffi.Pointer<snd_mixer_class_> class_,
  ) {
    return _snd_mixer_elem_add(
      elem,
      class_,
    );
  }

  late final _snd_mixer_elem_add_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_add>>('snd_mixer_elem_add');
  late final _dart_snd_mixer_elem_add _snd_mixer_elem_add =
      _snd_mixer_elem_add_ptr.asFunction<_dart_snd_mixer_elem_add>();

  int snd_mixer_elem_remove(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_elem_remove(
      elem,
    );
  }

  late final _snd_mixer_elem_remove_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_remove>>(
          'snd_mixer_elem_remove');
  late final _dart_snd_mixer_elem_remove _snd_mixer_elem_remove =
      _snd_mixer_elem_remove_ptr.asFunction<_dart_snd_mixer_elem_remove>();

  void snd_mixer_elem_free(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_elem_free(
      elem,
    );
  }

  late final _snd_mixer_elem_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_free>>(
          'snd_mixer_elem_free');
  late final _dart_snd_mixer_elem_free _snd_mixer_elem_free =
      _snd_mixer_elem_free_ptr.asFunction<_dart_snd_mixer_elem_free>();

  int snd_mixer_elem_info(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_elem_info(
      elem,
    );
  }

  late final _snd_mixer_elem_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_info>>(
          'snd_mixer_elem_info');
  late final _dart_snd_mixer_elem_info _snd_mixer_elem_info =
      _snd_mixer_elem_info_ptr.asFunction<_dart_snd_mixer_elem_info>();

  int snd_mixer_elem_value(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_elem_value(
      elem,
    );
  }

  late final _snd_mixer_elem_value_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_value>>(
          'snd_mixer_elem_value');
  late final _dart_snd_mixer_elem_value _snd_mixer_elem_value =
      _snd_mixer_elem_value_ptr.asFunction<_dart_snd_mixer_elem_value>();

  int snd_mixer_elem_attach(
    ffi.Pointer<snd_mixer_elem_> melem,
    ffi.Pointer<snd_hctl_elem_> helem,
  ) {
    return _snd_mixer_elem_attach(
      melem,
      helem,
    );
  }

  late final _snd_mixer_elem_attach_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_attach>>(
          'snd_mixer_elem_attach');
  late final _dart_snd_mixer_elem_attach _snd_mixer_elem_attach =
      _snd_mixer_elem_attach_ptr.asFunction<_dart_snd_mixer_elem_attach>();

  int snd_mixer_elem_detach(
    ffi.Pointer<snd_mixer_elem_> melem,
    ffi.Pointer<snd_hctl_elem_> helem,
  ) {
    return _snd_mixer_elem_detach(
      melem,
      helem,
    );
  }

  late final _snd_mixer_elem_detach_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_detach>>(
          'snd_mixer_elem_detach');
  late final _dart_snd_mixer_elem_detach _snd_mixer_elem_detach =
      _snd_mixer_elem_detach_ptr.asFunction<_dart_snd_mixer_elem_detach>();

  int snd_mixer_elem_empty(
    ffi.Pointer<snd_mixer_elem_> melem,
  ) {
    return _snd_mixer_elem_empty(
      melem,
    );
  }

  late final _snd_mixer_elem_empty_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_empty>>(
          'snd_mixer_elem_empty');
  late final _dart_snd_mixer_elem_empty _snd_mixer_elem_empty =
      _snd_mixer_elem_empty_ptr.asFunction<_dart_snd_mixer_elem_empty>();

  ffi.Pointer<ffi.Void> snd_mixer_elem_get_private(
    ffi.Pointer<snd_mixer_elem_> melem,
  ) {
    return _snd_mixer_elem_get_private(
      melem,
    );
  }

  late final _snd_mixer_elem_get_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_elem_get_private>>(
          'snd_mixer_elem_get_private');
  late final _dart_snd_mixer_elem_get_private _snd_mixer_elem_get_private =
      _snd_mixer_elem_get_private_ptr
          .asFunction<_dart_snd_mixer_elem_get_private>();

  int snd_mixer_class_sizeof() {
    return _snd_mixer_class_sizeof();
  }

  late final _snd_mixer_class_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_sizeof>>(
          'snd_mixer_class_sizeof');
  late final _dart_snd_mixer_class_sizeof _snd_mixer_class_sizeof =
      _snd_mixer_class_sizeof_ptr.asFunction<_dart_snd_mixer_class_sizeof>();

  int snd_mixer_class_malloc(
    ffi.Pointer<ffi.Pointer<snd_mixer_class_>> ptr,
  ) {
    return _snd_mixer_class_malloc(
      ptr,
    );
  }

  late final _snd_mixer_class_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_malloc>>(
          'snd_mixer_class_malloc');
  late final _dart_snd_mixer_class_malloc _snd_mixer_class_malloc =
      _snd_mixer_class_malloc_ptr.asFunction<_dart_snd_mixer_class_malloc>();

  void snd_mixer_class_free(
    ffi.Pointer<snd_mixer_class_> obj,
  ) {
    return _snd_mixer_class_free(
      obj,
    );
  }

  late final _snd_mixer_class_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_free>>(
          'snd_mixer_class_free');
  late final _dart_snd_mixer_class_free _snd_mixer_class_free =
      _snd_mixer_class_free_ptr.asFunction<_dart_snd_mixer_class_free>();

  void snd_mixer_class_copy(
    ffi.Pointer<snd_mixer_class_> dst,
    ffi.Pointer<snd_mixer_class_> src,
  ) {
    return _snd_mixer_class_copy(
      dst,
      src,
    );
  }

  late final _snd_mixer_class_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_copy>>(
          'snd_mixer_class_copy');
  late final _dart_snd_mixer_class_copy _snd_mixer_class_copy =
      _snd_mixer_class_copy_ptr.asFunction<_dart_snd_mixer_class_copy>();

  ffi.Pointer<snd_mixer_> snd_mixer_class_get_mixer(
    ffi.Pointer<snd_mixer_class_> class_,
  ) {
    return _snd_mixer_class_get_mixer(
      class_,
    );
  }

  late final _snd_mixer_class_get_mixer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_get_mixer>>(
          'snd_mixer_class_get_mixer');
  late final _dart_snd_mixer_class_get_mixer _snd_mixer_class_get_mixer =
      _snd_mixer_class_get_mixer_ptr
          .asFunction<_dart_snd_mixer_class_get_mixer>();

  ffi.Pointer<ffi.NativeFunction<snd_mixer_event_t>> snd_mixer_class_get_event(
    ffi.Pointer<snd_mixer_class_> class_,
  ) {
    return _snd_mixer_class_get_event(
      class_,
    );
  }

  late final _snd_mixer_class_get_event_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_get_event>>(
          'snd_mixer_class_get_event');
  late final _dart_snd_mixer_class_get_event _snd_mixer_class_get_event =
      _snd_mixer_class_get_event_ptr
          .asFunction<_dart_snd_mixer_class_get_event>();

  ffi.Pointer<ffi.Void> snd_mixer_class_get_private(
    ffi.Pointer<snd_mixer_class_> class_,
  ) {
    return _snd_mixer_class_get_private(
      class_,
    );
  }

  late final _snd_mixer_class_get_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_get_private>>(
          'snd_mixer_class_get_private');
  late final _dart_snd_mixer_class_get_private _snd_mixer_class_get_private =
      _snd_mixer_class_get_private_ptr
          .asFunction<_dart_snd_mixer_class_get_private>();

  ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>>
      snd_mixer_class_get_compare(
    ffi.Pointer<snd_mixer_class_> class_,
  ) {
    return _snd_mixer_class_get_compare(
      class_,
    );
  }

  late final _snd_mixer_class_get_compare_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_get_compare>>(
          'snd_mixer_class_get_compare');
  late final _dart_snd_mixer_class_get_compare _snd_mixer_class_get_compare =
      _snd_mixer_class_get_compare_ptr
          .asFunction<_dart_snd_mixer_class_get_compare>();

  int snd_mixer_class_set_event(
    ffi.Pointer<snd_mixer_class_> class_,
    ffi.Pointer<ffi.NativeFunction<snd_mixer_event_t>> event,
  ) {
    return _snd_mixer_class_set_event(
      class_,
      event,
    );
  }

  late final _snd_mixer_class_set_event_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_set_event>>(
          'snd_mixer_class_set_event');
  late final _dart_snd_mixer_class_set_event _snd_mixer_class_set_event =
      _snd_mixer_class_set_event_ptr
          .asFunction<_dart_snd_mixer_class_set_event>();

  int snd_mixer_class_set_private(
    ffi.Pointer<snd_mixer_class_> class_,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_mixer_class_set_private(
      class_,
      private_data,
    );
  }

  late final _snd_mixer_class_set_private_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_set_private>>(
          'snd_mixer_class_set_private');
  late final _dart_snd_mixer_class_set_private _snd_mixer_class_set_private =
      _snd_mixer_class_set_private_ptr
          .asFunction<_dart_snd_mixer_class_set_private>();

  int snd_mixer_class_set_private_free(
    ffi.Pointer<snd_mixer_class_> class_,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> private_free,
  ) {
    return _snd_mixer_class_set_private_free(
      class_,
      private_free,
    );
  }

  late final _snd_mixer_class_set_private_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_set_private_free>>(
          'snd_mixer_class_set_private_free');
  late final _dart_snd_mixer_class_set_private_free
      _snd_mixer_class_set_private_free = _snd_mixer_class_set_private_free_ptr
          .asFunction<_dart_snd_mixer_class_set_private_free>();

  int snd_mixer_class_set_compare(
    ffi.Pointer<snd_mixer_class_> class_,
    ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>> compare,
  ) {
    return _snd_mixer_class_set_compare(
      class_,
      compare,
    );
  }

  late final _snd_mixer_class_set_compare_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_class_set_compare>>(
          'snd_mixer_class_set_compare');
  late final _dart_snd_mixer_class_set_compare _snd_mixer_class_set_compare =
      _snd_mixer_class_set_compare_ptr
          .asFunction<_dart_snd_mixer_class_set_compare>();

  ffi.Pointer<ffi.Int8> snd_mixer_selem_channel_name(
    int channel,
  ) {
    return _snd_mixer_selem_channel_name(
      channel,
    );
  }

  late final _snd_mixer_selem_channel_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_channel_name>>(
          'snd_mixer_selem_channel_name');
  late final _dart_snd_mixer_selem_channel_name _snd_mixer_selem_channel_name =
      _snd_mixer_selem_channel_name_ptr
          .asFunction<_dart_snd_mixer_selem_channel_name>();

  int snd_mixer_selem_register(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<snd_mixer_selem_regopt> options,
    ffi.Pointer<ffi.Pointer<snd_mixer_class_>> classp,
  ) {
    return _snd_mixer_selem_register(
      mixer,
      options,
      classp,
    );
  }

  late final _snd_mixer_selem_register_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_register>>(
          'snd_mixer_selem_register');
  late final _dart_snd_mixer_selem_register _snd_mixer_selem_register =
      _snd_mixer_selem_register_ptr
          .asFunction<_dart_snd_mixer_selem_register>();

  void snd_mixer_selem_get_id(
    ffi.Pointer<snd_mixer_elem_> element,
    ffi.Pointer<snd_mixer_selem_id_> id,
  ) {
    return _snd_mixer_selem_get_id(
      element,
      id,
    );
  }

  late final _snd_mixer_selem_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_id>>(
          'snd_mixer_selem_get_id');
  late final _dart_snd_mixer_selem_get_id _snd_mixer_selem_get_id =
      _snd_mixer_selem_get_id_ptr.asFunction<_dart_snd_mixer_selem_get_id>();

  ffi.Pointer<ffi.Int8> snd_mixer_selem_get_name(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_get_name(
      elem,
    );
  }

  late final _snd_mixer_selem_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_name>>(
          'snd_mixer_selem_get_name');
  late final _dart_snd_mixer_selem_get_name _snd_mixer_selem_get_name =
      _snd_mixer_selem_get_name_ptr
          .asFunction<_dart_snd_mixer_selem_get_name>();

  int snd_mixer_selem_get_index(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_get_index(
      elem,
    );
  }

  late final _snd_mixer_selem_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_index>>(
          'snd_mixer_selem_get_index');
  late final _dart_snd_mixer_selem_get_index _snd_mixer_selem_get_index =
      _snd_mixer_selem_get_index_ptr
          .asFunction<_dart_snd_mixer_selem_get_index>();

  ffi.Pointer<snd_mixer_elem_> snd_mixer_find_selem(
    ffi.Pointer<snd_mixer_> mixer,
    ffi.Pointer<snd_mixer_selem_id_> id,
  ) {
    return _snd_mixer_find_selem(
      mixer,
      id,
    );
  }

  late final _snd_mixer_find_selem_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_find_selem>>(
          'snd_mixer_find_selem');
  late final _dart_snd_mixer_find_selem _snd_mixer_find_selem =
      _snd_mixer_find_selem_ptr.asFunction<_dart_snd_mixer_find_selem>();

  int snd_mixer_selem_is_active(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_is_active(
      elem,
    );
  }

  late final _snd_mixer_selem_is_active_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_is_active>>(
          'snd_mixer_selem_is_active');
  late final _dart_snd_mixer_selem_is_active _snd_mixer_selem_is_active =
      _snd_mixer_selem_is_active_ptr
          .asFunction<_dart_snd_mixer_selem_is_active>();

  int snd_mixer_selem_is_playback_mono(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_is_playback_mono(
      elem,
    );
  }

  late final _snd_mixer_selem_is_playback_mono_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_is_playback_mono>>(
          'snd_mixer_selem_is_playback_mono');
  late final _dart_snd_mixer_selem_is_playback_mono
      _snd_mixer_selem_is_playback_mono = _snd_mixer_selem_is_playback_mono_ptr
          .asFunction<_dart_snd_mixer_selem_is_playback_mono>();

  int snd_mixer_selem_has_playback_channel(
    ffi.Pointer<snd_mixer_elem_> obj,
    int channel,
  ) {
    return _snd_mixer_selem_has_playback_channel(
      obj,
      channel,
    );
  }

  late final _snd_mixer_selem_has_playback_channel_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_playback_channel>>(
          'snd_mixer_selem_has_playback_channel');
  late final _dart_snd_mixer_selem_has_playback_channel
      _snd_mixer_selem_has_playback_channel =
      _snd_mixer_selem_has_playback_channel_ptr
          .asFunction<_dart_snd_mixer_selem_has_playback_channel>();

  int snd_mixer_selem_is_capture_mono(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_is_capture_mono(
      elem,
    );
  }

  late final _snd_mixer_selem_is_capture_mono_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_is_capture_mono>>(
          'snd_mixer_selem_is_capture_mono');
  late final _dart_snd_mixer_selem_is_capture_mono
      _snd_mixer_selem_is_capture_mono = _snd_mixer_selem_is_capture_mono_ptr
          .asFunction<_dart_snd_mixer_selem_is_capture_mono>();

  int snd_mixer_selem_has_capture_channel(
    ffi.Pointer<snd_mixer_elem_> obj,
    int channel,
  ) {
    return _snd_mixer_selem_has_capture_channel(
      obj,
      channel,
    );
  }

  late final _snd_mixer_selem_has_capture_channel_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_capture_channel>>(
          'snd_mixer_selem_has_capture_channel');
  late final _dart_snd_mixer_selem_has_capture_channel
      _snd_mixer_selem_has_capture_channel =
      _snd_mixer_selem_has_capture_channel_ptr
          .asFunction<_dart_snd_mixer_selem_has_capture_channel>();

  int snd_mixer_selem_get_capture_group(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_get_capture_group(
      elem,
    );
  }

  late final _snd_mixer_selem_get_capture_group_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_capture_group>>(
          'snd_mixer_selem_get_capture_group');
  late final _dart_snd_mixer_selem_get_capture_group
      _snd_mixer_selem_get_capture_group =
      _snd_mixer_selem_get_capture_group_ptr
          .asFunction<_dart_snd_mixer_selem_get_capture_group>();

  int snd_mixer_selem_has_common_volume(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_common_volume(
      elem,
    );
  }

  late final _snd_mixer_selem_has_common_volume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_common_volume>>(
          'snd_mixer_selem_has_common_volume');
  late final _dart_snd_mixer_selem_has_common_volume
      _snd_mixer_selem_has_common_volume =
      _snd_mixer_selem_has_common_volume_ptr
          .asFunction<_dart_snd_mixer_selem_has_common_volume>();

  int snd_mixer_selem_has_playback_volume(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_playback_volume(
      elem,
    );
  }

  late final _snd_mixer_selem_has_playback_volume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_playback_volume>>(
          'snd_mixer_selem_has_playback_volume');
  late final _dart_snd_mixer_selem_has_playback_volume
      _snd_mixer_selem_has_playback_volume =
      _snd_mixer_selem_has_playback_volume_ptr
          .asFunction<_dart_snd_mixer_selem_has_playback_volume>();

  int snd_mixer_selem_has_playback_volume_joined(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_playback_volume_joined(
      elem,
    );
  }

  late final _snd_mixer_selem_has_playback_volume_joined_ptr = _lookup<
          ffi.NativeFunction<_c_snd_mixer_selem_has_playback_volume_joined>>(
      'snd_mixer_selem_has_playback_volume_joined');
  late final _dart_snd_mixer_selem_has_playback_volume_joined
      _snd_mixer_selem_has_playback_volume_joined =
      _snd_mixer_selem_has_playback_volume_joined_ptr
          .asFunction<_dart_snd_mixer_selem_has_playback_volume_joined>();

  int snd_mixer_selem_has_capture_volume(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_capture_volume(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_volume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_capture_volume>>(
          'snd_mixer_selem_has_capture_volume');
  late final _dart_snd_mixer_selem_has_capture_volume
      _snd_mixer_selem_has_capture_volume =
      _snd_mixer_selem_has_capture_volume_ptr
          .asFunction<_dart_snd_mixer_selem_has_capture_volume>();

  int snd_mixer_selem_has_capture_volume_joined(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_capture_volume_joined(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_volume_joined_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_capture_volume_joined>>(
          'snd_mixer_selem_has_capture_volume_joined');
  late final _dart_snd_mixer_selem_has_capture_volume_joined
      _snd_mixer_selem_has_capture_volume_joined =
      _snd_mixer_selem_has_capture_volume_joined_ptr
          .asFunction<_dart_snd_mixer_selem_has_capture_volume_joined>();

  int snd_mixer_selem_has_common_switch(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_common_switch(
      elem,
    );
  }

  late final _snd_mixer_selem_has_common_switch_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_common_switch>>(
          'snd_mixer_selem_has_common_switch');
  late final _dart_snd_mixer_selem_has_common_switch
      _snd_mixer_selem_has_common_switch =
      _snd_mixer_selem_has_common_switch_ptr
          .asFunction<_dart_snd_mixer_selem_has_common_switch>();

  int snd_mixer_selem_has_playback_switch(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_playback_switch(
      elem,
    );
  }

  late final _snd_mixer_selem_has_playback_switch_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_playback_switch>>(
          'snd_mixer_selem_has_playback_switch');
  late final _dart_snd_mixer_selem_has_playback_switch
      _snd_mixer_selem_has_playback_switch =
      _snd_mixer_selem_has_playback_switch_ptr
          .asFunction<_dart_snd_mixer_selem_has_playback_switch>();

  int snd_mixer_selem_has_playback_switch_joined(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_playback_switch_joined(
      elem,
    );
  }

  late final _snd_mixer_selem_has_playback_switch_joined_ptr = _lookup<
          ffi.NativeFunction<_c_snd_mixer_selem_has_playback_switch_joined>>(
      'snd_mixer_selem_has_playback_switch_joined');
  late final _dart_snd_mixer_selem_has_playback_switch_joined
      _snd_mixer_selem_has_playback_switch_joined =
      _snd_mixer_selem_has_playback_switch_joined_ptr
          .asFunction<_dart_snd_mixer_selem_has_playback_switch_joined>();

  int snd_mixer_selem_has_capture_switch(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_capture_switch(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_switch_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_capture_switch>>(
          'snd_mixer_selem_has_capture_switch');
  late final _dart_snd_mixer_selem_has_capture_switch
      _snd_mixer_selem_has_capture_switch =
      _snd_mixer_selem_has_capture_switch_ptr
          .asFunction<_dart_snd_mixer_selem_has_capture_switch>();

  int snd_mixer_selem_has_capture_switch_joined(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_capture_switch_joined(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_switch_joined_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_has_capture_switch_joined>>(
          'snd_mixer_selem_has_capture_switch_joined');
  late final _dart_snd_mixer_selem_has_capture_switch_joined
      _snd_mixer_selem_has_capture_switch_joined =
      _snd_mixer_selem_has_capture_switch_joined_ptr
          .asFunction<_dart_snd_mixer_selem_has_capture_switch_joined>();

  int snd_mixer_selem_has_capture_switch_exclusive(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_has_capture_switch_exclusive(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_switch_exclusive_ptr = _lookup<
          ffi.NativeFunction<_c_snd_mixer_selem_has_capture_switch_exclusive>>(
      'snd_mixer_selem_has_capture_switch_exclusive');
  late final _dart_snd_mixer_selem_has_capture_switch_exclusive
      _snd_mixer_selem_has_capture_switch_exclusive =
      _snd_mixer_selem_has_capture_switch_exclusive_ptr
          .asFunction<_dart_snd_mixer_selem_has_capture_switch_exclusive>();

  int snd_mixer_selem_ask_playback_vol_dB(
    ffi.Pointer<snd_mixer_elem_> elem,
    int value,
    ffi.Pointer<ffi.Int64> dBvalue,
  ) {
    return _snd_mixer_selem_ask_playback_vol_dB(
      elem,
      value,
      dBvalue,
    );
  }

  late final _snd_mixer_selem_ask_playback_vol_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_ask_playback_vol_dB>>(
          'snd_mixer_selem_ask_playback_vol_dB');
  late final _dart_snd_mixer_selem_ask_playback_vol_dB
      _snd_mixer_selem_ask_playback_vol_dB =
      _snd_mixer_selem_ask_playback_vol_dB_ptr
          .asFunction<_dart_snd_mixer_selem_ask_playback_vol_dB>();

  int snd_mixer_selem_ask_capture_vol_dB(
    ffi.Pointer<snd_mixer_elem_> elem,
    int value,
    ffi.Pointer<ffi.Int64> dBvalue,
  ) {
    return _snd_mixer_selem_ask_capture_vol_dB(
      elem,
      value,
      dBvalue,
    );
  }

  late final _snd_mixer_selem_ask_capture_vol_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_ask_capture_vol_dB>>(
          'snd_mixer_selem_ask_capture_vol_dB');
  late final _dart_snd_mixer_selem_ask_capture_vol_dB
      _snd_mixer_selem_ask_capture_vol_dB =
      _snd_mixer_selem_ask_capture_vol_dB_ptr
          .asFunction<_dart_snd_mixer_selem_ask_capture_vol_dB>();

  int snd_mixer_selem_ask_playback_dB_vol(
    ffi.Pointer<snd_mixer_elem_> elem,
    int dBvalue,
    int dir,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _snd_mixer_selem_ask_playback_dB_vol(
      elem,
      dBvalue,
      dir,
      value,
    );
  }

  late final _snd_mixer_selem_ask_playback_dB_vol_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_ask_playback_dB_vol>>(
          'snd_mixer_selem_ask_playback_dB_vol');
  late final _dart_snd_mixer_selem_ask_playback_dB_vol
      _snd_mixer_selem_ask_playback_dB_vol =
      _snd_mixer_selem_ask_playback_dB_vol_ptr
          .asFunction<_dart_snd_mixer_selem_ask_playback_dB_vol>();

  int snd_mixer_selem_ask_capture_dB_vol(
    ffi.Pointer<snd_mixer_elem_> elem,
    int dBvalue,
    int dir,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _snd_mixer_selem_ask_capture_dB_vol(
      elem,
      dBvalue,
      dir,
      value,
    );
  }

  late final _snd_mixer_selem_ask_capture_dB_vol_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_ask_capture_dB_vol>>(
          'snd_mixer_selem_ask_capture_dB_vol');
  late final _dart_snd_mixer_selem_ask_capture_dB_vol
      _snd_mixer_selem_ask_capture_dB_vol =
      _snd_mixer_selem_ask_capture_dB_vol_ptr
          .asFunction<_dart_snd_mixer_selem_ask_capture_dB_vol>();

  int snd_mixer_selem_get_playback_volume(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _snd_mixer_selem_get_playback_volume(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_playback_volume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_playback_volume>>(
          'snd_mixer_selem_get_playback_volume');
  late final _dart_snd_mixer_selem_get_playback_volume
      _snd_mixer_selem_get_playback_volume =
      _snd_mixer_selem_get_playback_volume_ptr
          .asFunction<_dart_snd_mixer_selem_get_playback_volume>();

  int snd_mixer_selem_get_capture_volume(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _snd_mixer_selem_get_capture_volume(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_capture_volume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_capture_volume>>(
          'snd_mixer_selem_get_capture_volume');
  late final _dart_snd_mixer_selem_get_capture_volume
      _snd_mixer_selem_get_capture_volume =
      _snd_mixer_selem_get_capture_volume_ptr
          .asFunction<_dart_snd_mixer_selem_get_capture_volume>();

  int snd_mixer_selem_get_playback_dB(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _snd_mixer_selem_get_playback_dB(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_playback_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_playback_dB>>(
          'snd_mixer_selem_get_playback_dB');
  late final _dart_snd_mixer_selem_get_playback_dB
      _snd_mixer_selem_get_playback_dB = _snd_mixer_selem_get_playback_dB_ptr
          .asFunction<_dart_snd_mixer_selem_get_playback_dB>();

  int snd_mixer_selem_get_capture_dB(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _snd_mixer_selem_get_capture_dB(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_capture_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_capture_dB>>(
          'snd_mixer_selem_get_capture_dB');
  late final _dart_snd_mixer_selem_get_capture_dB
      _snd_mixer_selem_get_capture_dB = _snd_mixer_selem_get_capture_dB_ptr
          .asFunction<_dart_snd_mixer_selem_get_capture_dB>();

  int snd_mixer_selem_get_playback_switch(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    ffi.Pointer<ffi.Int32> value,
  ) {
    return _snd_mixer_selem_get_playback_switch(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_playback_switch_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_playback_switch>>(
          'snd_mixer_selem_get_playback_switch');
  late final _dart_snd_mixer_selem_get_playback_switch
      _snd_mixer_selem_get_playback_switch =
      _snd_mixer_selem_get_playback_switch_ptr
          .asFunction<_dart_snd_mixer_selem_get_playback_switch>();

  int snd_mixer_selem_get_capture_switch(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    ffi.Pointer<ffi.Int32> value,
  ) {
    return _snd_mixer_selem_get_capture_switch(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_capture_switch_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_capture_switch>>(
          'snd_mixer_selem_get_capture_switch');
  late final _dart_snd_mixer_selem_get_capture_switch
      _snd_mixer_selem_get_capture_switch =
      _snd_mixer_selem_get_capture_switch_ptr
          .asFunction<_dart_snd_mixer_selem_get_capture_switch>();

  int snd_mixer_selem_set_playback_volume(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    int value,
  ) {
    return _snd_mixer_selem_set_playback_volume(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_set_playback_volume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_playback_volume>>(
          'snd_mixer_selem_set_playback_volume');
  late final _dart_snd_mixer_selem_set_playback_volume
      _snd_mixer_selem_set_playback_volume =
      _snd_mixer_selem_set_playback_volume_ptr
          .asFunction<_dart_snd_mixer_selem_set_playback_volume>();

  int snd_mixer_selem_set_capture_volume(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    int value,
  ) {
    return _snd_mixer_selem_set_capture_volume(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_set_capture_volume_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_capture_volume>>(
          'snd_mixer_selem_set_capture_volume');
  late final _dart_snd_mixer_selem_set_capture_volume
      _snd_mixer_selem_set_capture_volume =
      _snd_mixer_selem_set_capture_volume_ptr
          .asFunction<_dart_snd_mixer_selem_set_capture_volume>();

  int snd_mixer_selem_set_playback_dB(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    int value,
    int dir,
  ) {
    return _snd_mixer_selem_set_playback_dB(
      elem,
      channel,
      value,
      dir,
    );
  }

  late final _snd_mixer_selem_set_playback_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_playback_dB>>(
          'snd_mixer_selem_set_playback_dB');
  late final _dart_snd_mixer_selem_set_playback_dB
      _snd_mixer_selem_set_playback_dB = _snd_mixer_selem_set_playback_dB_ptr
          .asFunction<_dart_snd_mixer_selem_set_playback_dB>();

  int snd_mixer_selem_set_capture_dB(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    int value,
    int dir,
  ) {
    return _snd_mixer_selem_set_capture_dB(
      elem,
      channel,
      value,
      dir,
    );
  }

  late final _snd_mixer_selem_set_capture_dB_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_capture_dB>>(
          'snd_mixer_selem_set_capture_dB');
  late final _dart_snd_mixer_selem_set_capture_dB
      _snd_mixer_selem_set_capture_dB = _snd_mixer_selem_set_capture_dB_ptr
          .asFunction<_dart_snd_mixer_selem_set_capture_dB>();

  int snd_mixer_selem_set_playback_volume_all(
    ffi.Pointer<snd_mixer_elem_> elem,
    int value,
  ) {
    return _snd_mixer_selem_set_playback_volume_all(
      elem,
      value,
    );
  }

  late final _snd_mixer_selem_set_playback_volume_all_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_playback_volume_all>>(
          'snd_mixer_selem_set_playback_volume_all');
  late final _dart_snd_mixer_selem_set_playback_volume_all
      _snd_mixer_selem_set_playback_volume_all =
      _snd_mixer_selem_set_playback_volume_all_ptr
          .asFunction<_dart_snd_mixer_selem_set_playback_volume_all>();

  int snd_mixer_selem_set_capture_volume_all(
    ffi.Pointer<snd_mixer_elem_> elem,
    int value,
  ) {
    return _snd_mixer_selem_set_capture_volume_all(
      elem,
      value,
    );
  }

  late final _snd_mixer_selem_set_capture_volume_all_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_capture_volume_all>>(
          'snd_mixer_selem_set_capture_volume_all');
  late final _dart_snd_mixer_selem_set_capture_volume_all
      _snd_mixer_selem_set_capture_volume_all =
      _snd_mixer_selem_set_capture_volume_all_ptr
          .asFunction<_dart_snd_mixer_selem_set_capture_volume_all>();

  int snd_mixer_selem_set_playback_dB_all(
    ffi.Pointer<snd_mixer_elem_> elem,
    int value,
    int dir,
  ) {
    return _snd_mixer_selem_set_playback_dB_all(
      elem,
      value,
      dir,
    );
  }

  late final _snd_mixer_selem_set_playback_dB_all_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_playback_dB_all>>(
          'snd_mixer_selem_set_playback_dB_all');
  late final _dart_snd_mixer_selem_set_playback_dB_all
      _snd_mixer_selem_set_playback_dB_all =
      _snd_mixer_selem_set_playback_dB_all_ptr
          .asFunction<_dart_snd_mixer_selem_set_playback_dB_all>();

  int snd_mixer_selem_set_capture_dB_all(
    ffi.Pointer<snd_mixer_elem_> elem,
    int value,
    int dir,
  ) {
    return _snd_mixer_selem_set_capture_dB_all(
      elem,
      value,
      dir,
    );
  }

  late final _snd_mixer_selem_set_capture_dB_all_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_capture_dB_all>>(
          'snd_mixer_selem_set_capture_dB_all');
  late final _dart_snd_mixer_selem_set_capture_dB_all
      _snd_mixer_selem_set_capture_dB_all =
      _snd_mixer_selem_set_capture_dB_all_ptr
          .asFunction<_dart_snd_mixer_selem_set_capture_dB_all>();

  int snd_mixer_selem_set_playback_switch(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    int value,
  ) {
    return _snd_mixer_selem_set_playback_switch(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_set_playback_switch_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_playback_switch>>(
          'snd_mixer_selem_set_playback_switch');
  late final _dart_snd_mixer_selem_set_playback_switch
      _snd_mixer_selem_set_playback_switch =
      _snd_mixer_selem_set_playback_switch_ptr
          .asFunction<_dart_snd_mixer_selem_set_playback_switch>();

  int snd_mixer_selem_set_capture_switch(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    int value,
  ) {
    return _snd_mixer_selem_set_capture_switch(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_set_capture_switch_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_capture_switch>>(
          'snd_mixer_selem_set_capture_switch');
  late final _dart_snd_mixer_selem_set_capture_switch
      _snd_mixer_selem_set_capture_switch =
      _snd_mixer_selem_set_capture_switch_ptr
          .asFunction<_dart_snd_mixer_selem_set_capture_switch>();

  int snd_mixer_selem_set_playback_switch_all(
    ffi.Pointer<snd_mixer_elem_> elem,
    int value,
  ) {
    return _snd_mixer_selem_set_playback_switch_all(
      elem,
      value,
    );
  }

  late final _snd_mixer_selem_set_playback_switch_all_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_playback_switch_all>>(
          'snd_mixer_selem_set_playback_switch_all');
  late final _dart_snd_mixer_selem_set_playback_switch_all
      _snd_mixer_selem_set_playback_switch_all =
      _snd_mixer_selem_set_playback_switch_all_ptr
          .asFunction<_dart_snd_mixer_selem_set_playback_switch_all>();

  int snd_mixer_selem_set_capture_switch_all(
    ffi.Pointer<snd_mixer_elem_> elem,
    int value,
  ) {
    return _snd_mixer_selem_set_capture_switch_all(
      elem,
      value,
    );
  }

  late final _snd_mixer_selem_set_capture_switch_all_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_capture_switch_all>>(
          'snd_mixer_selem_set_capture_switch_all');
  late final _dart_snd_mixer_selem_set_capture_switch_all
      _snd_mixer_selem_set_capture_switch_all =
      _snd_mixer_selem_set_capture_switch_all_ptr
          .asFunction<_dart_snd_mixer_selem_set_capture_switch_all>();

  int snd_mixer_selem_get_playback_volume_range(
    ffi.Pointer<snd_mixer_elem_> elem,
    ffi.Pointer<ffi.Int64> min,
    ffi.Pointer<ffi.Int64> max,
  ) {
    return _snd_mixer_selem_get_playback_volume_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_get_playback_volume_range_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_playback_volume_range>>(
          'snd_mixer_selem_get_playback_volume_range');
  late final _dart_snd_mixer_selem_get_playback_volume_range
      _snd_mixer_selem_get_playback_volume_range =
      _snd_mixer_selem_get_playback_volume_range_ptr
          .asFunction<_dart_snd_mixer_selem_get_playback_volume_range>();

  int snd_mixer_selem_get_playback_dB_range(
    ffi.Pointer<snd_mixer_elem_> elem,
    ffi.Pointer<ffi.Int64> min,
    ffi.Pointer<ffi.Int64> max,
  ) {
    return _snd_mixer_selem_get_playback_dB_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_get_playback_dB_range_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_playback_dB_range>>(
          'snd_mixer_selem_get_playback_dB_range');
  late final _dart_snd_mixer_selem_get_playback_dB_range
      _snd_mixer_selem_get_playback_dB_range =
      _snd_mixer_selem_get_playback_dB_range_ptr
          .asFunction<_dart_snd_mixer_selem_get_playback_dB_range>();

  int snd_mixer_selem_set_playback_volume_range(
    ffi.Pointer<snd_mixer_elem_> elem,
    int min,
    int max,
  ) {
    return _snd_mixer_selem_set_playback_volume_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_set_playback_volume_range_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_playback_volume_range>>(
          'snd_mixer_selem_set_playback_volume_range');
  late final _dart_snd_mixer_selem_set_playback_volume_range
      _snd_mixer_selem_set_playback_volume_range =
      _snd_mixer_selem_set_playback_volume_range_ptr
          .asFunction<_dart_snd_mixer_selem_set_playback_volume_range>();

  int snd_mixer_selem_get_capture_volume_range(
    ffi.Pointer<snd_mixer_elem_> elem,
    ffi.Pointer<ffi.Int64> min,
    ffi.Pointer<ffi.Int64> max,
  ) {
    return _snd_mixer_selem_get_capture_volume_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_get_capture_volume_range_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_capture_volume_range>>(
          'snd_mixer_selem_get_capture_volume_range');
  late final _dart_snd_mixer_selem_get_capture_volume_range
      _snd_mixer_selem_get_capture_volume_range =
      _snd_mixer_selem_get_capture_volume_range_ptr
          .asFunction<_dart_snd_mixer_selem_get_capture_volume_range>();

  int snd_mixer_selem_get_capture_dB_range(
    ffi.Pointer<snd_mixer_elem_> elem,
    ffi.Pointer<ffi.Int64> min,
    ffi.Pointer<ffi.Int64> max,
  ) {
    return _snd_mixer_selem_get_capture_dB_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_get_capture_dB_range_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_capture_dB_range>>(
          'snd_mixer_selem_get_capture_dB_range');
  late final _dart_snd_mixer_selem_get_capture_dB_range
      _snd_mixer_selem_get_capture_dB_range =
      _snd_mixer_selem_get_capture_dB_range_ptr
          .asFunction<_dart_snd_mixer_selem_get_capture_dB_range>();

  int snd_mixer_selem_set_capture_volume_range(
    ffi.Pointer<snd_mixer_elem_> elem,
    int min,
    int max,
  ) {
    return _snd_mixer_selem_set_capture_volume_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_set_capture_volume_range_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_capture_volume_range>>(
          'snd_mixer_selem_set_capture_volume_range');
  late final _dart_snd_mixer_selem_set_capture_volume_range
      _snd_mixer_selem_set_capture_volume_range =
      _snd_mixer_selem_set_capture_volume_range_ptr
          .asFunction<_dart_snd_mixer_selem_set_capture_volume_range>();

  int snd_mixer_selem_is_enumerated(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_is_enumerated(
      elem,
    );
  }

  late final _snd_mixer_selem_is_enumerated_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_is_enumerated>>(
          'snd_mixer_selem_is_enumerated');
  late final _dart_snd_mixer_selem_is_enumerated
      _snd_mixer_selem_is_enumerated = _snd_mixer_selem_is_enumerated_ptr
          .asFunction<_dart_snd_mixer_selem_is_enumerated>();

  int snd_mixer_selem_is_enum_playback(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_is_enum_playback(
      elem,
    );
  }

  late final _snd_mixer_selem_is_enum_playback_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_is_enum_playback>>(
          'snd_mixer_selem_is_enum_playback');
  late final _dart_snd_mixer_selem_is_enum_playback
      _snd_mixer_selem_is_enum_playback = _snd_mixer_selem_is_enum_playback_ptr
          .asFunction<_dart_snd_mixer_selem_is_enum_playback>();

  int snd_mixer_selem_is_enum_capture(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_is_enum_capture(
      elem,
    );
  }

  late final _snd_mixer_selem_is_enum_capture_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_is_enum_capture>>(
          'snd_mixer_selem_is_enum_capture');
  late final _dart_snd_mixer_selem_is_enum_capture
      _snd_mixer_selem_is_enum_capture = _snd_mixer_selem_is_enum_capture_ptr
          .asFunction<_dart_snd_mixer_selem_is_enum_capture>();

  int snd_mixer_selem_get_enum_items(
    ffi.Pointer<snd_mixer_elem_> elem,
  ) {
    return _snd_mixer_selem_get_enum_items(
      elem,
    );
  }

  late final _snd_mixer_selem_get_enum_items_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_enum_items>>(
          'snd_mixer_selem_get_enum_items');
  late final _dart_snd_mixer_selem_get_enum_items
      _snd_mixer_selem_get_enum_items = _snd_mixer_selem_get_enum_items_ptr
          .asFunction<_dart_snd_mixer_selem_get_enum_items>();

  int snd_mixer_selem_get_enum_item_name(
    ffi.Pointer<snd_mixer_elem_> elem,
    int idx,
    int maxlen,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _snd_mixer_selem_get_enum_item_name(
      elem,
      idx,
      maxlen,
      str,
    );
  }

  late final _snd_mixer_selem_get_enum_item_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_enum_item_name>>(
          'snd_mixer_selem_get_enum_item_name');
  late final _dart_snd_mixer_selem_get_enum_item_name
      _snd_mixer_selem_get_enum_item_name =
      _snd_mixer_selem_get_enum_item_name_ptr
          .asFunction<_dart_snd_mixer_selem_get_enum_item_name>();

  int snd_mixer_selem_get_enum_item(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    ffi.Pointer<ffi.Uint32> idxp,
  ) {
    return _snd_mixer_selem_get_enum_item(
      elem,
      channel,
      idxp,
    );
  }

  late final _snd_mixer_selem_get_enum_item_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_get_enum_item>>(
          'snd_mixer_selem_get_enum_item');
  late final _dart_snd_mixer_selem_get_enum_item
      _snd_mixer_selem_get_enum_item = _snd_mixer_selem_get_enum_item_ptr
          .asFunction<_dart_snd_mixer_selem_get_enum_item>();

  int snd_mixer_selem_set_enum_item(
    ffi.Pointer<snd_mixer_elem_> elem,
    int channel,
    int idx,
  ) {
    return _snd_mixer_selem_set_enum_item(
      elem,
      channel,
      idx,
    );
  }

  late final _snd_mixer_selem_set_enum_item_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_set_enum_item>>(
          'snd_mixer_selem_set_enum_item');
  late final _dart_snd_mixer_selem_set_enum_item
      _snd_mixer_selem_set_enum_item = _snd_mixer_selem_set_enum_item_ptr
          .asFunction<_dart_snd_mixer_selem_set_enum_item>();

  int snd_mixer_selem_id_sizeof() {
    return _snd_mixer_selem_id_sizeof();
  }

  late final _snd_mixer_selem_id_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_sizeof>>(
          'snd_mixer_selem_id_sizeof');
  late final _dart_snd_mixer_selem_id_sizeof _snd_mixer_selem_id_sizeof =
      _snd_mixer_selem_id_sizeof_ptr
          .asFunction<_dart_snd_mixer_selem_id_sizeof>();

  int snd_mixer_selem_id_malloc(
    ffi.Pointer<ffi.Pointer<snd_mixer_selem_id_>> ptr,
  ) {
    return _snd_mixer_selem_id_malloc(
      ptr,
    );
  }

  late final _snd_mixer_selem_id_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_malloc>>(
          'snd_mixer_selem_id_malloc');
  late final _dart_snd_mixer_selem_id_malloc _snd_mixer_selem_id_malloc =
      _snd_mixer_selem_id_malloc_ptr
          .asFunction<_dart_snd_mixer_selem_id_malloc>();

  void snd_mixer_selem_id_free(
    ffi.Pointer<snd_mixer_selem_id_> obj,
  ) {
    return _snd_mixer_selem_id_free(
      obj,
    );
  }

  late final _snd_mixer_selem_id_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_free>>(
          'snd_mixer_selem_id_free');
  late final _dart_snd_mixer_selem_id_free _snd_mixer_selem_id_free =
      _snd_mixer_selem_id_free_ptr.asFunction<_dart_snd_mixer_selem_id_free>();

  void snd_mixer_selem_id_copy(
    ffi.Pointer<snd_mixer_selem_id_> dst,
    ffi.Pointer<snd_mixer_selem_id_> src,
  ) {
    return _snd_mixer_selem_id_copy(
      dst,
      src,
    );
  }

  late final _snd_mixer_selem_id_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_copy>>(
          'snd_mixer_selem_id_copy');
  late final _dart_snd_mixer_selem_id_copy _snd_mixer_selem_id_copy =
      _snd_mixer_selem_id_copy_ptr.asFunction<_dart_snd_mixer_selem_id_copy>();

  ffi.Pointer<ffi.Int8> snd_mixer_selem_id_get_name(
    ffi.Pointer<snd_mixer_selem_id_> obj,
  ) {
    return _snd_mixer_selem_id_get_name(
      obj,
    );
  }

  late final _snd_mixer_selem_id_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_get_name>>(
          'snd_mixer_selem_id_get_name');
  late final _dart_snd_mixer_selem_id_get_name _snd_mixer_selem_id_get_name =
      _snd_mixer_selem_id_get_name_ptr
          .asFunction<_dart_snd_mixer_selem_id_get_name>();

  int snd_mixer_selem_id_get_index(
    ffi.Pointer<snd_mixer_selem_id_> obj,
  ) {
    return _snd_mixer_selem_id_get_index(
      obj,
    );
  }

  late final _snd_mixer_selem_id_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_get_index>>(
          'snd_mixer_selem_id_get_index');
  late final _dart_snd_mixer_selem_id_get_index _snd_mixer_selem_id_get_index =
      _snd_mixer_selem_id_get_index_ptr
          .asFunction<_dart_snd_mixer_selem_id_get_index>();

  void snd_mixer_selem_id_set_name(
    ffi.Pointer<snd_mixer_selem_id_> obj,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _snd_mixer_selem_id_set_name(
      obj,
      val,
    );
  }

  late final _snd_mixer_selem_id_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_set_name>>(
          'snd_mixer_selem_id_set_name');
  late final _dart_snd_mixer_selem_id_set_name _snd_mixer_selem_id_set_name =
      _snd_mixer_selem_id_set_name_ptr
          .asFunction<_dart_snd_mixer_selem_id_set_name>();

  void snd_mixer_selem_id_set_index(
    ffi.Pointer<snd_mixer_selem_id_> obj,
    int val,
  ) {
    return _snd_mixer_selem_id_set_index(
      obj,
      val,
    );
  }

  late final _snd_mixer_selem_id_set_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_set_index>>(
          'snd_mixer_selem_id_set_index');
  late final _dart_snd_mixer_selem_id_set_index _snd_mixer_selem_id_set_index =
      _snd_mixer_selem_id_set_index_ptr
          .asFunction<_dart_snd_mixer_selem_id_set_index>();

  int snd_mixer_selem_id_parse(
    ffi.Pointer<snd_mixer_selem_id_> dst,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _snd_mixer_selem_id_parse(
      dst,
      str,
    );
  }

  late final _snd_mixer_selem_id_parse_ptr =
      _lookup<ffi.NativeFunction<_c_snd_mixer_selem_id_parse>>(
          'snd_mixer_selem_id_parse');
  late final _dart_snd_mixer_selem_id_parse _snd_mixer_selem_id_parse =
      _snd_mixer_selem_id_parse_ptr
          .asFunction<_dart_snd_mixer_selem_id_parse>();

  int snd_seq_open(
    ffi.Pointer<ffi.Pointer<snd_seq_>> handle,
    ffi.Pointer<ffi.Int8> name,
    int streams,
    int mode,
  ) {
    return _snd_seq_open(
      handle,
      name,
      streams,
      mode,
    );
  }

  late final _snd_seq_open_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_open>>('snd_seq_open');
  late final _dart_snd_seq_open _snd_seq_open =
      _snd_seq_open_ptr.asFunction<_dart_snd_seq_open>();

  int snd_seq_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_seq_>> handle,
    ffi.Pointer<ffi.Int8> name,
    int streams,
    int mode,
    ffi.Pointer<snd_config_> lconf,
  ) {
    return _snd_seq_open_lconf(
      handle,
      name,
      streams,
      mode,
      lconf,
    );
  }

  late final _snd_seq_open_lconf_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_open_lconf>>('snd_seq_open_lconf');
  late final _dart_snd_seq_open_lconf _snd_seq_open_lconf =
      _snd_seq_open_lconf_ptr.asFunction<_dart_snd_seq_open_lconf>();

  ffi.Pointer<ffi.Int8> snd_seq_name(
    ffi.Pointer<snd_seq_> seq,
  ) {
    return _snd_seq_name(
      seq,
    );
  }

  late final _snd_seq_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_name>>('snd_seq_name');
  late final _dart_snd_seq_name _snd_seq_name =
      _snd_seq_name_ptr.asFunction<_dart_snd_seq_name>();

  int snd_seq_type(
    ffi.Pointer<snd_seq_> seq,
  ) {
    return _snd_seq_type(
      seq,
    );
  }

  late final _snd_seq_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_type>>('snd_seq_type');
  late final _dart_snd_seq_type _snd_seq_type =
      _snd_seq_type_ptr.asFunction<_dart_snd_seq_type>();

  int snd_seq_close(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_close(
      handle,
    );
  }

  late final _snd_seq_close_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_close>>('snd_seq_close');
  late final _dart_snd_seq_close _snd_seq_close =
      _snd_seq_close_ptr.asFunction<_dart_snd_seq_close>();

  int snd_seq_poll_descriptors_count(
    ffi.Pointer<snd_seq_> handle,
    int events,
  ) {
    return _snd_seq_poll_descriptors_count(
      handle,
      events,
    );
  }

  late final _snd_seq_poll_descriptors_count_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_poll_descriptors_count>>(
          'snd_seq_poll_descriptors_count');
  late final _dart_snd_seq_poll_descriptors_count
      _snd_seq_poll_descriptors_count = _snd_seq_poll_descriptors_count_ptr
          .asFunction<_dart_snd_seq_poll_descriptors_count>();

  int snd_seq_poll_descriptors(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<pollfd> pfds,
    int space,
    int events,
  ) {
    return _snd_seq_poll_descriptors(
      handle,
      pfds,
      space,
      events,
    );
  }

  late final _snd_seq_poll_descriptors_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_poll_descriptors>>(
          'snd_seq_poll_descriptors');
  late final _dart_snd_seq_poll_descriptors _snd_seq_poll_descriptors =
      _snd_seq_poll_descriptors_ptr
          .asFunction<_dart_snd_seq_poll_descriptors>();

  int snd_seq_poll_descriptors_revents(
    ffi.Pointer<snd_seq_> seq,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.Uint16> revents,
  ) {
    return _snd_seq_poll_descriptors_revents(
      seq,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_seq_poll_descriptors_revents_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_poll_descriptors_revents>>(
          'snd_seq_poll_descriptors_revents');
  late final _dart_snd_seq_poll_descriptors_revents
      _snd_seq_poll_descriptors_revents = _snd_seq_poll_descriptors_revents_ptr
          .asFunction<_dart_snd_seq_poll_descriptors_revents>();

  int snd_seq_nonblock(
    ffi.Pointer<snd_seq_> handle,
    int nonblock,
  ) {
    return _snd_seq_nonblock(
      handle,
      nonblock,
    );
  }

  late final _snd_seq_nonblock_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_nonblock>>('snd_seq_nonblock');
  late final _dart_snd_seq_nonblock _snd_seq_nonblock =
      _snd_seq_nonblock_ptr.asFunction<_dart_snd_seq_nonblock>();

  int snd_seq_client_id(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_client_id(
      handle,
    );
  }

  late final _snd_seq_client_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_id>>('snd_seq_client_id');
  late final _dart_snd_seq_client_id _snd_seq_client_id =
      _snd_seq_client_id_ptr.asFunction<_dart_snd_seq_client_id>();

  int snd_seq_get_output_buffer_size(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_get_output_buffer_size(
      handle,
    );
  }

  late final _snd_seq_get_output_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_output_buffer_size>>(
          'snd_seq_get_output_buffer_size');
  late final _dart_snd_seq_get_output_buffer_size
      _snd_seq_get_output_buffer_size = _snd_seq_get_output_buffer_size_ptr
          .asFunction<_dart_snd_seq_get_output_buffer_size>();

  int snd_seq_get_input_buffer_size(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_get_input_buffer_size(
      handle,
    );
  }

  late final _snd_seq_get_input_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_input_buffer_size>>(
          'snd_seq_get_input_buffer_size');
  late final _dart_snd_seq_get_input_buffer_size
      _snd_seq_get_input_buffer_size = _snd_seq_get_input_buffer_size_ptr
          .asFunction<_dart_snd_seq_get_input_buffer_size>();

  int snd_seq_set_output_buffer_size(
    ffi.Pointer<snd_seq_> handle,
    int size,
  ) {
    return _snd_seq_set_output_buffer_size(
      handle,
      size,
    );
  }

  late final _snd_seq_set_output_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_output_buffer_size>>(
          'snd_seq_set_output_buffer_size');
  late final _dart_snd_seq_set_output_buffer_size
      _snd_seq_set_output_buffer_size = _snd_seq_set_output_buffer_size_ptr
          .asFunction<_dart_snd_seq_set_output_buffer_size>();

  int snd_seq_set_input_buffer_size(
    ffi.Pointer<snd_seq_> handle,
    int size,
  ) {
    return _snd_seq_set_input_buffer_size(
      handle,
      size,
    );
  }

  late final _snd_seq_set_input_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_input_buffer_size>>(
          'snd_seq_set_input_buffer_size');
  late final _dart_snd_seq_set_input_buffer_size
      _snd_seq_set_input_buffer_size = _snd_seq_set_input_buffer_size_ptr
          .asFunction<_dart_snd_seq_set_input_buffer_size>();

  int snd_seq_system_info_sizeof() {
    return _snd_seq_system_info_sizeof();
  }

  late final _snd_seq_system_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_sizeof>>(
          'snd_seq_system_info_sizeof');
  late final _dart_snd_seq_system_info_sizeof _snd_seq_system_info_sizeof =
      _snd_seq_system_info_sizeof_ptr
          .asFunction<_dart_snd_seq_system_info_sizeof>();

  int snd_seq_system_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_system_info_>> ptr,
  ) {
    return _snd_seq_system_info_malloc(
      ptr,
    );
  }

  late final _snd_seq_system_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_malloc>>(
          'snd_seq_system_info_malloc');
  late final _dart_snd_seq_system_info_malloc _snd_seq_system_info_malloc =
      _snd_seq_system_info_malloc_ptr
          .asFunction<_dart_snd_seq_system_info_malloc>();

  void snd_seq_system_info_free(
    ffi.Pointer<snd_seq_system_info_> ptr,
  ) {
    return _snd_seq_system_info_free(
      ptr,
    );
  }

  late final _snd_seq_system_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_free>>(
          'snd_seq_system_info_free');
  late final _dart_snd_seq_system_info_free _snd_seq_system_info_free =
      _snd_seq_system_info_free_ptr
          .asFunction<_dart_snd_seq_system_info_free>();

  void snd_seq_system_info_copy(
    ffi.Pointer<snd_seq_system_info_> dst,
    ffi.Pointer<snd_seq_system_info_> src,
  ) {
    return _snd_seq_system_info_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_system_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_copy>>(
          'snd_seq_system_info_copy');
  late final _dart_snd_seq_system_info_copy _snd_seq_system_info_copy =
      _snd_seq_system_info_copy_ptr
          .asFunction<_dart_snd_seq_system_info_copy>();

  int snd_seq_system_info_get_queues(
    ffi.Pointer<snd_seq_system_info_> info,
  ) {
    return _snd_seq_system_info_get_queues(
      info,
    );
  }

  late final _snd_seq_system_info_get_queues_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_get_queues>>(
          'snd_seq_system_info_get_queues');
  late final _dart_snd_seq_system_info_get_queues
      _snd_seq_system_info_get_queues = _snd_seq_system_info_get_queues_ptr
          .asFunction<_dart_snd_seq_system_info_get_queues>();

  int snd_seq_system_info_get_clients(
    ffi.Pointer<snd_seq_system_info_> info,
  ) {
    return _snd_seq_system_info_get_clients(
      info,
    );
  }

  late final _snd_seq_system_info_get_clients_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_get_clients>>(
          'snd_seq_system_info_get_clients');
  late final _dart_snd_seq_system_info_get_clients
      _snd_seq_system_info_get_clients = _snd_seq_system_info_get_clients_ptr
          .asFunction<_dart_snd_seq_system_info_get_clients>();

  int snd_seq_system_info_get_ports(
    ffi.Pointer<snd_seq_system_info_> info,
  ) {
    return _snd_seq_system_info_get_ports(
      info,
    );
  }

  late final _snd_seq_system_info_get_ports_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_get_ports>>(
          'snd_seq_system_info_get_ports');
  late final _dart_snd_seq_system_info_get_ports
      _snd_seq_system_info_get_ports = _snd_seq_system_info_get_ports_ptr
          .asFunction<_dart_snd_seq_system_info_get_ports>();

  int snd_seq_system_info_get_channels(
    ffi.Pointer<snd_seq_system_info_> info,
  ) {
    return _snd_seq_system_info_get_channels(
      info,
    );
  }

  late final _snd_seq_system_info_get_channels_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_get_channels>>(
          'snd_seq_system_info_get_channels');
  late final _dart_snd_seq_system_info_get_channels
      _snd_seq_system_info_get_channels = _snd_seq_system_info_get_channels_ptr
          .asFunction<_dart_snd_seq_system_info_get_channels>();

  int snd_seq_system_info_get_cur_clients(
    ffi.Pointer<snd_seq_system_info_> info,
  ) {
    return _snd_seq_system_info_get_cur_clients(
      info,
    );
  }

  late final _snd_seq_system_info_get_cur_clients_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_get_cur_clients>>(
          'snd_seq_system_info_get_cur_clients');
  late final _dart_snd_seq_system_info_get_cur_clients
      _snd_seq_system_info_get_cur_clients =
      _snd_seq_system_info_get_cur_clients_ptr
          .asFunction<_dart_snd_seq_system_info_get_cur_clients>();

  int snd_seq_system_info_get_cur_queues(
    ffi.Pointer<snd_seq_system_info_> info,
  ) {
    return _snd_seq_system_info_get_cur_queues(
      info,
    );
  }

  late final _snd_seq_system_info_get_cur_queues_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info_get_cur_queues>>(
          'snd_seq_system_info_get_cur_queues');
  late final _dart_snd_seq_system_info_get_cur_queues
      _snd_seq_system_info_get_cur_queues =
      _snd_seq_system_info_get_cur_queues_ptr
          .asFunction<_dart_snd_seq_system_info_get_cur_queues>();

  int snd_seq_system_info(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_system_info_> info,
  ) {
    return _snd_seq_system_info(
      handle,
      info,
    );
  }

  late final _snd_seq_system_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_system_info>>(
          'snd_seq_system_info');
  late final _dart_snd_seq_system_info _snd_seq_system_info =
      _snd_seq_system_info_ptr.asFunction<_dart_snd_seq_system_info>();

  int snd_seq_client_info_sizeof() {
    return _snd_seq_client_info_sizeof();
  }

  late final _snd_seq_client_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_sizeof>>(
          'snd_seq_client_info_sizeof');
  late final _dart_snd_seq_client_info_sizeof _snd_seq_client_info_sizeof =
      _snd_seq_client_info_sizeof_ptr
          .asFunction<_dart_snd_seq_client_info_sizeof>();

  int snd_seq_client_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_client_info_>> ptr,
  ) {
    return _snd_seq_client_info_malloc(
      ptr,
    );
  }

  late final _snd_seq_client_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_malloc>>(
          'snd_seq_client_info_malloc');
  late final _dart_snd_seq_client_info_malloc _snd_seq_client_info_malloc =
      _snd_seq_client_info_malloc_ptr
          .asFunction<_dart_snd_seq_client_info_malloc>();

  void snd_seq_client_info_free(
    ffi.Pointer<snd_seq_client_info_> ptr,
  ) {
    return _snd_seq_client_info_free(
      ptr,
    );
  }

  late final _snd_seq_client_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_free>>(
          'snd_seq_client_info_free');
  late final _dart_snd_seq_client_info_free _snd_seq_client_info_free =
      _snd_seq_client_info_free_ptr
          .asFunction<_dart_snd_seq_client_info_free>();

  void snd_seq_client_info_copy(
    ffi.Pointer<snd_seq_client_info_> dst,
    ffi.Pointer<snd_seq_client_info_> src,
  ) {
    return _snd_seq_client_info_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_client_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_copy>>(
          'snd_seq_client_info_copy');
  late final _dart_snd_seq_client_info_copy _snd_seq_client_info_copy =
      _snd_seq_client_info_copy_ptr
          .asFunction<_dart_snd_seq_client_info_copy>();

  int snd_seq_client_info_get_client(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_client(
      info,
    );
  }

  late final _snd_seq_client_info_get_client_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_client>>(
          'snd_seq_client_info_get_client');
  late final _dart_snd_seq_client_info_get_client
      _snd_seq_client_info_get_client = _snd_seq_client_info_get_client_ptr
          .asFunction<_dart_snd_seq_client_info_get_client>();

  int snd_seq_client_info_get_type(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_type(
      info,
    );
  }

  late final _snd_seq_client_info_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_type>>(
          'snd_seq_client_info_get_type');
  late final _dart_snd_seq_client_info_get_type _snd_seq_client_info_get_type =
      _snd_seq_client_info_get_type_ptr
          .asFunction<_dart_snd_seq_client_info_get_type>();

  ffi.Pointer<ffi.Int8> snd_seq_client_info_get_name(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_name(
      info,
    );
  }

  late final _snd_seq_client_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_name>>(
          'snd_seq_client_info_get_name');
  late final _dart_snd_seq_client_info_get_name _snd_seq_client_info_get_name =
      _snd_seq_client_info_get_name_ptr
          .asFunction<_dart_snd_seq_client_info_get_name>();

  int snd_seq_client_info_get_broadcast_filter(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_broadcast_filter(
      info,
    );
  }

  late final _snd_seq_client_info_get_broadcast_filter_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_broadcast_filter>>(
          'snd_seq_client_info_get_broadcast_filter');
  late final _dart_snd_seq_client_info_get_broadcast_filter
      _snd_seq_client_info_get_broadcast_filter =
      _snd_seq_client_info_get_broadcast_filter_ptr
          .asFunction<_dart_snd_seq_client_info_get_broadcast_filter>();

  int snd_seq_client_info_get_error_bounce(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_error_bounce(
      info,
    );
  }

  late final _snd_seq_client_info_get_error_bounce_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_error_bounce>>(
          'snd_seq_client_info_get_error_bounce');
  late final _dart_snd_seq_client_info_get_error_bounce
      _snd_seq_client_info_get_error_bounce =
      _snd_seq_client_info_get_error_bounce_ptr
          .asFunction<_dart_snd_seq_client_info_get_error_bounce>();

  int snd_seq_client_info_get_card(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_card(
      info,
    );
  }

  late final _snd_seq_client_info_get_card_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_card>>(
          'snd_seq_client_info_get_card');
  late final _dart_snd_seq_client_info_get_card _snd_seq_client_info_get_card =
      _snd_seq_client_info_get_card_ptr
          .asFunction<_dart_snd_seq_client_info_get_card>();

  int snd_seq_client_info_get_pid(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_pid(
      info,
    );
  }

  late final _snd_seq_client_info_get_pid_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_pid>>(
          'snd_seq_client_info_get_pid');
  late final _dart_snd_seq_client_info_get_pid _snd_seq_client_info_get_pid =
      _snd_seq_client_info_get_pid_ptr
          .asFunction<_dart_snd_seq_client_info_get_pid>();

  ffi.Pointer<ffi.Uint8> snd_seq_client_info_get_event_filter(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_event_filter(
      info,
    );
  }

  late final _snd_seq_client_info_get_event_filter_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_event_filter>>(
          'snd_seq_client_info_get_event_filter');
  late final _dart_snd_seq_client_info_get_event_filter
      _snd_seq_client_info_get_event_filter =
      _snd_seq_client_info_get_event_filter_ptr
          .asFunction<_dart_snd_seq_client_info_get_event_filter>();

  int snd_seq_client_info_get_num_ports(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_num_ports(
      info,
    );
  }

  late final _snd_seq_client_info_get_num_ports_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_num_ports>>(
          'snd_seq_client_info_get_num_ports');
  late final _dart_snd_seq_client_info_get_num_ports
      _snd_seq_client_info_get_num_ports =
      _snd_seq_client_info_get_num_ports_ptr
          .asFunction<_dart_snd_seq_client_info_get_num_ports>();

  int snd_seq_client_info_get_event_lost(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_get_event_lost(
      info,
    );
  }

  late final _snd_seq_client_info_get_event_lost_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_get_event_lost>>(
          'snd_seq_client_info_get_event_lost');
  late final _dart_snd_seq_client_info_get_event_lost
      _snd_seq_client_info_get_event_lost =
      _snd_seq_client_info_get_event_lost_ptr
          .asFunction<_dart_snd_seq_client_info_get_event_lost>();

  void snd_seq_client_info_set_client(
    ffi.Pointer<snd_seq_client_info_> info,
    int client,
  ) {
    return _snd_seq_client_info_set_client(
      info,
      client,
    );
  }

  late final _snd_seq_client_info_set_client_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_set_client>>(
          'snd_seq_client_info_set_client');
  late final _dart_snd_seq_client_info_set_client
      _snd_seq_client_info_set_client = _snd_seq_client_info_set_client_ptr
          .asFunction<_dart_snd_seq_client_info_set_client>();

  void snd_seq_client_info_set_name(
    ffi.Pointer<snd_seq_client_info_> info,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_seq_client_info_set_name(
      info,
      name,
    );
  }

  late final _snd_seq_client_info_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_set_name>>(
          'snd_seq_client_info_set_name');
  late final _dart_snd_seq_client_info_set_name _snd_seq_client_info_set_name =
      _snd_seq_client_info_set_name_ptr
          .asFunction<_dart_snd_seq_client_info_set_name>();

  void snd_seq_client_info_set_broadcast_filter(
    ffi.Pointer<snd_seq_client_info_> info,
    int val,
  ) {
    return _snd_seq_client_info_set_broadcast_filter(
      info,
      val,
    );
  }

  late final _snd_seq_client_info_set_broadcast_filter_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_set_broadcast_filter>>(
          'snd_seq_client_info_set_broadcast_filter');
  late final _dart_snd_seq_client_info_set_broadcast_filter
      _snd_seq_client_info_set_broadcast_filter =
      _snd_seq_client_info_set_broadcast_filter_ptr
          .asFunction<_dart_snd_seq_client_info_set_broadcast_filter>();

  void snd_seq_client_info_set_error_bounce(
    ffi.Pointer<snd_seq_client_info_> info,
    int val,
  ) {
    return _snd_seq_client_info_set_error_bounce(
      info,
      val,
    );
  }

  late final _snd_seq_client_info_set_error_bounce_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_set_error_bounce>>(
          'snd_seq_client_info_set_error_bounce');
  late final _dart_snd_seq_client_info_set_error_bounce
      _snd_seq_client_info_set_error_bounce =
      _snd_seq_client_info_set_error_bounce_ptr
          .asFunction<_dart_snd_seq_client_info_set_error_bounce>();

  void snd_seq_client_info_set_event_filter(
    ffi.Pointer<snd_seq_client_info_> info,
    ffi.Pointer<ffi.Uint8> filter,
  ) {
    return _snd_seq_client_info_set_event_filter(
      info,
      filter,
    );
  }

  late final _snd_seq_client_info_set_event_filter_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_set_event_filter>>(
          'snd_seq_client_info_set_event_filter');
  late final _dart_snd_seq_client_info_set_event_filter
      _snd_seq_client_info_set_event_filter =
      _snd_seq_client_info_set_event_filter_ptr
          .asFunction<_dart_snd_seq_client_info_set_event_filter>();

  void snd_seq_client_info_event_filter_clear(
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_client_info_event_filter_clear(
      info,
    );
  }

  late final _snd_seq_client_info_event_filter_clear_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_event_filter_clear>>(
          'snd_seq_client_info_event_filter_clear');
  late final _dart_snd_seq_client_info_event_filter_clear
      _snd_seq_client_info_event_filter_clear =
      _snd_seq_client_info_event_filter_clear_ptr
          .asFunction<_dart_snd_seq_client_info_event_filter_clear>();

  void snd_seq_client_info_event_filter_add(
    ffi.Pointer<snd_seq_client_info_> info,
    int event_type,
  ) {
    return _snd_seq_client_info_event_filter_add(
      info,
      event_type,
    );
  }

  late final _snd_seq_client_info_event_filter_add_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_event_filter_add>>(
          'snd_seq_client_info_event_filter_add');
  late final _dart_snd_seq_client_info_event_filter_add
      _snd_seq_client_info_event_filter_add =
      _snd_seq_client_info_event_filter_add_ptr
          .asFunction<_dart_snd_seq_client_info_event_filter_add>();

  void snd_seq_client_info_event_filter_del(
    ffi.Pointer<snd_seq_client_info_> info,
    int event_type,
  ) {
    return _snd_seq_client_info_event_filter_del(
      info,
      event_type,
    );
  }

  late final _snd_seq_client_info_event_filter_del_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_event_filter_del>>(
          'snd_seq_client_info_event_filter_del');
  late final _dart_snd_seq_client_info_event_filter_del
      _snd_seq_client_info_event_filter_del =
      _snd_seq_client_info_event_filter_del_ptr
          .asFunction<_dart_snd_seq_client_info_event_filter_del>();

  int snd_seq_client_info_event_filter_check(
    ffi.Pointer<snd_seq_client_info_> info,
    int event_type,
  ) {
    return _snd_seq_client_info_event_filter_check(
      info,
      event_type,
    );
  }

  late final _snd_seq_client_info_event_filter_check_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_info_event_filter_check>>(
          'snd_seq_client_info_event_filter_check');
  late final _dart_snd_seq_client_info_event_filter_check
      _snd_seq_client_info_event_filter_check =
      _snd_seq_client_info_event_filter_check_ptr
          .asFunction<_dart_snd_seq_client_info_event_filter_check>();

  int snd_seq_get_client_info(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_get_client_info(
      handle,
      info,
    );
  }

  late final _snd_seq_get_client_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_client_info>>(
          'snd_seq_get_client_info');
  late final _dart_snd_seq_get_client_info _snd_seq_get_client_info =
      _snd_seq_get_client_info_ptr.asFunction<_dart_snd_seq_get_client_info>();

  int snd_seq_get_any_client_info(
    ffi.Pointer<snd_seq_> handle,
    int client,
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_get_any_client_info(
      handle,
      client,
      info,
    );
  }

  late final _snd_seq_get_any_client_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_any_client_info>>(
          'snd_seq_get_any_client_info');
  late final _dart_snd_seq_get_any_client_info _snd_seq_get_any_client_info =
      _snd_seq_get_any_client_info_ptr
          .asFunction<_dart_snd_seq_get_any_client_info>();

  int snd_seq_set_client_info(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_set_client_info(
      handle,
      info,
    );
  }

  late final _snd_seq_set_client_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_client_info>>(
          'snd_seq_set_client_info');
  late final _dart_snd_seq_set_client_info _snd_seq_set_client_info =
      _snd_seq_set_client_info_ptr.asFunction<_dart_snd_seq_set_client_info>();

  int snd_seq_query_next_client(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_client_info_> info,
  ) {
    return _snd_seq_query_next_client(
      handle,
      info,
    );
  }

  late final _snd_seq_query_next_client_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_next_client>>(
          'snd_seq_query_next_client');
  late final _dart_snd_seq_query_next_client _snd_seq_query_next_client =
      _snd_seq_query_next_client_ptr
          .asFunction<_dart_snd_seq_query_next_client>();

  int snd_seq_client_pool_sizeof() {
    return _snd_seq_client_pool_sizeof();
  }

  late final _snd_seq_client_pool_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_sizeof>>(
          'snd_seq_client_pool_sizeof');
  late final _dart_snd_seq_client_pool_sizeof _snd_seq_client_pool_sizeof =
      _snd_seq_client_pool_sizeof_ptr
          .asFunction<_dart_snd_seq_client_pool_sizeof>();

  int snd_seq_client_pool_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_client_pool_>> ptr,
  ) {
    return _snd_seq_client_pool_malloc(
      ptr,
    );
  }

  late final _snd_seq_client_pool_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_malloc>>(
          'snd_seq_client_pool_malloc');
  late final _dart_snd_seq_client_pool_malloc _snd_seq_client_pool_malloc =
      _snd_seq_client_pool_malloc_ptr
          .asFunction<_dart_snd_seq_client_pool_malloc>();

  void snd_seq_client_pool_free(
    ffi.Pointer<snd_seq_client_pool_> ptr,
  ) {
    return _snd_seq_client_pool_free(
      ptr,
    );
  }

  late final _snd_seq_client_pool_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_free>>(
          'snd_seq_client_pool_free');
  late final _dart_snd_seq_client_pool_free _snd_seq_client_pool_free =
      _snd_seq_client_pool_free_ptr
          .asFunction<_dart_snd_seq_client_pool_free>();

  void snd_seq_client_pool_copy(
    ffi.Pointer<snd_seq_client_pool_> dst,
    ffi.Pointer<snd_seq_client_pool_> src,
  ) {
    return _snd_seq_client_pool_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_client_pool_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_copy>>(
          'snd_seq_client_pool_copy');
  late final _dart_snd_seq_client_pool_copy _snd_seq_client_pool_copy =
      _snd_seq_client_pool_copy_ptr
          .asFunction<_dart_snd_seq_client_pool_copy>();

  int snd_seq_client_pool_get_client(
    ffi.Pointer<snd_seq_client_pool_> info,
  ) {
    return _snd_seq_client_pool_get_client(
      info,
    );
  }

  late final _snd_seq_client_pool_get_client_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_get_client>>(
          'snd_seq_client_pool_get_client');
  late final _dart_snd_seq_client_pool_get_client
      _snd_seq_client_pool_get_client = _snd_seq_client_pool_get_client_ptr
          .asFunction<_dart_snd_seq_client_pool_get_client>();

  int snd_seq_client_pool_get_output_pool(
    ffi.Pointer<snd_seq_client_pool_> info,
  ) {
    return _snd_seq_client_pool_get_output_pool(
      info,
    );
  }

  late final _snd_seq_client_pool_get_output_pool_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_get_output_pool>>(
          'snd_seq_client_pool_get_output_pool');
  late final _dart_snd_seq_client_pool_get_output_pool
      _snd_seq_client_pool_get_output_pool =
      _snd_seq_client_pool_get_output_pool_ptr
          .asFunction<_dart_snd_seq_client_pool_get_output_pool>();

  int snd_seq_client_pool_get_input_pool(
    ffi.Pointer<snd_seq_client_pool_> info,
  ) {
    return _snd_seq_client_pool_get_input_pool(
      info,
    );
  }

  late final _snd_seq_client_pool_get_input_pool_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_get_input_pool>>(
          'snd_seq_client_pool_get_input_pool');
  late final _dart_snd_seq_client_pool_get_input_pool
      _snd_seq_client_pool_get_input_pool =
      _snd_seq_client_pool_get_input_pool_ptr
          .asFunction<_dart_snd_seq_client_pool_get_input_pool>();

  int snd_seq_client_pool_get_output_room(
    ffi.Pointer<snd_seq_client_pool_> info,
  ) {
    return _snd_seq_client_pool_get_output_room(
      info,
    );
  }

  late final _snd_seq_client_pool_get_output_room_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_get_output_room>>(
          'snd_seq_client_pool_get_output_room');
  late final _dart_snd_seq_client_pool_get_output_room
      _snd_seq_client_pool_get_output_room =
      _snd_seq_client_pool_get_output_room_ptr
          .asFunction<_dart_snd_seq_client_pool_get_output_room>();

  int snd_seq_client_pool_get_output_free(
    ffi.Pointer<snd_seq_client_pool_> info,
  ) {
    return _snd_seq_client_pool_get_output_free(
      info,
    );
  }

  late final _snd_seq_client_pool_get_output_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_get_output_free>>(
          'snd_seq_client_pool_get_output_free');
  late final _dart_snd_seq_client_pool_get_output_free
      _snd_seq_client_pool_get_output_free =
      _snd_seq_client_pool_get_output_free_ptr
          .asFunction<_dart_snd_seq_client_pool_get_output_free>();

  int snd_seq_client_pool_get_input_free(
    ffi.Pointer<snd_seq_client_pool_> info,
  ) {
    return _snd_seq_client_pool_get_input_free(
      info,
    );
  }

  late final _snd_seq_client_pool_get_input_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_get_input_free>>(
          'snd_seq_client_pool_get_input_free');
  late final _dart_snd_seq_client_pool_get_input_free
      _snd_seq_client_pool_get_input_free =
      _snd_seq_client_pool_get_input_free_ptr
          .asFunction<_dart_snd_seq_client_pool_get_input_free>();

  void snd_seq_client_pool_set_output_pool(
    ffi.Pointer<snd_seq_client_pool_> info,
    int size,
  ) {
    return _snd_seq_client_pool_set_output_pool(
      info,
      size,
    );
  }

  late final _snd_seq_client_pool_set_output_pool_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_set_output_pool>>(
          'snd_seq_client_pool_set_output_pool');
  late final _dart_snd_seq_client_pool_set_output_pool
      _snd_seq_client_pool_set_output_pool =
      _snd_seq_client_pool_set_output_pool_ptr
          .asFunction<_dart_snd_seq_client_pool_set_output_pool>();

  void snd_seq_client_pool_set_input_pool(
    ffi.Pointer<snd_seq_client_pool_> info,
    int size,
  ) {
    return _snd_seq_client_pool_set_input_pool(
      info,
      size,
    );
  }

  late final _snd_seq_client_pool_set_input_pool_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_set_input_pool>>(
          'snd_seq_client_pool_set_input_pool');
  late final _dart_snd_seq_client_pool_set_input_pool
      _snd_seq_client_pool_set_input_pool =
      _snd_seq_client_pool_set_input_pool_ptr
          .asFunction<_dart_snd_seq_client_pool_set_input_pool>();

  void snd_seq_client_pool_set_output_room(
    ffi.Pointer<snd_seq_client_pool_> info,
    int size,
  ) {
    return _snd_seq_client_pool_set_output_room(
      info,
      size,
    );
  }

  late final _snd_seq_client_pool_set_output_room_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_client_pool_set_output_room>>(
          'snd_seq_client_pool_set_output_room');
  late final _dart_snd_seq_client_pool_set_output_room
      _snd_seq_client_pool_set_output_room =
      _snd_seq_client_pool_set_output_room_ptr
          .asFunction<_dart_snd_seq_client_pool_set_output_room>();

  int snd_seq_get_client_pool(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_client_pool_> info,
  ) {
    return _snd_seq_get_client_pool(
      handle,
      info,
    );
  }

  late final _snd_seq_get_client_pool_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_client_pool>>(
          'snd_seq_get_client_pool');
  late final _dart_snd_seq_get_client_pool _snd_seq_get_client_pool =
      _snd_seq_get_client_pool_ptr.asFunction<_dart_snd_seq_get_client_pool>();

  int snd_seq_set_client_pool(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_client_pool_> info,
  ) {
    return _snd_seq_set_client_pool(
      handle,
      info,
    );
  }

  late final _snd_seq_set_client_pool_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_client_pool>>(
          'snd_seq_set_client_pool');
  late final _dart_snd_seq_set_client_pool _snd_seq_set_client_pool =
      _snd_seq_set_client_pool_ptr.asFunction<_dart_snd_seq_set_client_pool>();

  int snd_seq_port_info_sizeof() {
    return _snd_seq_port_info_sizeof();
  }

  late final _snd_seq_port_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_sizeof>>(
          'snd_seq_port_info_sizeof');
  late final _dart_snd_seq_port_info_sizeof _snd_seq_port_info_sizeof =
      _snd_seq_port_info_sizeof_ptr
          .asFunction<_dart_snd_seq_port_info_sizeof>();

  int snd_seq_port_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_port_info_>> ptr,
  ) {
    return _snd_seq_port_info_malloc(
      ptr,
    );
  }

  late final _snd_seq_port_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_malloc>>(
          'snd_seq_port_info_malloc');
  late final _dart_snd_seq_port_info_malloc _snd_seq_port_info_malloc =
      _snd_seq_port_info_malloc_ptr
          .asFunction<_dart_snd_seq_port_info_malloc>();

  void snd_seq_port_info_free(
    ffi.Pointer<snd_seq_port_info_> ptr,
  ) {
    return _snd_seq_port_info_free(
      ptr,
    );
  }

  late final _snd_seq_port_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_free>>(
          'snd_seq_port_info_free');
  late final _dart_snd_seq_port_info_free _snd_seq_port_info_free =
      _snd_seq_port_info_free_ptr.asFunction<_dart_snd_seq_port_info_free>();

  void snd_seq_port_info_copy(
    ffi.Pointer<snd_seq_port_info_> dst,
    ffi.Pointer<snd_seq_port_info_> src,
  ) {
    return _snd_seq_port_info_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_port_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_copy>>(
          'snd_seq_port_info_copy');
  late final _dart_snd_seq_port_info_copy _snd_seq_port_info_copy =
      _snd_seq_port_info_copy_ptr.asFunction<_dart_snd_seq_port_info_copy>();

  int snd_seq_port_info_get_client(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_client(
      info,
    );
  }

  late final _snd_seq_port_info_get_client_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_client>>(
          'snd_seq_port_info_get_client');
  late final _dart_snd_seq_port_info_get_client _snd_seq_port_info_get_client =
      _snd_seq_port_info_get_client_ptr
          .asFunction<_dart_snd_seq_port_info_get_client>();

  int snd_seq_port_info_get_port(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_port(
      info,
    );
  }

  late final _snd_seq_port_info_get_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_port>>(
          'snd_seq_port_info_get_port');
  late final _dart_snd_seq_port_info_get_port _snd_seq_port_info_get_port =
      _snd_seq_port_info_get_port_ptr
          .asFunction<_dart_snd_seq_port_info_get_port>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_port_info_get_addr(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_addr(
      info,
    );
  }

  late final _snd_seq_port_info_get_addr_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_addr>>(
          'snd_seq_port_info_get_addr');
  late final _dart_snd_seq_port_info_get_addr _snd_seq_port_info_get_addr =
      _snd_seq_port_info_get_addr_ptr
          .asFunction<_dart_snd_seq_port_info_get_addr>();

  ffi.Pointer<ffi.Int8> snd_seq_port_info_get_name(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_name(
      info,
    );
  }

  late final _snd_seq_port_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_name>>(
          'snd_seq_port_info_get_name');
  late final _dart_snd_seq_port_info_get_name _snd_seq_port_info_get_name =
      _snd_seq_port_info_get_name_ptr
          .asFunction<_dart_snd_seq_port_info_get_name>();

  int snd_seq_port_info_get_capability(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_capability(
      info,
    );
  }

  late final _snd_seq_port_info_get_capability_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_capability>>(
          'snd_seq_port_info_get_capability');
  late final _dart_snd_seq_port_info_get_capability
      _snd_seq_port_info_get_capability = _snd_seq_port_info_get_capability_ptr
          .asFunction<_dart_snd_seq_port_info_get_capability>();

  int snd_seq_port_info_get_type(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_type(
      info,
    );
  }

  late final _snd_seq_port_info_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_type>>(
          'snd_seq_port_info_get_type');
  late final _dart_snd_seq_port_info_get_type _snd_seq_port_info_get_type =
      _snd_seq_port_info_get_type_ptr
          .asFunction<_dart_snd_seq_port_info_get_type>();

  int snd_seq_port_info_get_midi_channels(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_midi_channels(
      info,
    );
  }

  late final _snd_seq_port_info_get_midi_channels_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_midi_channels>>(
          'snd_seq_port_info_get_midi_channels');
  late final _dart_snd_seq_port_info_get_midi_channels
      _snd_seq_port_info_get_midi_channels =
      _snd_seq_port_info_get_midi_channels_ptr
          .asFunction<_dart_snd_seq_port_info_get_midi_channels>();

  int snd_seq_port_info_get_midi_voices(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_midi_voices(
      info,
    );
  }

  late final _snd_seq_port_info_get_midi_voices_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_midi_voices>>(
          'snd_seq_port_info_get_midi_voices');
  late final _dart_snd_seq_port_info_get_midi_voices
      _snd_seq_port_info_get_midi_voices =
      _snd_seq_port_info_get_midi_voices_ptr
          .asFunction<_dart_snd_seq_port_info_get_midi_voices>();

  int snd_seq_port_info_get_synth_voices(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_synth_voices(
      info,
    );
  }

  late final _snd_seq_port_info_get_synth_voices_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_synth_voices>>(
          'snd_seq_port_info_get_synth_voices');
  late final _dart_snd_seq_port_info_get_synth_voices
      _snd_seq_port_info_get_synth_voices =
      _snd_seq_port_info_get_synth_voices_ptr
          .asFunction<_dart_snd_seq_port_info_get_synth_voices>();

  int snd_seq_port_info_get_read_use(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_read_use(
      info,
    );
  }

  late final _snd_seq_port_info_get_read_use_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_read_use>>(
          'snd_seq_port_info_get_read_use');
  late final _dart_snd_seq_port_info_get_read_use
      _snd_seq_port_info_get_read_use = _snd_seq_port_info_get_read_use_ptr
          .asFunction<_dart_snd_seq_port_info_get_read_use>();

  int snd_seq_port_info_get_write_use(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_write_use(
      info,
    );
  }

  late final _snd_seq_port_info_get_write_use_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_write_use>>(
          'snd_seq_port_info_get_write_use');
  late final _dart_snd_seq_port_info_get_write_use
      _snd_seq_port_info_get_write_use = _snd_seq_port_info_get_write_use_ptr
          .asFunction<_dart_snd_seq_port_info_get_write_use>();

  int snd_seq_port_info_get_port_specified(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_port_specified(
      info,
    );
  }

  late final _snd_seq_port_info_get_port_specified_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_port_specified>>(
          'snd_seq_port_info_get_port_specified');
  late final _dart_snd_seq_port_info_get_port_specified
      _snd_seq_port_info_get_port_specified =
      _snd_seq_port_info_get_port_specified_ptr
          .asFunction<_dart_snd_seq_port_info_get_port_specified>();

  int snd_seq_port_info_get_timestamping(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_timestamping(
      info,
    );
  }

  late final _snd_seq_port_info_get_timestamping_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_timestamping>>(
          'snd_seq_port_info_get_timestamping');
  late final _dart_snd_seq_port_info_get_timestamping
      _snd_seq_port_info_get_timestamping =
      _snd_seq_port_info_get_timestamping_ptr
          .asFunction<_dart_snd_seq_port_info_get_timestamping>();

  int snd_seq_port_info_get_timestamp_real(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_timestamp_real(
      info,
    );
  }

  late final _snd_seq_port_info_get_timestamp_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_timestamp_real>>(
          'snd_seq_port_info_get_timestamp_real');
  late final _dart_snd_seq_port_info_get_timestamp_real
      _snd_seq_port_info_get_timestamp_real =
      _snd_seq_port_info_get_timestamp_real_ptr
          .asFunction<_dart_snd_seq_port_info_get_timestamp_real>();

  int snd_seq_port_info_get_timestamp_queue(
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_port_info_get_timestamp_queue(
      info,
    );
  }

  late final _snd_seq_port_info_get_timestamp_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_get_timestamp_queue>>(
          'snd_seq_port_info_get_timestamp_queue');
  late final _dart_snd_seq_port_info_get_timestamp_queue
      _snd_seq_port_info_get_timestamp_queue =
      _snd_seq_port_info_get_timestamp_queue_ptr
          .asFunction<_dart_snd_seq_port_info_get_timestamp_queue>();

  void snd_seq_port_info_set_client(
    ffi.Pointer<snd_seq_port_info_> info,
    int client,
  ) {
    return _snd_seq_port_info_set_client(
      info,
      client,
    );
  }

  late final _snd_seq_port_info_set_client_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_client>>(
          'snd_seq_port_info_set_client');
  late final _dart_snd_seq_port_info_set_client _snd_seq_port_info_set_client =
      _snd_seq_port_info_set_client_ptr
          .asFunction<_dart_snd_seq_port_info_set_client>();

  void snd_seq_port_info_set_port(
    ffi.Pointer<snd_seq_port_info_> info,
    int port,
  ) {
    return _snd_seq_port_info_set_port(
      info,
      port,
    );
  }

  late final _snd_seq_port_info_set_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_port>>(
          'snd_seq_port_info_set_port');
  late final _dart_snd_seq_port_info_set_port _snd_seq_port_info_set_port =
      _snd_seq_port_info_set_port_ptr
          .asFunction<_dart_snd_seq_port_info_set_port>();

  void snd_seq_port_info_set_addr(
    ffi.Pointer<snd_seq_port_info_> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_port_info_set_addr(
      info,
      addr,
    );
  }

  late final _snd_seq_port_info_set_addr_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_addr>>(
          'snd_seq_port_info_set_addr');
  late final _dart_snd_seq_port_info_set_addr _snd_seq_port_info_set_addr =
      _snd_seq_port_info_set_addr_ptr
          .asFunction<_dart_snd_seq_port_info_set_addr>();

  void snd_seq_port_info_set_name(
    ffi.Pointer<snd_seq_port_info_> info,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_seq_port_info_set_name(
      info,
      name,
    );
  }

  late final _snd_seq_port_info_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_name>>(
          'snd_seq_port_info_set_name');
  late final _dart_snd_seq_port_info_set_name _snd_seq_port_info_set_name =
      _snd_seq_port_info_set_name_ptr
          .asFunction<_dart_snd_seq_port_info_set_name>();

  void snd_seq_port_info_set_capability(
    ffi.Pointer<snd_seq_port_info_> info,
    int capability,
  ) {
    return _snd_seq_port_info_set_capability(
      info,
      capability,
    );
  }

  late final _snd_seq_port_info_set_capability_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_capability>>(
          'snd_seq_port_info_set_capability');
  late final _dart_snd_seq_port_info_set_capability
      _snd_seq_port_info_set_capability = _snd_seq_port_info_set_capability_ptr
          .asFunction<_dart_snd_seq_port_info_set_capability>();

  void snd_seq_port_info_set_type(
    ffi.Pointer<snd_seq_port_info_> info,
    int type,
  ) {
    return _snd_seq_port_info_set_type(
      info,
      type,
    );
  }

  late final _snd_seq_port_info_set_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_type>>(
          'snd_seq_port_info_set_type');
  late final _dart_snd_seq_port_info_set_type _snd_seq_port_info_set_type =
      _snd_seq_port_info_set_type_ptr
          .asFunction<_dart_snd_seq_port_info_set_type>();

  void snd_seq_port_info_set_midi_channels(
    ffi.Pointer<snd_seq_port_info_> info,
    int channels,
  ) {
    return _snd_seq_port_info_set_midi_channels(
      info,
      channels,
    );
  }

  late final _snd_seq_port_info_set_midi_channels_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_midi_channels>>(
          'snd_seq_port_info_set_midi_channels');
  late final _dart_snd_seq_port_info_set_midi_channels
      _snd_seq_port_info_set_midi_channels =
      _snd_seq_port_info_set_midi_channels_ptr
          .asFunction<_dart_snd_seq_port_info_set_midi_channels>();

  void snd_seq_port_info_set_midi_voices(
    ffi.Pointer<snd_seq_port_info_> info,
    int voices,
  ) {
    return _snd_seq_port_info_set_midi_voices(
      info,
      voices,
    );
  }

  late final _snd_seq_port_info_set_midi_voices_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_midi_voices>>(
          'snd_seq_port_info_set_midi_voices');
  late final _dart_snd_seq_port_info_set_midi_voices
      _snd_seq_port_info_set_midi_voices =
      _snd_seq_port_info_set_midi_voices_ptr
          .asFunction<_dart_snd_seq_port_info_set_midi_voices>();

  void snd_seq_port_info_set_synth_voices(
    ffi.Pointer<snd_seq_port_info_> info,
    int voices,
  ) {
    return _snd_seq_port_info_set_synth_voices(
      info,
      voices,
    );
  }

  late final _snd_seq_port_info_set_synth_voices_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_synth_voices>>(
          'snd_seq_port_info_set_synth_voices');
  late final _dart_snd_seq_port_info_set_synth_voices
      _snd_seq_port_info_set_synth_voices =
      _snd_seq_port_info_set_synth_voices_ptr
          .asFunction<_dart_snd_seq_port_info_set_synth_voices>();

  void snd_seq_port_info_set_port_specified(
    ffi.Pointer<snd_seq_port_info_> info,
    int val,
  ) {
    return _snd_seq_port_info_set_port_specified(
      info,
      val,
    );
  }

  late final _snd_seq_port_info_set_port_specified_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_port_specified>>(
          'snd_seq_port_info_set_port_specified');
  late final _dart_snd_seq_port_info_set_port_specified
      _snd_seq_port_info_set_port_specified =
      _snd_seq_port_info_set_port_specified_ptr
          .asFunction<_dart_snd_seq_port_info_set_port_specified>();

  void snd_seq_port_info_set_timestamping(
    ffi.Pointer<snd_seq_port_info_> info,
    int enable,
  ) {
    return _snd_seq_port_info_set_timestamping(
      info,
      enable,
    );
  }

  late final _snd_seq_port_info_set_timestamping_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_timestamping>>(
          'snd_seq_port_info_set_timestamping');
  late final _dart_snd_seq_port_info_set_timestamping
      _snd_seq_port_info_set_timestamping =
      _snd_seq_port_info_set_timestamping_ptr
          .asFunction<_dart_snd_seq_port_info_set_timestamping>();

  void snd_seq_port_info_set_timestamp_real(
    ffi.Pointer<snd_seq_port_info_> info,
    int realtime,
  ) {
    return _snd_seq_port_info_set_timestamp_real(
      info,
      realtime,
    );
  }

  late final _snd_seq_port_info_set_timestamp_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_timestamp_real>>(
          'snd_seq_port_info_set_timestamp_real');
  late final _dart_snd_seq_port_info_set_timestamp_real
      _snd_seq_port_info_set_timestamp_real =
      _snd_seq_port_info_set_timestamp_real_ptr
          .asFunction<_dart_snd_seq_port_info_set_timestamp_real>();

  void snd_seq_port_info_set_timestamp_queue(
    ffi.Pointer<snd_seq_port_info_> info,
    int queue,
  ) {
    return _snd_seq_port_info_set_timestamp_queue(
      info,
      queue,
    );
  }

  late final _snd_seq_port_info_set_timestamp_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_info_set_timestamp_queue>>(
          'snd_seq_port_info_set_timestamp_queue');
  late final _dart_snd_seq_port_info_set_timestamp_queue
      _snd_seq_port_info_set_timestamp_queue =
      _snd_seq_port_info_set_timestamp_queue_ptr
          .asFunction<_dart_snd_seq_port_info_set_timestamp_queue>();

  int snd_seq_create_port(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_create_port(
      handle,
      info,
    );
  }

  late final _snd_seq_create_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_create_port>>(
          'snd_seq_create_port');
  late final _dart_snd_seq_create_port _snd_seq_create_port =
      _snd_seq_create_port_ptr.asFunction<_dart_snd_seq_create_port>();

  int snd_seq_delete_port(
    ffi.Pointer<snd_seq_> handle,
    int port,
  ) {
    return _snd_seq_delete_port(
      handle,
      port,
    );
  }

  late final _snd_seq_delete_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_delete_port>>(
          'snd_seq_delete_port');
  late final _dart_snd_seq_delete_port _snd_seq_delete_port =
      _snd_seq_delete_port_ptr.asFunction<_dart_snd_seq_delete_port>();

  int snd_seq_get_port_info(
    ffi.Pointer<snd_seq_> handle,
    int port,
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_get_port_info(
      handle,
      port,
      info,
    );
  }

  late final _snd_seq_get_port_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_port_info>>(
          'snd_seq_get_port_info');
  late final _dart_snd_seq_get_port_info _snd_seq_get_port_info =
      _snd_seq_get_port_info_ptr.asFunction<_dart_snd_seq_get_port_info>();

  int snd_seq_get_any_port_info(
    ffi.Pointer<snd_seq_> handle,
    int client,
    int port,
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_get_any_port_info(
      handle,
      client,
      port,
      info,
    );
  }

  late final _snd_seq_get_any_port_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_any_port_info>>(
          'snd_seq_get_any_port_info');
  late final _dart_snd_seq_get_any_port_info _snd_seq_get_any_port_info =
      _snd_seq_get_any_port_info_ptr
          .asFunction<_dart_snd_seq_get_any_port_info>();

  int snd_seq_set_port_info(
    ffi.Pointer<snd_seq_> handle,
    int port,
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_set_port_info(
      handle,
      port,
      info,
    );
  }

  late final _snd_seq_set_port_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_port_info>>(
          'snd_seq_set_port_info');
  late final _dart_snd_seq_set_port_info _snd_seq_set_port_info =
      _snd_seq_set_port_info_ptr.asFunction<_dart_snd_seq_set_port_info>();

  int snd_seq_query_next_port(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_port_info_> info,
  ) {
    return _snd_seq_query_next_port(
      handle,
      info,
    );
  }

  late final _snd_seq_query_next_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_next_port>>(
          'snd_seq_query_next_port');
  late final _dart_snd_seq_query_next_port _snd_seq_query_next_port =
      _snd_seq_query_next_port_ptr.asFunction<_dart_snd_seq_query_next_port>();

  int snd_seq_port_subscribe_sizeof() {
    return _snd_seq_port_subscribe_sizeof();
  }

  late final _snd_seq_port_subscribe_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_sizeof>>(
          'snd_seq_port_subscribe_sizeof');
  late final _dart_snd_seq_port_subscribe_sizeof
      _snd_seq_port_subscribe_sizeof = _snd_seq_port_subscribe_sizeof_ptr
          .asFunction<_dart_snd_seq_port_subscribe_sizeof>();

  int snd_seq_port_subscribe_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_port_subscribe_>> ptr,
  ) {
    return _snd_seq_port_subscribe_malloc(
      ptr,
    );
  }

  late final _snd_seq_port_subscribe_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_malloc>>(
          'snd_seq_port_subscribe_malloc');
  late final _dart_snd_seq_port_subscribe_malloc
      _snd_seq_port_subscribe_malloc = _snd_seq_port_subscribe_malloc_ptr
          .asFunction<_dart_snd_seq_port_subscribe_malloc>();

  void snd_seq_port_subscribe_free(
    ffi.Pointer<snd_seq_port_subscribe_> ptr,
  ) {
    return _snd_seq_port_subscribe_free(
      ptr,
    );
  }

  late final _snd_seq_port_subscribe_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_free>>(
          'snd_seq_port_subscribe_free');
  late final _dart_snd_seq_port_subscribe_free _snd_seq_port_subscribe_free =
      _snd_seq_port_subscribe_free_ptr
          .asFunction<_dart_snd_seq_port_subscribe_free>();

  void snd_seq_port_subscribe_copy(
    ffi.Pointer<snd_seq_port_subscribe_> dst,
    ffi.Pointer<snd_seq_port_subscribe_> src,
  ) {
    return _snd_seq_port_subscribe_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_port_subscribe_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_copy>>(
          'snd_seq_port_subscribe_copy');
  late final _dart_snd_seq_port_subscribe_copy _snd_seq_port_subscribe_copy =
      _snd_seq_port_subscribe_copy_ptr
          .asFunction<_dart_snd_seq_port_subscribe_copy>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_port_subscribe_get_sender(
    ffi.Pointer<snd_seq_port_subscribe_> info,
  ) {
    return _snd_seq_port_subscribe_get_sender(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_sender_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_get_sender>>(
          'snd_seq_port_subscribe_get_sender');
  late final _dart_snd_seq_port_subscribe_get_sender
      _snd_seq_port_subscribe_get_sender =
      _snd_seq_port_subscribe_get_sender_ptr
          .asFunction<_dart_snd_seq_port_subscribe_get_sender>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_port_subscribe_get_dest(
    ffi.Pointer<snd_seq_port_subscribe_> info,
  ) {
    return _snd_seq_port_subscribe_get_dest(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_dest_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_get_dest>>(
          'snd_seq_port_subscribe_get_dest');
  late final _dart_snd_seq_port_subscribe_get_dest
      _snd_seq_port_subscribe_get_dest = _snd_seq_port_subscribe_get_dest_ptr
          .asFunction<_dart_snd_seq_port_subscribe_get_dest>();

  int snd_seq_port_subscribe_get_queue(
    ffi.Pointer<snd_seq_port_subscribe_> info,
  ) {
    return _snd_seq_port_subscribe_get_queue(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_get_queue>>(
          'snd_seq_port_subscribe_get_queue');
  late final _dart_snd_seq_port_subscribe_get_queue
      _snd_seq_port_subscribe_get_queue = _snd_seq_port_subscribe_get_queue_ptr
          .asFunction<_dart_snd_seq_port_subscribe_get_queue>();

  int snd_seq_port_subscribe_get_exclusive(
    ffi.Pointer<snd_seq_port_subscribe_> info,
  ) {
    return _snd_seq_port_subscribe_get_exclusive(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_exclusive_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_get_exclusive>>(
          'snd_seq_port_subscribe_get_exclusive');
  late final _dart_snd_seq_port_subscribe_get_exclusive
      _snd_seq_port_subscribe_get_exclusive =
      _snd_seq_port_subscribe_get_exclusive_ptr
          .asFunction<_dart_snd_seq_port_subscribe_get_exclusive>();

  int snd_seq_port_subscribe_get_time_update(
    ffi.Pointer<snd_seq_port_subscribe_> info,
  ) {
    return _snd_seq_port_subscribe_get_time_update(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_time_update_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_get_time_update>>(
          'snd_seq_port_subscribe_get_time_update');
  late final _dart_snd_seq_port_subscribe_get_time_update
      _snd_seq_port_subscribe_get_time_update =
      _snd_seq_port_subscribe_get_time_update_ptr
          .asFunction<_dart_snd_seq_port_subscribe_get_time_update>();

  int snd_seq_port_subscribe_get_time_real(
    ffi.Pointer<snd_seq_port_subscribe_> info,
  ) {
    return _snd_seq_port_subscribe_get_time_real(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_time_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_get_time_real>>(
          'snd_seq_port_subscribe_get_time_real');
  late final _dart_snd_seq_port_subscribe_get_time_real
      _snd_seq_port_subscribe_get_time_real =
      _snd_seq_port_subscribe_get_time_real_ptr
          .asFunction<_dart_snd_seq_port_subscribe_get_time_real>();

  void snd_seq_port_subscribe_set_sender(
    ffi.Pointer<snd_seq_port_subscribe_> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_port_subscribe_set_sender(
      info,
      addr,
    );
  }

  late final _snd_seq_port_subscribe_set_sender_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_set_sender>>(
          'snd_seq_port_subscribe_set_sender');
  late final _dart_snd_seq_port_subscribe_set_sender
      _snd_seq_port_subscribe_set_sender =
      _snd_seq_port_subscribe_set_sender_ptr
          .asFunction<_dart_snd_seq_port_subscribe_set_sender>();

  void snd_seq_port_subscribe_set_dest(
    ffi.Pointer<snd_seq_port_subscribe_> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_port_subscribe_set_dest(
      info,
      addr,
    );
  }

  late final _snd_seq_port_subscribe_set_dest_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_set_dest>>(
          'snd_seq_port_subscribe_set_dest');
  late final _dart_snd_seq_port_subscribe_set_dest
      _snd_seq_port_subscribe_set_dest = _snd_seq_port_subscribe_set_dest_ptr
          .asFunction<_dart_snd_seq_port_subscribe_set_dest>();

  void snd_seq_port_subscribe_set_queue(
    ffi.Pointer<snd_seq_port_subscribe_> info,
    int q,
  ) {
    return _snd_seq_port_subscribe_set_queue(
      info,
      q,
    );
  }

  late final _snd_seq_port_subscribe_set_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_set_queue>>(
          'snd_seq_port_subscribe_set_queue');
  late final _dart_snd_seq_port_subscribe_set_queue
      _snd_seq_port_subscribe_set_queue = _snd_seq_port_subscribe_set_queue_ptr
          .asFunction<_dart_snd_seq_port_subscribe_set_queue>();

  void snd_seq_port_subscribe_set_exclusive(
    ffi.Pointer<snd_seq_port_subscribe_> info,
    int val,
  ) {
    return _snd_seq_port_subscribe_set_exclusive(
      info,
      val,
    );
  }

  late final _snd_seq_port_subscribe_set_exclusive_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_set_exclusive>>(
          'snd_seq_port_subscribe_set_exclusive');
  late final _dart_snd_seq_port_subscribe_set_exclusive
      _snd_seq_port_subscribe_set_exclusive =
      _snd_seq_port_subscribe_set_exclusive_ptr
          .asFunction<_dart_snd_seq_port_subscribe_set_exclusive>();

  void snd_seq_port_subscribe_set_time_update(
    ffi.Pointer<snd_seq_port_subscribe_> info,
    int val,
  ) {
    return _snd_seq_port_subscribe_set_time_update(
      info,
      val,
    );
  }

  late final _snd_seq_port_subscribe_set_time_update_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_set_time_update>>(
          'snd_seq_port_subscribe_set_time_update');
  late final _dart_snd_seq_port_subscribe_set_time_update
      _snd_seq_port_subscribe_set_time_update =
      _snd_seq_port_subscribe_set_time_update_ptr
          .asFunction<_dart_snd_seq_port_subscribe_set_time_update>();

  void snd_seq_port_subscribe_set_time_real(
    ffi.Pointer<snd_seq_port_subscribe_> info,
    int val,
  ) {
    return _snd_seq_port_subscribe_set_time_real(
      info,
      val,
    );
  }

  late final _snd_seq_port_subscribe_set_time_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_port_subscribe_set_time_real>>(
          'snd_seq_port_subscribe_set_time_real');
  late final _dart_snd_seq_port_subscribe_set_time_real
      _snd_seq_port_subscribe_set_time_real =
      _snd_seq_port_subscribe_set_time_real_ptr
          .asFunction<_dart_snd_seq_port_subscribe_set_time_real>();

  int snd_seq_get_port_subscription(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_port_subscribe_> sub,
  ) {
    return _snd_seq_get_port_subscription(
      handle,
      sub,
    );
  }

  late final _snd_seq_get_port_subscription_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_port_subscription>>(
          'snd_seq_get_port_subscription');
  late final _dart_snd_seq_get_port_subscription
      _snd_seq_get_port_subscription = _snd_seq_get_port_subscription_ptr
          .asFunction<_dart_snd_seq_get_port_subscription>();

  int snd_seq_subscribe_port(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_port_subscribe_> sub,
  ) {
    return _snd_seq_subscribe_port(
      handle,
      sub,
    );
  }

  late final _snd_seq_subscribe_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_subscribe_port>>(
          'snd_seq_subscribe_port');
  late final _dart_snd_seq_subscribe_port _snd_seq_subscribe_port =
      _snd_seq_subscribe_port_ptr.asFunction<_dart_snd_seq_subscribe_port>();

  int snd_seq_unsubscribe_port(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_port_subscribe_> sub,
  ) {
    return _snd_seq_unsubscribe_port(
      handle,
      sub,
    );
  }

  late final _snd_seq_unsubscribe_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_unsubscribe_port>>(
          'snd_seq_unsubscribe_port');
  late final _dart_snd_seq_unsubscribe_port _snd_seq_unsubscribe_port =
      _snd_seq_unsubscribe_port_ptr
          .asFunction<_dart_snd_seq_unsubscribe_port>();

  int snd_seq_query_subscribe_sizeof() {
    return _snd_seq_query_subscribe_sizeof();
  }

  late final _snd_seq_query_subscribe_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_sizeof>>(
          'snd_seq_query_subscribe_sizeof');
  late final _dart_snd_seq_query_subscribe_sizeof
      _snd_seq_query_subscribe_sizeof = _snd_seq_query_subscribe_sizeof_ptr
          .asFunction<_dart_snd_seq_query_subscribe_sizeof>();

  int snd_seq_query_subscribe_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_query_subscribe_>> ptr,
  ) {
    return _snd_seq_query_subscribe_malloc(
      ptr,
    );
  }

  late final _snd_seq_query_subscribe_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_malloc>>(
          'snd_seq_query_subscribe_malloc');
  late final _dart_snd_seq_query_subscribe_malloc
      _snd_seq_query_subscribe_malloc = _snd_seq_query_subscribe_malloc_ptr
          .asFunction<_dart_snd_seq_query_subscribe_malloc>();

  void snd_seq_query_subscribe_free(
    ffi.Pointer<snd_seq_query_subscribe_> ptr,
  ) {
    return _snd_seq_query_subscribe_free(
      ptr,
    );
  }

  late final _snd_seq_query_subscribe_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_free>>(
          'snd_seq_query_subscribe_free');
  late final _dart_snd_seq_query_subscribe_free _snd_seq_query_subscribe_free =
      _snd_seq_query_subscribe_free_ptr
          .asFunction<_dart_snd_seq_query_subscribe_free>();

  void snd_seq_query_subscribe_copy(
    ffi.Pointer<snd_seq_query_subscribe_> dst,
    ffi.Pointer<snd_seq_query_subscribe_> src,
  ) {
    return _snd_seq_query_subscribe_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_query_subscribe_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_copy>>(
          'snd_seq_query_subscribe_copy');
  late final _dart_snd_seq_query_subscribe_copy _snd_seq_query_subscribe_copy =
      _snd_seq_query_subscribe_copy_ptr
          .asFunction<_dart_snd_seq_query_subscribe_copy>();

  int snd_seq_query_subscribe_get_client(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_client(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_client_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_client>>(
          'snd_seq_query_subscribe_get_client');
  late final _dart_snd_seq_query_subscribe_get_client
      _snd_seq_query_subscribe_get_client =
      _snd_seq_query_subscribe_get_client_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_client>();

  int snd_seq_query_subscribe_get_port(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_port(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_port>>(
          'snd_seq_query_subscribe_get_port');
  late final _dart_snd_seq_query_subscribe_get_port
      _snd_seq_query_subscribe_get_port = _snd_seq_query_subscribe_get_port_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_port>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_query_subscribe_get_root(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_root(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_root_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_root>>(
          'snd_seq_query_subscribe_get_root');
  late final _dart_snd_seq_query_subscribe_get_root
      _snd_seq_query_subscribe_get_root = _snd_seq_query_subscribe_get_root_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_root>();

  int snd_seq_query_subscribe_get_type(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_type(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_type>>(
          'snd_seq_query_subscribe_get_type');
  late final _dart_snd_seq_query_subscribe_get_type
      _snd_seq_query_subscribe_get_type = _snd_seq_query_subscribe_get_type_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_type>();

  int snd_seq_query_subscribe_get_index(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_index(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_index>>(
          'snd_seq_query_subscribe_get_index');
  late final _dart_snd_seq_query_subscribe_get_index
      _snd_seq_query_subscribe_get_index =
      _snd_seq_query_subscribe_get_index_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_index>();

  int snd_seq_query_subscribe_get_num_subs(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_num_subs(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_num_subs_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_num_subs>>(
          'snd_seq_query_subscribe_get_num_subs');
  late final _dart_snd_seq_query_subscribe_get_num_subs
      _snd_seq_query_subscribe_get_num_subs =
      _snd_seq_query_subscribe_get_num_subs_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_num_subs>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_query_subscribe_get_addr(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_addr(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_addr_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_addr>>(
          'snd_seq_query_subscribe_get_addr');
  late final _dart_snd_seq_query_subscribe_get_addr
      _snd_seq_query_subscribe_get_addr = _snd_seq_query_subscribe_get_addr_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_addr>();

  int snd_seq_query_subscribe_get_queue(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_queue(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_queue>>(
          'snd_seq_query_subscribe_get_queue');
  late final _dart_snd_seq_query_subscribe_get_queue
      _snd_seq_query_subscribe_get_queue =
      _snd_seq_query_subscribe_get_queue_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_queue>();

  int snd_seq_query_subscribe_get_exclusive(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_exclusive(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_exclusive_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_exclusive>>(
          'snd_seq_query_subscribe_get_exclusive');
  late final _dart_snd_seq_query_subscribe_get_exclusive
      _snd_seq_query_subscribe_get_exclusive =
      _snd_seq_query_subscribe_get_exclusive_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_exclusive>();

  int snd_seq_query_subscribe_get_time_update(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_time_update(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_time_update_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_time_update>>(
          'snd_seq_query_subscribe_get_time_update');
  late final _dart_snd_seq_query_subscribe_get_time_update
      _snd_seq_query_subscribe_get_time_update =
      _snd_seq_query_subscribe_get_time_update_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_time_update>();

  int snd_seq_query_subscribe_get_time_real(
    ffi.Pointer<snd_seq_query_subscribe_> info,
  ) {
    return _snd_seq_query_subscribe_get_time_real(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_time_real_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_get_time_real>>(
          'snd_seq_query_subscribe_get_time_real');
  late final _dart_snd_seq_query_subscribe_get_time_real
      _snd_seq_query_subscribe_get_time_real =
      _snd_seq_query_subscribe_get_time_real_ptr
          .asFunction<_dart_snd_seq_query_subscribe_get_time_real>();

  void snd_seq_query_subscribe_set_client(
    ffi.Pointer<snd_seq_query_subscribe_> info,
    int client,
  ) {
    return _snd_seq_query_subscribe_set_client(
      info,
      client,
    );
  }

  late final _snd_seq_query_subscribe_set_client_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_set_client>>(
          'snd_seq_query_subscribe_set_client');
  late final _dart_snd_seq_query_subscribe_set_client
      _snd_seq_query_subscribe_set_client =
      _snd_seq_query_subscribe_set_client_ptr
          .asFunction<_dart_snd_seq_query_subscribe_set_client>();

  void snd_seq_query_subscribe_set_port(
    ffi.Pointer<snd_seq_query_subscribe_> info,
    int port,
  ) {
    return _snd_seq_query_subscribe_set_port(
      info,
      port,
    );
  }

  late final _snd_seq_query_subscribe_set_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_set_port>>(
          'snd_seq_query_subscribe_set_port');
  late final _dart_snd_seq_query_subscribe_set_port
      _snd_seq_query_subscribe_set_port = _snd_seq_query_subscribe_set_port_ptr
          .asFunction<_dart_snd_seq_query_subscribe_set_port>();

  void snd_seq_query_subscribe_set_root(
    ffi.Pointer<snd_seq_query_subscribe_> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_query_subscribe_set_root(
      info,
      addr,
    );
  }

  late final _snd_seq_query_subscribe_set_root_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_set_root>>(
          'snd_seq_query_subscribe_set_root');
  late final _dart_snd_seq_query_subscribe_set_root
      _snd_seq_query_subscribe_set_root = _snd_seq_query_subscribe_set_root_ptr
          .asFunction<_dart_snd_seq_query_subscribe_set_root>();

  void snd_seq_query_subscribe_set_type(
    ffi.Pointer<snd_seq_query_subscribe_> info,
    int type,
  ) {
    return _snd_seq_query_subscribe_set_type(
      info,
      type,
    );
  }

  late final _snd_seq_query_subscribe_set_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_set_type>>(
          'snd_seq_query_subscribe_set_type');
  late final _dart_snd_seq_query_subscribe_set_type
      _snd_seq_query_subscribe_set_type = _snd_seq_query_subscribe_set_type_ptr
          .asFunction<_dart_snd_seq_query_subscribe_set_type>();

  void snd_seq_query_subscribe_set_index(
    ffi.Pointer<snd_seq_query_subscribe_> info,
    int _index,
  ) {
    return _snd_seq_query_subscribe_set_index(
      info,
      _index,
    );
  }

  late final _snd_seq_query_subscribe_set_index_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_subscribe_set_index>>(
          'snd_seq_query_subscribe_set_index');
  late final _dart_snd_seq_query_subscribe_set_index
      _snd_seq_query_subscribe_set_index =
      _snd_seq_query_subscribe_set_index_ptr
          .asFunction<_dart_snd_seq_query_subscribe_set_index>();

  int snd_seq_query_port_subscribers(
    ffi.Pointer<snd_seq_> seq,
    ffi.Pointer<snd_seq_query_subscribe_> subs,
  ) {
    return _snd_seq_query_port_subscribers(
      seq,
      subs,
    );
  }

  late final _snd_seq_query_port_subscribers_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_port_subscribers>>(
          'snd_seq_query_port_subscribers');
  late final _dart_snd_seq_query_port_subscribers
      _snd_seq_query_port_subscribers = _snd_seq_query_port_subscribers_ptr
          .asFunction<_dart_snd_seq_query_port_subscribers>();

  int snd_seq_queue_info_sizeof() {
    return _snd_seq_queue_info_sizeof();
  }

  late final _snd_seq_queue_info_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_sizeof>>(
          'snd_seq_queue_info_sizeof');
  late final _dart_snd_seq_queue_info_sizeof _snd_seq_queue_info_sizeof =
      _snd_seq_queue_info_sizeof_ptr
          .asFunction<_dart_snd_seq_queue_info_sizeof>();

  int snd_seq_queue_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_queue_info_>> ptr,
  ) {
    return _snd_seq_queue_info_malloc(
      ptr,
    );
  }

  late final _snd_seq_queue_info_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_malloc>>(
          'snd_seq_queue_info_malloc');
  late final _dart_snd_seq_queue_info_malloc _snd_seq_queue_info_malloc =
      _snd_seq_queue_info_malloc_ptr
          .asFunction<_dart_snd_seq_queue_info_malloc>();

  void snd_seq_queue_info_free(
    ffi.Pointer<snd_seq_queue_info_> ptr,
  ) {
    return _snd_seq_queue_info_free(
      ptr,
    );
  }

  late final _snd_seq_queue_info_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_free>>(
          'snd_seq_queue_info_free');
  late final _dart_snd_seq_queue_info_free _snd_seq_queue_info_free =
      _snd_seq_queue_info_free_ptr.asFunction<_dart_snd_seq_queue_info_free>();

  void snd_seq_queue_info_copy(
    ffi.Pointer<snd_seq_queue_info_> dst,
    ffi.Pointer<snd_seq_queue_info_> src,
  ) {
    return _snd_seq_queue_info_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_queue_info_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_copy>>(
          'snd_seq_queue_info_copy');
  late final _dart_snd_seq_queue_info_copy _snd_seq_queue_info_copy =
      _snd_seq_queue_info_copy_ptr.asFunction<_dart_snd_seq_queue_info_copy>();

  int snd_seq_queue_info_get_queue(
    ffi.Pointer<snd_seq_queue_info_> info,
  ) {
    return _snd_seq_queue_info_get_queue(
      info,
    );
  }

  late final _snd_seq_queue_info_get_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_get_queue>>(
          'snd_seq_queue_info_get_queue');
  late final _dart_snd_seq_queue_info_get_queue _snd_seq_queue_info_get_queue =
      _snd_seq_queue_info_get_queue_ptr
          .asFunction<_dart_snd_seq_queue_info_get_queue>();

  ffi.Pointer<ffi.Int8> snd_seq_queue_info_get_name(
    ffi.Pointer<snd_seq_queue_info_> info,
  ) {
    return _snd_seq_queue_info_get_name(
      info,
    );
  }

  late final _snd_seq_queue_info_get_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_get_name>>(
          'snd_seq_queue_info_get_name');
  late final _dart_snd_seq_queue_info_get_name _snd_seq_queue_info_get_name =
      _snd_seq_queue_info_get_name_ptr
          .asFunction<_dart_snd_seq_queue_info_get_name>();

  int snd_seq_queue_info_get_owner(
    ffi.Pointer<snd_seq_queue_info_> info,
  ) {
    return _snd_seq_queue_info_get_owner(
      info,
    );
  }

  late final _snd_seq_queue_info_get_owner_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_get_owner>>(
          'snd_seq_queue_info_get_owner');
  late final _dart_snd_seq_queue_info_get_owner _snd_seq_queue_info_get_owner =
      _snd_seq_queue_info_get_owner_ptr
          .asFunction<_dart_snd_seq_queue_info_get_owner>();

  int snd_seq_queue_info_get_locked(
    ffi.Pointer<snd_seq_queue_info_> info,
  ) {
    return _snd_seq_queue_info_get_locked(
      info,
    );
  }

  late final _snd_seq_queue_info_get_locked_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_get_locked>>(
          'snd_seq_queue_info_get_locked');
  late final _dart_snd_seq_queue_info_get_locked
      _snd_seq_queue_info_get_locked = _snd_seq_queue_info_get_locked_ptr
          .asFunction<_dart_snd_seq_queue_info_get_locked>();

  int snd_seq_queue_info_get_flags(
    ffi.Pointer<snd_seq_queue_info_> info,
  ) {
    return _snd_seq_queue_info_get_flags(
      info,
    );
  }

  late final _snd_seq_queue_info_get_flags_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_get_flags>>(
          'snd_seq_queue_info_get_flags');
  late final _dart_snd_seq_queue_info_get_flags _snd_seq_queue_info_get_flags =
      _snd_seq_queue_info_get_flags_ptr
          .asFunction<_dart_snd_seq_queue_info_get_flags>();

  void snd_seq_queue_info_set_name(
    ffi.Pointer<snd_seq_queue_info_> info,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_seq_queue_info_set_name(
      info,
      name,
    );
  }

  late final _snd_seq_queue_info_set_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_set_name>>(
          'snd_seq_queue_info_set_name');
  late final _dart_snd_seq_queue_info_set_name _snd_seq_queue_info_set_name =
      _snd_seq_queue_info_set_name_ptr
          .asFunction<_dart_snd_seq_queue_info_set_name>();

  void snd_seq_queue_info_set_owner(
    ffi.Pointer<snd_seq_queue_info_> info,
    int owner,
  ) {
    return _snd_seq_queue_info_set_owner(
      info,
      owner,
    );
  }

  late final _snd_seq_queue_info_set_owner_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_set_owner>>(
          'snd_seq_queue_info_set_owner');
  late final _dart_snd_seq_queue_info_set_owner _snd_seq_queue_info_set_owner =
      _snd_seq_queue_info_set_owner_ptr
          .asFunction<_dart_snd_seq_queue_info_set_owner>();

  void snd_seq_queue_info_set_locked(
    ffi.Pointer<snd_seq_queue_info_> info,
    int locked,
  ) {
    return _snd_seq_queue_info_set_locked(
      info,
      locked,
    );
  }

  late final _snd_seq_queue_info_set_locked_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_set_locked>>(
          'snd_seq_queue_info_set_locked');
  late final _dart_snd_seq_queue_info_set_locked
      _snd_seq_queue_info_set_locked = _snd_seq_queue_info_set_locked_ptr
          .asFunction<_dart_snd_seq_queue_info_set_locked>();

  void snd_seq_queue_info_set_flags(
    ffi.Pointer<snd_seq_queue_info_> info,
    int flags,
  ) {
    return _snd_seq_queue_info_set_flags(
      info,
      flags,
    );
  }

  late final _snd_seq_queue_info_set_flags_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_info_set_flags>>(
          'snd_seq_queue_info_set_flags');
  late final _dart_snd_seq_queue_info_set_flags _snd_seq_queue_info_set_flags =
      _snd_seq_queue_info_set_flags_ptr
          .asFunction<_dart_snd_seq_queue_info_set_flags>();

  int snd_seq_create_queue(
    ffi.Pointer<snd_seq_> seq,
    ffi.Pointer<snd_seq_queue_info_> info,
  ) {
    return _snd_seq_create_queue(
      seq,
      info,
    );
  }

  late final _snd_seq_create_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_create_queue>>(
          'snd_seq_create_queue');
  late final _dart_snd_seq_create_queue _snd_seq_create_queue =
      _snd_seq_create_queue_ptr.asFunction<_dart_snd_seq_create_queue>();

  int snd_seq_alloc_named_queue(
    ffi.Pointer<snd_seq_> seq,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_seq_alloc_named_queue(
      seq,
      name,
    );
  }

  late final _snd_seq_alloc_named_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_alloc_named_queue>>(
          'snd_seq_alloc_named_queue');
  late final _dart_snd_seq_alloc_named_queue _snd_seq_alloc_named_queue =
      _snd_seq_alloc_named_queue_ptr
          .asFunction<_dart_snd_seq_alloc_named_queue>();

  int snd_seq_alloc_queue(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_alloc_queue(
      handle,
    );
  }

  late final _snd_seq_alloc_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_alloc_queue>>(
          'snd_seq_alloc_queue');
  late final _dart_snd_seq_alloc_queue _snd_seq_alloc_queue =
      _snd_seq_alloc_queue_ptr.asFunction<_dart_snd_seq_alloc_queue>();

  int snd_seq_free_queue(
    ffi.Pointer<snd_seq_> handle,
    int q,
  ) {
    return _snd_seq_free_queue(
      handle,
      q,
    );
  }

  late final _snd_seq_free_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_free_queue>>('snd_seq_free_queue');
  late final _dart_snd_seq_free_queue _snd_seq_free_queue =
      _snd_seq_free_queue_ptr.asFunction<_dart_snd_seq_free_queue>();

  int snd_seq_get_queue_info(
    ffi.Pointer<snd_seq_> seq,
    int q,
    ffi.Pointer<snd_seq_queue_info_> info,
  ) {
    return _snd_seq_get_queue_info(
      seq,
      q,
      info,
    );
  }

  late final _snd_seq_get_queue_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_queue_info>>(
          'snd_seq_get_queue_info');
  late final _dart_snd_seq_get_queue_info _snd_seq_get_queue_info =
      _snd_seq_get_queue_info_ptr.asFunction<_dart_snd_seq_get_queue_info>();

  int snd_seq_set_queue_info(
    ffi.Pointer<snd_seq_> seq,
    int q,
    ffi.Pointer<snd_seq_queue_info_> info,
  ) {
    return _snd_seq_set_queue_info(
      seq,
      q,
      info,
    );
  }

  late final _snd_seq_set_queue_info_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_queue_info>>(
          'snd_seq_set_queue_info');
  late final _dart_snd_seq_set_queue_info _snd_seq_set_queue_info =
      _snd_seq_set_queue_info_ptr.asFunction<_dart_snd_seq_set_queue_info>();

  int snd_seq_query_named_queue(
    ffi.Pointer<snd_seq_> seq,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_seq_query_named_queue(
      seq,
      name,
    );
  }

  late final _snd_seq_query_named_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_query_named_queue>>(
          'snd_seq_query_named_queue');
  late final _dart_snd_seq_query_named_queue _snd_seq_query_named_queue =
      _snd_seq_query_named_queue_ptr
          .asFunction<_dart_snd_seq_query_named_queue>();

  int snd_seq_get_queue_usage(
    ffi.Pointer<snd_seq_> handle,
    int q,
  ) {
    return _snd_seq_get_queue_usage(
      handle,
      q,
    );
  }

  late final _snd_seq_get_queue_usage_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_queue_usage>>(
          'snd_seq_get_queue_usage');
  late final _dart_snd_seq_get_queue_usage _snd_seq_get_queue_usage =
      _snd_seq_get_queue_usage_ptr.asFunction<_dart_snd_seq_get_queue_usage>();

  int snd_seq_set_queue_usage(
    ffi.Pointer<snd_seq_> handle,
    int q,
    int used,
  ) {
    return _snd_seq_set_queue_usage(
      handle,
      q,
      used,
    );
  }

  late final _snd_seq_set_queue_usage_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_queue_usage>>(
          'snd_seq_set_queue_usage');
  late final _dart_snd_seq_set_queue_usage _snd_seq_set_queue_usage =
      _snd_seq_set_queue_usage_ptr.asFunction<_dart_snd_seq_set_queue_usage>();

  int snd_seq_queue_status_sizeof() {
    return _snd_seq_queue_status_sizeof();
  }

  late final _snd_seq_queue_status_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_sizeof>>(
          'snd_seq_queue_status_sizeof');
  late final _dart_snd_seq_queue_status_sizeof _snd_seq_queue_status_sizeof =
      _snd_seq_queue_status_sizeof_ptr
          .asFunction<_dart_snd_seq_queue_status_sizeof>();

  int snd_seq_queue_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_queue_status_>> ptr,
  ) {
    return _snd_seq_queue_status_malloc(
      ptr,
    );
  }

  late final _snd_seq_queue_status_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_malloc>>(
          'snd_seq_queue_status_malloc');
  late final _dart_snd_seq_queue_status_malloc _snd_seq_queue_status_malloc =
      _snd_seq_queue_status_malloc_ptr
          .asFunction<_dart_snd_seq_queue_status_malloc>();

  void snd_seq_queue_status_free(
    ffi.Pointer<snd_seq_queue_status_> ptr,
  ) {
    return _snd_seq_queue_status_free(
      ptr,
    );
  }

  late final _snd_seq_queue_status_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_free>>(
          'snd_seq_queue_status_free');
  late final _dart_snd_seq_queue_status_free _snd_seq_queue_status_free =
      _snd_seq_queue_status_free_ptr
          .asFunction<_dart_snd_seq_queue_status_free>();

  void snd_seq_queue_status_copy(
    ffi.Pointer<snd_seq_queue_status_> dst,
    ffi.Pointer<snd_seq_queue_status_> src,
  ) {
    return _snd_seq_queue_status_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_queue_status_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_copy>>(
          'snd_seq_queue_status_copy');
  late final _dart_snd_seq_queue_status_copy _snd_seq_queue_status_copy =
      _snd_seq_queue_status_copy_ptr
          .asFunction<_dart_snd_seq_queue_status_copy>();

  int snd_seq_queue_status_get_queue(
    ffi.Pointer<snd_seq_queue_status_> info,
  ) {
    return _snd_seq_queue_status_get_queue(
      info,
    );
  }

  late final _snd_seq_queue_status_get_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_get_queue>>(
          'snd_seq_queue_status_get_queue');
  late final _dart_snd_seq_queue_status_get_queue
      _snd_seq_queue_status_get_queue = _snd_seq_queue_status_get_queue_ptr
          .asFunction<_dart_snd_seq_queue_status_get_queue>();

  int snd_seq_queue_status_get_events(
    ffi.Pointer<snd_seq_queue_status_> info,
  ) {
    return _snd_seq_queue_status_get_events(
      info,
    );
  }

  late final _snd_seq_queue_status_get_events_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_get_events>>(
          'snd_seq_queue_status_get_events');
  late final _dart_snd_seq_queue_status_get_events
      _snd_seq_queue_status_get_events = _snd_seq_queue_status_get_events_ptr
          .asFunction<_dart_snd_seq_queue_status_get_events>();

  int snd_seq_queue_status_get_tick_time(
    ffi.Pointer<snd_seq_queue_status_> info,
  ) {
    return _snd_seq_queue_status_get_tick_time(
      info,
    );
  }

  late final _snd_seq_queue_status_get_tick_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_get_tick_time>>(
          'snd_seq_queue_status_get_tick_time');
  late final _dart_snd_seq_queue_status_get_tick_time
      _snd_seq_queue_status_get_tick_time =
      _snd_seq_queue_status_get_tick_time_ptr
          .asFunction<_dart_snd_seq_queue_status_get_tick_time>();

  ffi.Pointer<snd_seq_real_time_t> snd_seq_queue_status_get_real_time(
    ffi.Pointer<snd_seq_queue_status_> info,
  ) {
    return _snd_seq_queue_status_get_real_time(
      info,
    );
  }

  late final _snd_seq_queue_status_get_real_time_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_get_real_time>>(
          'snd_seq_queue_status_get_real_time');
  late final _dart_snd_seq_queue_status_get_real_time
      _snd_seq_queue_status_get_real_time =
      _snd_seq_queue_status_get_real_time_ptr
          .asFunction<_dart_snd_seq_queue_status_get_real_time>();

  int snd_seq_queue_status_get_status(
    ffi.Pointer<snd_seq_queue_status_> info,
  ) {
    return _snd_seq_queue_status_get_status(
      info,
    );
  }

  late final _snd_seq_queue_status_get_status_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_status_get_status>>(
          'snd_seq_queue_status_get_status');
  late final _dart_snd_seq_queue_status_get_status
      _snd_seq_queue_status_get_status = _snd_seq_queue_status_get_status_ptr
          .asFunction<_dart_snd_seq_queue_status_get_status>();

  int snd_seq_get_queue_status(
    ffi.Pointer<snd_seq_> handle,
    int q,
    ffi.Pointer<snd_seq_queue_status_> status,
  ) {
    return _snd_seq_get_queue_status(
      handle,
      q,
      status,
    );
  }

  late final _snd_seq_get_queue_status_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_queue_status>>(
          'snd_seq_get_queue_status');
  late final _dart_snd_seq_get_queue_status _snd_seq_get_queue_status =
      _snd_seq_get_queue_status_ptr
          .asFunction<_dart_snd_seq_get_queue_status>();

  int snd_seq_queue_tempo_sizeof() {
    return _snd_seq_queue_tempo_sizeof();
  }

  late final _snd_seq_queue_tempo_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_sizeof>>(
          'snd_seq_queue_tempo_sizeof');
  late final _dart_snd_seq_queue_tempo_sizeof _snd_seq_queue_tempo_sizeof =
      _snd_seq_queue_tempo_sizeof_ptr
          .asFunction<_dart_snd_seq_queue_tempo_sizeof>();

  int snd_seq_queue_tempo_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_queue_tempo_>> ptr,
  ) {
    return _snd_seq_queue_tempo_malloc(
      ptr,
    );
  }

  late final _snd_seq_queue_tempo_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_malloc>>(
          'snd_seq_queue_tempo_malloc');
  late final _dart_snd_seq_queue_tempo_malloc _snd_seq_queue_tempo_malloc =
      _snd_seq_queue_tempo_malloc_ptr
          .asFunction<_dart_snd_seq_queue_tempo_malloc>();

  void snd_seq_queue_tempo_free(
    ffi.Pointer<snd_seq_queue_tempo_> ptr,
  ) {
    return _snd_seq_queue_tempo_free(
      ptr,
    );
  }

  late final _snd_seq_queue_tempo_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_free>>(
          'snd_seq_queue_tempo_free');
  late final _dart_snd_seq_queue_tempo_free _snd_seq_queue_tempo_free =
      _snd_seq_queue_tempo_free_ptr
          .asFunction<_dart_snd_seq_queue_tempo_free>();

  void snd_seq_queue_tempo_copy(
    ffi.Pointer<snd_seq_queue_tempo_> dst,
    ffi.Pointer<snd_seq_queue_tempo_> src,
  ) {
    return _snd_seq_queue_tempo_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_queue_tempo_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_copy>>(
          'snd_seq_queue_tempo_copy');
  late final _dart_snd_seq_queue_tempo_copy _snd_seq_queue_tempo_copy =
      _snd_seq_queue_tempo_copy_ptr
          .asFunction<_dart_snd_seq_queue_tempo_copy>();

  int snd_seq_queue_tempo_get_queue(
    ffi.Pointer<snd_seq_queue_tempo_> info,
  ) {
    return _snd_seq_queue_tempo_get_queue(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_get_queue>>(
          'snd_seq_queue_tempo_get_queue');
  late final _dart_snd_seq_queue_tempo_get_queue
      _snd_seq_queue_tempo_get_queue = _snd_seq_queue_tempo_get_queue_ptr
          .asFunction<_dart_snd_seq_queue_tempo_get_queue>();

  int snd_seq_queue_tempo_get_tempo(
    ffi.Pointer<snd_seq_queue_tempo_> info,
  ) {
    return _snd_seq_queue_tempo_get_tempo(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_tempo_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_get_tempo>>(
          'snd_seq_queue_tempo_get_tempo');
  late final _dart_snd_seq_queue_tempo_get_tempo
      _snd_seq_queue_tempo_get_tempo = _snd_seq_queue_tempo_get_tempo_ptr
          .asFunction<_dart_snd_seq_queue_tempo_get_tempo>();

  int snd_seq_queue_tempo_get_ppq(
    ffi.Pointer<snd_seq_queue_tempo_> info,
  ) {
    return _snd_seq_queue_tempo_get_ppq(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_ppq_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_get_ppq>>(
          'snd_seq_queue_tempo_get_ppq');
  late final _dart_snd_seq_queue_tempo_get_ppq _snd_seq_queue_tempo_get_ppq =
      _snd_seq_queue_tempo_get_ppq_ptr
          .asFunction<_dart_snd_seq_queue_tempo_get_ppq>();

  int snd_seq_queue_tempo_get_skew(
    ffi.Pointer<snd_seq_queue_tempo_> info,
  ) {
    return _snd_seq_queue_tempo_get_skew(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_skew_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_get_skew>>(
          'snd_seq_queue_tempo_get_skew');
  late final _dart_snd_seq_queue_tempo_get_skew _snd_seq_queue_tempo_get_skew =
      _snd_seq_queue_tempo_get_skew_ptr
          .asFunction<_dart_snd_seq_queue_tempo_get_skew>();

  int snd_seq_queue_tempo_get_skew_base(
    ffi.Pointer<snd_seq_queue_tempo_> info,
  ) {
    return _snd_seq_queue_tempo_get_skew_base(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_skew_base_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_get_skew_base>>(
          'snd_seq_queue_tempo_get_skew_base');
  late final _dart_snd_seq_queue_tempo_get_skew_base
      _snd_seq_queue_tempo_get_skew_base =
      _snd_seq_queue_tempo_get_skew_base_ptr
          .asFunction<_dart_snd_seq_queue_tempo_get_skew_base>();

  void snd_seq_queue_tempo_set_tempo(
    ffi.Pointer<snd_seq_queue_tempo_> info,
    int tempo,
  ) {
    return _snd_seq_queue_tempo_set_tempo(
      info,
      tempo,
    );
  }

  late final _snd_seq_queue_tempo_set_tempo_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_set_tempo>>(
          'snd_seq_queue_tempo_set_tempo');
  late final _dart_snd_seq_queue_tempo_set_tempo
      _snd_seq_queue_tempo_set_tempo = _snd_seq_queue_tempo_set_tempo_ptr
          .asFunction<_dart_snd_seq_queue_tempo_set_tempo>();

  void snd_seq_queue_tempo_set_ppq(
    ffi.Pointer<snd_seq_queue_tempo_> info,
    int ppq,
  ) {
    return _snd_seq_queue_tempo_set_ppq(
      info,
      ppq,
    );
  }

  late final _snd_seq_queue_tempo_set_ppq_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_set_ppq>>(
          'snd_seq_queue_tempo_set_ppq');
  late final _dart_snd_seq_queue_tempo_set_ppq _snd_seq_queue_tempo_set_ppq =
      _snd_seq_queue_tempo_set_ppq_ptr
          .asFunction<_dart_snd_seq_queue_tempo_set_ppq>();

  void snd_seq_queue_tempo_set_skew(
    ffi.Pointer<snd_seq_queue_tempo_> info,
    int skew,
  ) {
    return _snd_seq_queue_tempo_set_skew(
      info,
      skew,
    );
  }

  late final _snd_seq_queue_tempo_set_skew_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_set_skew>>(
          'snd_seq_queue_tempo_set_skew');
  late final _dart_snd_seq_queue_tempo_set_skew _snd_seq_queue_tempo_set_skew =
      _snd_seq_queue_tempo_set_skew_ptr
          .asFunction<_dart_snd_seq_queue_tempo_set_skew>();

  void snd_seq_queue_tempo_set_skew_base(
    ffi.Pointer<snd_seq_queue_tempo_> info,
    int base,
  ) {
    return _snd_seq_queue_tempo_set_skew_base(
      info,
      base,
    );
  }

  late final _snd_seq_queue_tempo_set_skew_base_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_tempo_set_skew_base>>(
          'snd_seq_queue_tempo_set_skew_base');
  late final _dart_snd_seq_queue_tempo_set_skew_base
      _snd_seq_queue_tempo_set_skew_base =
      _snd_seq_queue_tempo_set_skew_base_ptr
          .asFunction<_dart_snd_seq_queue_tempo_set_skew_base>();

  int snd_seq_get_queue_tempo(
    ffi.Pointer<snd_seq_> handle,
    int q,
    ffi.Pointer<snd_seq_queue_tempo_> tempo,
  ) {
    return _snd_seq_get_queue_tempo(
      handle,
      q,
      tempo,
    );
  }

  late final _snd_seq_get_queue_tempo_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_queue_tempo>>(
          'snd_seq_get_queue_tempo');
  late final _dart_snd_seq_get_queue_tempo _snd_seq_get_queue_tempo =
      _snd_seq_get_queue_tempo_ptr.asFunction<_dart_snd_seq_get_queue_tempo>();

  int snd_seq_set_queue_tempo(
    ffi.Pointer<snd_seq_> handle,
    int q,
    ffi.Pointer<snd_seq_queue_tempo_> tempo,
  ) {
    return _snd_seq_set_queue_tempo(
      handle,
      q,
      tempo,
    );
  }

  late final _snd_seq_set_queue_tempo_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_queue_tempo>>(
          'snd_seq_set_queue_tempo');
  late final _dart_snd_seq_set_queue_tempo _snd_seq_set_queue_tempo =
      _snd_seq_set_queue_tempo_ptr.asFunction<_dart_snd_seq_set_queue_tempo>();

  int snd_seq_queue_timer_sizeof() {
    return _snd_seq_queue_timer_sizeof();
  }

  late final _snd_seq_queue_timer_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_sizeof>>(
          'snd_seq_queue_timer_sizeof');
  late final _dart_snd_seq_queue_timer_sizeof _snd_seq_queue_timer_sizeof =
      _snd_seq_queue_timer_sizeof_ptr
          .asFunction<_dart_snd_seq_queue_timer_sizeof>();

  int snd_seq_queue_timer_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_queue_timer_>> ptr,
  ) {
    return _snd_seq_queue_timer_malloc(
      ptr,
    );
  }

  late final _snd_seq_queue_timer_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_malloc>>(
          'snd_seq_queue_timer_malloc');
  late final _dart_snd_seq_queue_timer_malloc _snd_seq_queue_timer_malloc =
      _snd_seq_queue_timer_malloc_ptr
          .asFunction<_dart_snd_seq_queue_timer_malloc>();

  void snd_seq_queue_timer_free(
    ffi.Pointer<snd_seq_queue_timer_> ptr,
  ) {
    return _snd_seq_queue_timer_free(
      ptr,
    );
  }

  late final _snd_seq_queue_timer_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_free>>(
          'snd_seq_queue_timer_free');
  late final _dart_snd_seq_queue_timer_free _snd_seq_queue_timer_free =
      _snd_seq_queue_timer_free_ptr
          .asFunction<_dart_snd_seq_queue_timer_free>();

  void snd_seq_queue_timer_copy(
    ffi.Pointer<snd_seq_queue_timer_> dst,
    ffi.Pointer<snd_seq_queue_timer_> src,
  ) {
    return _snd_seq_queue_timer_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_queue_timer_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_copy>>(
          'snd_seq_queue_timer_copy');
  late final _dart_snd_seq_queue_timer_copy _snd_seq_queue_timer_copy =
      _snd_seq_queue_timer_copy_ptr
          .asFunction<_dart_snd_seq_queue_timer_copy>();

  int snd_seq_queue_timer_get_queue(
    ffi.Pointer<snd_seq_queue_timer_> info,
  ) {
    return _snd_seq_queue_timer_get_queue(
      info,
    );
  }

  late final _snd_seq_queue_timer_get_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_get_queue>>(
          'snd_seq_queue_timer_get_queue');
  late final _dart_snd_seq_queue_timer_get_queue
      _snd_seq_queue_timer_get_queue = _snd_seq_queue_timer_get_queue_ptr
          .asFunction<_dart_snd_seq_queue_timer_get_queue>();

  int snd_seq_queue_timer_get_type(
    ffi.Pointer<snd_seq_queue_timer_> info,
  ) {
    return _snd_seq_queue_timer_get_type(
      info,
    );
  }

  late final _snd_seq_queue_timer_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_get_type>>(
          'snd_seq_queue_timer_get_type');
  late final _dart_snd_seq_queue_timer_get_type _snd_seq_queue_timer_get_type =
      _snd_seq_queue_timer_get_type_ptr
          .asFunction<_dart_snd_seq_queue_timer_get_type>();

  ffi.Pointer<snd_timer_id_> snd_seq_queue_timer_get_id(
    ffi.Pointer<snd_seq_queue_timer_> info,
  ) {
    return _snd_seq_queue_timer_get_id(
      info,
    );
  }

  late final _snd_seq_queue_timer_get_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_get_id>>(
          'snd_seq_queue_timer_get_id');
  late final _dart_snd_seq_queue_timer_get_id _snd_seq_queue_timer_get_id =
      _snd_seq_queue_timer_get_id_ptr
          .asFunction<_dart_snd_seq_queue_timer_get_id>();

  int snd_seq_queue_timer_get_resolution(
    ffi.Pointer<snd_seq_queue_timer_> info,
  ) {
    return _snd_seq_queue_timer_get_resolution(
      info,
    );
  }

  late final _snd_seq_queue_timer_get_resolution_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_get_resolution>>(
          'snd_seq_queue_timer_get_resolution');
  late final _dart_snd_seq_queue_timer_get_resolution
      _snd_seq_queue_timer_get_resolution =
      _snd_seq_queue_timer_get_resolution_ptr
          .asFunction<_dart_snd_seq_queue_timer_get_resolution>();

  void snd_seq_queue_timer_set_type(
    ffi.Pointer<snd_seq_queue_timer_> info,
    int type,
  ) {
    return _snd_seq_queue_timer_set_type(
      info,
      type,
    );
  }

  late final _snd_seq_queue_timer_set_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_set_type>>(
          'snd_seq_queue_timer_set_type');
  late final _dart_snd_seq_queue_timer_set_type _snd_seq_queue_timer_set_type =
      _snd_seq_queue_timer_set_type_ptr
          .asFunction<_dart_snd_seq_queue_timer_set_type>();

  void snd_seq_queue_timer_set_id(
    ffi.Pointer<snd_seq_queue_timer_> info,
    ffi.Pointer<snd_timer_id_> id,
  ) {
    return _snd_seq_queue_timer_set_id(
      info,
      id,
    );
  }

  late final _snd_seq_queue_timer_set_id_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_set_id>>(
          'snd_seq_queue_timer_set_id');
  late final _dart_snd_seq_queue_timer_set_id _snd_seq_queue_timer_set_id =
      _snd_seq_queue_timer_set_id_ptr
          .asFunction<_dart_snd_seq_queue_timer_set_id>();

  void snd_seq_queue_timer_set_resolution(
    ffi.Pointer<snd_seq_queue_timer_> info,
    int resolution,
  ) {
    return _snd_seq_queue_timer_set_resolution(
      info,
      resolution,
    );
  }

  late final _snd_seq_queue_timer_set_resolution_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_queue_timer_set_resolution>>(
          'snd_seq_queue_timer_set_resolution');
  late final _dart_snd_seq_queue_timer_set_resolution
      _snd_seq_queue_timer_set_resolution =
      _snd_seq_queue_timer_set_resolution_ptr
          .asFunction<_dart_snd_seq_queue_timer_set_resolution>();

  int snd_seq_get_queue_timer(
    ffi.Pointer<snd_seq_> handle,
    int q,
    ffi.Pointer<snd_seq_queue_timer_> timer,
  ) {
    return _snd_seq_get_queue_timer(
      handle,
      q,
      timer,
    );
  }

  late final _snd_seq_get_queue_timer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_queue_timer>>(
          'snd_seq_get_queue_timer');
  late final _dart_snd_seq_get_queue_timer _snd_seq_get_queue_timer =
      _snd_seq_get_queue_timer_ptr.asFunction<_dart_snd_seq_get_queue_timer>();

  int snd_seq_set_queue_timer(
    ffi.Pointer<snd_seq_> handle,
    int q,
    ffi.Pointer<snd_seq_queue_timer_> timer,
  ) {
    return _snd_seq_set_queue_timer(
      handle,
      q,
      timer,
    );
  }

  late final _snd_seq_set_queue_timer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_queue_timer>>(
          'snd_seq_set_queue_timer');
  late final _dart_snd_seq_set_queue_timer _snd_seq_set_queue_timer =
      _snd_seq_set_queue_timer_ptr.asFunction<_dart_snd_seq_set_queue_timer>();

  int snd_seq_free_event(
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_free_event(
      ev,
    );
  }

  late final _snd_seq_free_event_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_free_event>>('snd_seq_free_event');
  late final _dart_snd_seq_free_event _snd_seq_free_event =
      _snd_seq_free_event_ptr.asFunction<_dart_snd_seq_free_event>();

  int snd_seq_event_length(
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_event_length(
      ev,
    );
  }

  late final _snd_seq_event_length_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_event_length>>(
          'snd_seq_event_length');
  late final _dart_snd_seq_event_length _snd_seq_event_length =
      _snd_seq_event_length_ptr.asFunction<_dart_snd_seq_event_length>();

  int snd_seq_event_output(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_event_output(
      handle,
      ev,
    );
  }

  late final _snd_seq_event_output_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_event_output>>(
          'snd_seq_event_output');
  late final _dart_snd_seq_event_output _snd_seq_event_output =
      _snd_seq_event_output_ptr.asFunction<_dart_snd_seq_event_output>();

  int snd_seq_event_output_buffer(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_event_output_buffer(
      handle,
      ev,
    );
  }

  late final _snd_seq_event_output_buffer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_event_output_buffer>>(
          'snd_seq_event_output_buffer');
  late final _dart_snd_seq_event_output_buffer _snd_seq_event_output_buffer =
      _snd_seq_event_output_buffer_ptr
          .asFunction<_dart_snd_seq_event_output_buffer>();

  int snd_seq_event_output_direct(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_event_output_direct(
      handle,
      ev,
    );
  }

  late final _snd_seq_event_output_direct_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_event_output_direct>>(
          'snd_seq_event_output_direct');
  late final _dart_snd_seq_event_output_direct _snd_seq_event_output_direct =
      _snd_seq_event_output_direct_ptr
          .asFunction<_dart_snd_seq_event_output_direct>();

  int snd_seq_event_input(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<ffi.Pointer<snd_seq_event_t>> ev,
  ) {
    return _snd_seq_event_input(
      handle,
      ev,
    );
  }

  late final _snd_seq_event_input_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_event_input>>(
          'snd_seq_event_input');
  late final _dart_snd_seq_event_input _snd_seq_event_input =
      _snd_seq_event_input_ptr.asFunction<_dart_snd_seq_event_input>();

  int snd_seq_event_input_pending(
    ffi.Pointer<snd_seq_> seq,
    int fetch_sequencer,
  ) {
    return _snd_seq_event_input_pending(
      seq,
      fetch_sequencer,
    );
  }

  late final _snd_seq_event_input_pending_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_event_input_pending>>(
          'snd_seq_event_input_pending');
  late final _dart_snd_seq_event_input_pending _snd_seq_event_input_pending =
      _snd_seq_event_input_pending_ptr
          .asFunction<_dart_snd_seq_event_input_pending>();

  int snd_seq_drain_output(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_drain_output(
      handle,
    );
  }

  late final _snd_seq_drain_output_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_drain_output>>(
          'snd_seq_drain_output');
  late final _dart_snd_seq_drain_output _snd_seq_drain_output =
      _snd_seq_drain_output_ptr.asFunction<_dart_snd_seq_drain_output>();

  int snd_seq_event_output_pending(
    ffi.Pointer<snd_seq_> seq,
  ) {
    return _snd_seq_event_output_pending(
      seq,
    );
  }

  late final _snd_seq_event_output_pending_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_event_output_pending>>(
          'snd_seq_event_output_pending');
  late final _dart_snd_seq_event_output_pending _snd_seq_event_output_pending =
      _snd_seq_event_output_pending_ptr
          .asFunction<_dart_snd_seq_event_output_pending>();

  int snd_seq_extract_output(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<ffi.Pointer<snd_seq_event_t>> ev,
  ) {
    return _snd_seq_extract_output(
      handle,
      ev,
    );
  }

  late final _snd_seq_extract_output_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_extract_output>>(
          'snd_seq_extract_output');
  late final _dart_snd_seq_extract_output _snd_seq_extract_output =
      _snd_seq_extract_output_ptr.asFunction<_dart_snd_seq_extract_output>();

  int snd_seq_drop_output(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_drop_output(
      handle,
    );
  }

  late final _snd_seq_drop_output_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_drop_output>>(
          'snd_seq_drop_output');
  late final _dart_snd_seq_drop_output _snd_seq_drop_output =
      _snd_seq_drop_output_ptr.asFunction<_dart_snd_seq_drop_output>();

  int snd_seq_drop_output_buffer(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_drop_output_buffer(
      handle,
    );
  }

  late final _snd_seq_drop_output_buffer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_drop_output_buffer>>(
          'snd_seq_drop_output_buffer');
  late final _dart_snd_seq_drop_output_buffer _snd_seq_drop_output_buffer =
      _snd_seq_drop_output_buffer_ptr
          .asFunction<_dart_snd_seq_drop_output_buffer>();

  int snd_seq_drop_input(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_drop_input(
      handle,
    );
  }

  late final _snd_seq_drop_input_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_drop_input>>('snd_seq_drop_input');
  late final _dart_snd_seq_drop_input _snd_seq_drop_input =
      _snd_seq_drop_input_ptr.asFunction<_dart_snd_seq_drop_input>();

  int snd_seq_drop_input_buffer(
    ffi.Pointer<snd_seq_> handle,
  ) {
    return _snd_seq_drop_input_buffer(
      handle,
    );
  }

  late final _snd_seq_drop_input_buffer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_drop_input_buffer>>(
          'snd_seq_drop_input_buffer');
  late final _dart_snd_seq_drop_input_buffer _snd_seq_drop_input_buffer =
      _snd_seq_drop_input_buffer_ptr
          .asFunction<_dart_snd_seq_drop_input_buffer>();

  int snd_seq_remove_events_sizeof() {
    return _snd_seq_remove_events_sizeof();
  }

  late final _snd_seq_remove_events_sizeof_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_sizeof>>(
          'snd_seq_remove_events_sizeof');
  late final _dart_snd_seq_remove_events_sizeof _snd_seq_remove_events_sizeof =
      _snd_seq_remove_events_sizeof_ptr
          .asFunction<_dart_snd_seq_remove_events_sizeof>();

  int snd_seq_remove_events_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_remove_events_>> ptr,
  ) {
    return _snd_seq_remove_events_malloc(
      ptr,
    );
  }

  late final _snd_seq_remove_events_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_malloc>>(
          'snd_seq_remove_events_malloc');
  late final _dart_snd_seq_remove_events_malloc _snd_seq_remove_events_malloc =
      _snd_seq_remove_events_malloc_ptr
          .asFunction<_dart_snd_seq_remove_events_malloc>();

  void snd_seq_remove_events_free(
    ffi.Pointer<snd_seq_remove_events_> ptr,
  ) {
    return _snd_seq_remove_events_free(
      ptr,
    );
  }

  late final _snd_seq_remove_events_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_free>>(
          'snd_seq_remove_events_free');
  late final _dart_snd_seq_remove_events_free _snd_seq_remove_events_free =
      _snd_seq_remove_events_free_ptr
          .asFunction<_dart_snd_seq_remove_events_free>();

  void snd_seq_remove_events_copy(
    ffi.Pointer<snd_seq_remove_events_> dst,
    ffi.Pointer<snd_seq_remove_events_> src,
  ) {
    return _snd_seq_remove_events_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_remove_events_copy_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_copy>>(
          'snd_seq_remove_events_copy');
  late final _dart_snd_seq_remove_events_copy _snd_seq_remove_events_copy =
      _snd_seq_remove_events_copy_ptr
          .asFunction<_dart_snd_seq_remove_events_copy>();

  int snd_seq_remove_events_get_condition(
    ffi.Pointer<snd_seq_remove_events_> info,
  ) {
    return _snd_seq_remove_events_get_condition(
      info,
    );
  }

  late final _snd_seq_remove_events_get_condition_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_get_condition>>(
          'snd_seq_remove_events_get_condition');
  late final _dart_snd_seq_remove_events_get_condition
      _snd_seq_remove_events_get_condition =
      _snd_seq_remove_events_get_condition_ptr
          .asFunction<_dart_snd_seq_remove_events_get_condition>();

  int snd_seq_remove_events_get_queue(
    ffi.Pointer<snd_seq_remove_events_> info,
  ) {
    return _snd_seq_remove_events_get_queue(
      info,
    );
  }

  late final _snd_seq_remove_events_get_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_get_queue>>(
          'snd_seq_remove_events_get_queue');
  late final _dart_snd_seq_remove_events_get_queue
      _snd_seq_remove_events_get_queue = _snd_seq_remove_events_get_queue_ptr
          .asFunction<_dart_snd_seq_remove_events_get_queue>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_remove_events_get_dest(
    ffi.Pointer<snd_seq_remove_events_> info,
  ) {
    return _snd_seq_remove_events_get_dest(
      info,
    );
  }

  late final _snd_seq_remove_events_get_dest_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_get_dest>>(
          'snd_seq_remove_events_get_dest');
  late final _dart_snd_seq_remove_events_get_dest
      _snd_seq_remove_events_get_dest = _snd_seq_remove_events_get_dest_ptr
          .asFunction<_dart_snd_seq_remove_events_get_dest>();

  int snd_seq_remove_events_get_channel(
    ffi.Pointer<snd_seq_remove_events_> info,
  ) {
    return _snd_seq_remove_events_get_channel(
      info,
    );
  }

  late final _snd_seq_remove_events_get_channel_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_get_channel>>(
          'snd_seq_remove_events_get_channel');
  late final _dart_snd_seq_remove_events_get_channel
      _snd_seq_remove_events_get_channel =
      _snd_seq_remove_events_get_channel_ptr
          .asFunction<_dart_snd_seq_remove_events_get_channel>();

  int snd_seq_remove_events_get_event_type(
    ffi.Pointer<snd_seq_remove_events_> info,
  ) {
    return _snd_seq_remove_events_get_event_type(
      info,
    );
  }

  late final _snd_seq_remove_events_get_event_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_get_event_type>>(
          'snd_seq_remove_events_get_event_type');
  late final _dart_snd_seq_remove_events_get_event_type
      _snd_seq_remove_events_get_event_type =
      _snd_seq_remove_events_get_event_type_ptr
          .asFunction<_dart_snd_seq_remove_events_get_event_type>();

  int snd_seq_remove_events_get_tag(
    ffi.Pointer<snd_seq_remove_events_> info,
  ) {
    return _snd_seq_remove_events_get_tag(
      info,
    );
  }

  late final _snd_seq_remove_events_get_tag_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_get_tag>>(
          'snd_seq_remove_events_get_tag');
  late final _dart_snd_seq_remove_events_get_tag
      _snd_seq_remove_events_get_tag = _snd_seq_remove_events_get_tag_ptr
          .asFunction<_dart_snd_seq_remove_events_get_tag>();

  void snd_seq_remove_events_set_condition(
    ffi.Pointer<snd_seq_remove_events_> info,
    int flags,
  ) {
    return _snd_seq_remove_events_set_condition(
      info,
      flags,
    );
  }

  late final _snd_seq_remove_events_set_condition_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_set_condition>>(
          'snd_seq_remove_events_set_condition');
  late final _dart_snd_seq_remove_events_set_condition
      _snd_seq_remove_events_set_condition =
      _snd_seq_remove_events_set_condition_ptr
          .asFunction<_dart_snd_seq_remove_events_set_condition>();

  void snd_seq_remove_events_set_queue(
    ffi.Pointer<snd_seq_remove_events_> info,
    int queue,
  ) {
    return _snd_seq_remove_events_set_queue(
      info,
      queue,
    );
  }

  late final _snd_seq_remove_events_set_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_set_queue>>(
          'snd_seq_remove_events_set_queue');
  late final _dart_snd_seq_remove_events_set_queue
      _snd_seq_remove_events_set_queue = _snd_seq_remove_events_set_queue_ptr
          .asFunction<_dart_snd_seq_remove_events_set_queue>();

  void snd_seq_remove_events_set_dest(
    ffi.Pointer<snd_seq_remove_events_> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_remove_events_set_dest(
      info,
      addr,
    );
  }

  late final _snd_seq_remove_events_set_dest_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_set_dest>>(
          'snd_seq_remove_events_set_dest');
  late final _dart_snd_seq_remove_events_set_dest
      _snd_seq_remove_events_set_dest = _snd_seq_remove_events_set_dest_ptr
          .asFunction<_dart_snd_seq_remove_events_set_dest>();

  void snd_seq_remove_events_set_channel(
    ffi.Pointer<snd_seq_remove_events_> info,
    int channel,
  ) {
    return _snd_seq_remove_events_set_channel(
      info,
      channel,
    );
  }

  late final _snd_seq_remove_events_set_channel_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_set_channel>>(
          'snd_seq_remove_events_set_channel');
  late final _dart_snd_seq_remove_events_set_channel
      _snd_seq_remove_events_set_channel =
      _snd_seq_remove_events_set_channel_ptr
          .asFunction<_dart_snd_seq_remove_events_set_channel>();

  void snd_seq_remove_events_set_event_type(
    ffi.Pointer<snd_seq_remove_events_> info,
    int type,
  ) {
    return _snd_seq_remove_events_set_event_type(
      info,
      type,
    );
  }

  late final _snd_seq_remove_events_set_event_type_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_set_event_type>>(
          'snd_seq_remove_events_set_event_type');
  late final _dart_snd_seq_remove_events_set_event_type
      _snd_seq_remove_events_set_event_type =
      _snd_seq_remove_events_set_event_type_ptr
          .asFunction<_dart_snd_seq_remove_events_set_event_type>();

  void snd_seq_remove_events_set_tag(
    ffi.Pointer<snd_seq_remove_events_> info,
    int tag,
  ) {
    return _snd_seq_remove_events_set_tag(
      info,
      tag,
    );
  }

  late final _snd_seq_remove_events_set_tag_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events_set_tag>>(
          'snd_seq_remove_events_set_tag');
  late final _dart_snd_seq_remove_events_set_tag
      _snd_seq_remove_events_set_tag = _snd_seq_remove_events_set_tag_ptr
          .asFunction<_dart_snd_seq_remove_events_set_tag>();

  int snd_seq_remove_events(
    ffi.Pointer<snd_seq_> handle,
    ffi.Pointer<snd_seq_remove_events_> info,
  ) {
    return _snd_seq_remove_events(
      handle,
      info,
    );
  }

  late final _snd_seq_remove_events_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_remove_events>>(
          'snd_seq_remove_events');
  late final _dart_snd_seq_remove_events _snd_seq_remove_events =
      _snd_seq_remove_events_ptr.asFunction<_dart_snd_seq_remove_events>();

  void snd_seq_set_bit(
    int nr,
    ffi.Pointer<ffi.Void> array,
  ) {
    return _snd_seq_set_bit(
      nr,
      array,
    );
  }

  late final _snd_seq_set_bit_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_bit>>('snd_seq_set_bit');
  late final _dart_snd_seq_set_bit _snd_seq_set_bit =
      _snd_seq_set_bit_ptr.asFunction<_dart_snd_seq_set_bit>();

  void snd_seq_unset_bit(
    int nr,
    ffi.Pointer<ffi.Void> array,
  ) {
    return _snd_seq_unset_bit(
      nr,
      array,
    );
  }

  late final _snd_seq_unset_bit_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_unset_bit>>('snd_seq_unset_bit');
  late final _dart_snd_seq_unset_bit _snd_seq_unset_bit =
      _snd_seq_unset_bit_ptr.asFunction<_dart_snd_seq_unset_bit>();

  int snd_seq_change_bit(
    int nr,
    ffi.Pointer<ffi.Void> array,
  ) {
    return _snd_seq_change_bit(
      nr,
      array,
    );
  }

  late final _snd_seq_change_bit_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_change_bit>>('snd_seq_change_bit');
  late final _dart_snd_seq_change_bit _snd_seq_change_bit =
      _snd_seq_change_bit_ptr.asFunction<_dart_snd_seq_change_bit>();

  int snd_seq_get_bit(
    int nr,
    ffi.Pointer<ffi.Void> array,
  ) {
    return _snd_seq_get_bit(
      nr,
      array,
    );
  }

  late final _snd_seq_get_bit_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_get_bit>>('snd_seq_get_bit');
  late final _dart_snd_seq_get_bit _snd_seq_get_bit =
      _snd_seq_get_bit_ptr.asFunction<_dart_snd_seq_get_bit>();

  late final ffi.Pointer<ffi.Pointer<ffi.Uint32>> _snd_seq_event_types =
      _lookup<ffi.Pointer<ffi.Uint32>>('snd_seq_event_types');

  ffi.Pointer<ffi.Uint32> get snd_seq_event_types => _snd_seq_event_types.value;

  set snd_seq_event_types(ffi.Pointer<ffi.Uint32> value) =>
      _snd_seq_event_types.value = value;

  int snd_seq_control_queue(
    ffi.Pointer<snd_seq_> seq,
    int q,
    int type,
    int value,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_control_queue(
      seq,
      q,
      type,
      value,
      ev,
    );
  }

  late final _snd_seq_control_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_control_queue>>(
          'snd_seq_control_queue');
  late final _dart_snd_seq_control_queue _snd_seq_control_queue =
      _snd_seq_control_queue_ptr.asFunction<_dart_snd_seq_control_queue>();

  int snd_seq_create_simple_port(
    ffi.Pointer<snd_seq_> seq,
    ffi.Pointer<ffi.Int8> name,
    int caps,
    int type,
  ) {
    return _snd_seq_create_simple_port(
      seq,
      name,
      caps,
      type,
    );
  }

  late final _snd_seq_create_simple_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_create_simple_port>>(
          'snd_seq_create_simple_port');
  late final _dart_snd_seq_create_simple_port _snd_seq_create_simple_port =
      _snd_seq_create_simple_port_ptr
          .asFunction<_dart_snd_seq_create_simple_port>();

  int snd_seq_delete_simple_port(
    ffi.Pointer<snd_seq_> seq,
    int port,
  ) {
    return _snd_seq_delete_simple_port(
      seq,
      port,
    );
  }

  late final _snd_seq_delete_simple_port_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_delete_simple_port>>(
          'snd_seq_delete_simple_port');
  late final _dart_snd_seq_delete_simple_port _snd_seq_delete_simple_port =
      _snd_seq_delete_simple_port_ptr
          .asFunction<_dart_snd_seq_delete_simple_port>();

  int snd_seq_connect_from(
    ffi.Pointer<snd_seq_> seq,
    int my_port,
    int src_client,
    int src_port,
  ) {
    return _snd_seq_connect_from(
      seq,
      my_port,
      src_client,
      src_port,
    );
  }

  late final _snd_seq_connect_from_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_connect_from>>(
          'snd_seq_connect_from');
  late final _dart_snd_seq_connect_from _snd_seq_connect_from =
      _snd_seq_connect_from_ptr.asFunction<_dart_snd_seq_connect_from>();

  int snd_seq_connect_to(
    ffi.Pointer<snd_seq_> seq,
    int my_port,
    int dest_client,
    int dest_port,
  ) {
    return _snd_seq_connect_to(
      seq,
      my_port,
      dest_client,
      dest_port,
    );
  }

  late final _snd_seq_connect_to_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_connect_to>>('snd_seq_connect_to');
  late final _dart_snd_seq_connect_to _snd_seq_connect_to =
      _snd_seq_connect_to_ptr.asFunction<_dart_snd_seq_connect_to>();

  int snd_seq_disconnect_from(
    ffi.Pointer<snd_seq_> seq,
    int my_port,
    int src_client,
    int src_port,
  ) {
    return _snd_seq_disconnect_from(
      seq,
      my_port,
      src_client,
      src_port,
    );
  }

  late final _snd_seq_disconnect_from_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_disconnect_from>>(
          'snd_seq_disconnect_from');
  late final _dart_snd_seq_disconnect_from _snd_seq_disconnect_from =
      _snd_seq_disconnect_from_ptr.asFunction<_dart_snd_seq_disconnect_from>();

  int snd_seq_disconnect_to(
    ffi.Pointer<snd_seq_> seq,
    int my_port,
    int dest_client,
    int dest_port,
  ) {
    return _snd_seq_disconnect_to(
      seq,
      my_port,
      dest_client,
      dest_port,
    );
  }

  late final _snd_seq_disconnect_to_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_disconnect_to>>(
          'snd_seq_disconnect_to');
  late final _dart_snd_seq_disconnect_to _snd_seq_disconnect_to =
      _snd_seq_disconnect_to_ptr.asFunction<_dart_snd_seq_disconnect_to>();

  int snd_seq_set_client_name(
    ffi.Pointer<snd_seq_> seq,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _snd_seq_set_client_name(
      seq,
      name,
    );
  }

  late final _snd_seq_set_client_name_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_client_name>>(
          'snd_seq_set_client_name');
  late final _dart_snd_seq_set_client_name _snd_seq_set_client_name =
      _snd_seq_set_client_name_ptr.asFunction<_dart_snd_seq_set_client_name>();

  int snd_seq_set_client_event_filter(
    ffi.Pointer<snd_seq_> seq,
    int event_type,
  ) {
    return _snd_seq_set_client_event_filter(
      seq,
      event_type,
    );
  }

  late final _snd_seq_set_client_event_filter_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_client_event_filter>>(
          'snd_seq_set_client_event_filter');
  late final _dart_snd_seq_set_client_event_filter
      _snd_seq_set_client_event_filter = _snd_seq_set_client_event_filter_ptr
          .asFunction<_dart_snd_seq_set_client_event_filter>();

  int snd_seq_set_client_pool_output(
    ffi.Pointer<snd_seq_> seq,
    int size,
  ) {
    return _snd_seq_set_client_pool_output(
      seq,
      size,
    );
  }

  late final _snd_seq_set_client_pool_output_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_client_pool_output>>(
          'snd_seq_set_client_pool_output');
  late final _dart_snd_seq_set_client_pool_output
      _snd_seq_set_client_pool_output = _snd_seq_set_client_pool_output_ptr
          .asFunction<_dart_snd_seq_set_client_pool_output>();

  int snd_seq_set_client_pool_output_room(
    ffi.Pointer<snd_seq_> seq,
    int size,
  ) {
    return _snd_seq_set_client_pool_output_room(
      seq,
      size,
    );
  }

  late final _snd_seq_set_client_pool_output_room_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_client_pool_output_room>>(
          'snd_seq_set_client_pool_output_room');
  late final _dart_snd_seq_set_client_pool_output_room
      _snd_seq_set_client_pool_output_room =
      _snd_seq_set_client_pool_output_room_ptr
          .asFunction<_dart_snd_seq_set_client_pool_output_room>();

  int snd_seq_set_client_pool_input(
    ffi.Pointer<snd_seq_> seq,
    int size,
  ) {
    return _snd_seq_set_client_pool_input(
      seq,
      size,
    );
  }

  late final _snd_seq_set_client_pool_input_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_set_client_pool_input>>(
          'snd_seq_set_client_pool_input');
  late final _dart_snd_seq_set_client_pool_input
      _snd_seq_set_client_pool_input = _snd_seq_set_client_pool_input_ptr
          .asFunction<_dart_snd_seq_set_client_pool_input>();

  int snd_seq_sync_output_queue(
    ffi.Pointer<snd_seq_> seq,
  ) {
    return _snd_seq_sync_output_queue(
      seq,
    );
  }

  late final _snd_seq_sync_output_queue_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_sync_output_queue>>(
          'snd_seq_sync_output_queue');
  late final _dart_snd_seq_sync_output_queue _snd_seq_sync_output_queue =
      _snd_seq_sync_output_queue_ptr
          .asFunction<_dart_snd_seq_sync_output_queue>();

  int snd_seq_parse_address(
    ffi.Pointer<snd_seq_> seq,
    ffi.Pointer<snd_seq_addr_t> addr,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _snd_seq_parse_address(
      seq,
      addr,
      str,
    );
  }

  late final _snd_seq_parse_address_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_parse_address>>(
          'snd_seq_parse_address');
  late final _dart_snd_seq_parse_address _snd_seq_parse_address =
      _snd_seq_parse_address_ptr.asFunction<_dart_snd_seq_parse_address>();

  int snd_seq_reset_pool_output(
    ffi.Pointer<snd_seq_> seq,
  ) {
    return _snd_seq_reset_pool_output(
      seq,
    );
  }

  late final _snd_seq_reset_pool_output_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_reset_pool_output>>(
          'snd_seq_reset_pool_output');
  late final _dart_snd_seq_reset_pool_output _snd_seq_reset_pool_output =
      _snd_seq_reset_pool_output_ptr
          .asFunction<_dart_snd_seq_reset_pool_output>();

  int snd_seq_reset_pool_input(
    ffi.Pointer<snd_seq_> seq,
  ) {
    return _snd_seq_reset_pool_input(
      seq,
    );
  }

  late final _snd_seq_reset_pool_input_ptr =
      _lookup<ffi.NativeFunction<_c_snd_seq_reset_pool_input>>(
          'snd_seq_reset_pool_input');
  late final _dart_snd_seq_reset_pool_input _snd_seq_reset_pool_input =
      _snd_seq_reset_pool_input_ptr
          .asFunction<_dart_snd_seq_reset_pool_input>();

  int snd_midi_event_new(
    int bufsize,
    ffi.Pointer<ffi.Pointer<snd_midi_event>> rdev,
  ) {
    return _snd_midi_event_new(
      bufsize,
      rdev,
    );
  }

  late final _snd_midi_event_new_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_new>>('snd_midi_event_new');
  late final _dart_snd_midi_event_new _snd_midi_event_new =
      _snd_midi_event_new_ptr.asFunction<_dart_snd_midi_event_new>();

  int snd_midi_event_resize_buffer(
    ffi.Pointer<snd_midi_event> dev,
    int bufsize,
  ) {
    return _snd_midi_event_resize_buffer(
      dev,
      bufsize,
    );
  }

  late final _snd_midi_event_resize_buffer_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_resize_buffer>>(
          'snd_midi_event_resize_buffer');
  late final _dart_snd_midi_event_resize_buffer _snd_midi_event_resize_buffer =
      _snd_midi_event_resize_buffer_ptr
          .asFunction<_dart_snd_midi_event_resize_buffer>();

  void snd_midi_event_free(
    ffi.Pointer<snd_midi_event> dev,
  ) {
    return _snd_midi_event_free(
      dev,
    );
  }

  late final _snd_midi_event_free_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_free>>(
          'snd_midi_event_free');
  late final _dart_snd_midi_event_free _snd_midi_event_free =
      _snd_midi_event_free_ptr.asFunction<_dart_snd_midi_event_free>();

  void snd_midi_event_init(
    ffi.Pointer<snd_midi_event> dev,
  ) {
    return _snd_midi_event_init(
      dev,
    );
  }

  late final _snd_midi_event_init_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_init>>(
          'snd_midi_event_init');
  late final _dart_snd_midi_event_init _snd_midi_event_init =
      _snd_midi_event_init_ptr.asFunction<_dart_snd_midi_event_init>();

  void snd_midi_event_reset_encode(
    ffi.Pointer<snd_midi_event> dev,
  ) {
    return _snd_midi_event_reset_encode(
      dev,
    );
  }

  late final _snd_midi_event_reset_encode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_reset_encode>>(
          'snd_midi_event_reset_encode');
  late final _dart_snd_midi_event_reset_encode _snd_midi_event_reset_encode =
      _snd_midi_event_reset_encode_ptr
          .asFunction<_dart_snd_midi_event_reset_encode>();

  void snd_midi_event_reset_decode(
    ffi.Pointer<snd_midi_event> dev,
  ) {
    return _snd_midi_event_reset_decode(
      dev,
    );
  }

  late final _snd_midi_event_reset_decode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_reset_decode>>(
          'snd_midi_event_reset_decode');
  late final _dart_snd_midi_event_reset_decode _snd_midi_event_reset_decode =
      _snd_midi_event_reset_decode_ptr
          .asFunction<_dart_snd_midi_event_reset_decode>();

  void snd_midi_event_no_status(
    ffi.Pointer<snd_midi_event> dev,
    int on_1,
  ) {
    return _snd_midi_event_no_status(
      dev,
      on_1,
    );
  }

  late final _snd_midi_event_no_status_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_no_status>>(
          'snd_midi_event_no_status');
  late final _dart_snd_midi_event_no_status _snd_midi_event_no_status =
      _snd_midi_event_no_status_ptr
          .asFunction<_dart_snd_midi_event_no_status>();

  int snd_midi_event_encode(
    ffi.Pointer<snd_midi_event> dev,
    ffi.Pointer<ffi.Uint8> buf,
    int count,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_midi_event_encode(
      dev,
      buf,
      count,
      ev,
    );
  }

  late final _snd_midi_event_encode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_encode>>(
          'snd_midi_event_encode');
  late final _dart_snd_midi_event_encode _snd_midi_event_encode =
      _snd_midi_event_encode_ptr.asFunction<_dart_snd_midi_event_encode>();

  int snd_midi_event_encode_byte(
    ffi.Pointer<snd_midi_event> dev,
    int c,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_midi_event_encode_byte(
      dev,
      c,
      ev,
    );
  }

  late final _snd_midi_event_encode_byte_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_encode_byte>>(
          'snd_midi_event_encode_byte');
  late final _dart_snd_midi_event_encode_byte _snd_midi_event_encode_byte =
      _snd_midi_event_encode_byte_ptr
          .asFunction<_dart_snd_midi_event_encode_byte>();

  int snd_midi_event_decode(
    ffi.Pointer<snd_midi_event> dev,
    ffi.Pointer<ffi.Uint8> buf,
    int count,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_midi_event_decode(
      dev,
      buf,
      count,
      ev,
    );
  }

  late final _snd_midi_event_decode_ptr =
      _lookup<ffi.NativeFunction<_c_snd_midi_event_decode>>(
          'snd_midi_event_decode');
  late final _dart_snd_midi_event_decode _snd_midi_event_decode =
      _snd_midi_event_decode_ptr.asFunction<_dart_snd_midi_event_decode>();
}

class _fsid_t_ extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> _val_;
}

class _mbstate_t_ extends ffi.Opaque {}

class _fpos_t_ extends ffi.Opaque {}

class _fpos64_t_ extends ffi.Opaque {}

class IO_marker_ extends ffi.Opaque {}

class IO_codecvt_ extends ffi.Opaque {}

class IO_wide_data_ extends ffi.Opaque {}

class IO_FILE_ extends ffi.Struct {
  @ffi.Int32()
  external int flags_;

  external ffi.Pointer<ffi.Int8> IO_read_ptr_;

  external ffi.Pointer<ffi.Int8> IO_read_end_;

  external ffi.Pointer<ffi.Int8> IO_read_base_;

  external ffi.Pointer<ffi.Int8> IO_write_base_;

  external ffi.Pointer<ffi.Int8> IO_write_ptr_;

  external ffi.Pointer<ffi.Int8> IO_write_end_;

  external ffi.Pointer<ffi.Int8> IO_buf_base_;

  external ffi.Pointer<ffi.Int8> IO_buf_end_;

  external ffi.Pointer<ffi.Int8> IO_save_base_;

  external ffi.Pointer<ffi.Int8> IO_backup_base_;

  external ffi.Pointer<ffi.Int8> IO_save_end_;

  external ffi.Pointer<IO_marker_> markers_;

  external ffi.Pointer<IO_FILE_> chain_;

  @ffi.Int32()
  external int fileno_;

  @ffi.Int32()
  external int flags2_;

  @ffi.Int64()
  external int old_offset_;

  @ffi.Uint16()
  external int cur_column_;

  @ffi.Int8()
  external int vtable_offset_;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> shortbuf_;

  external ffi.Pointer<ffi.Void> lock_;

  @ffi.Int64()
  external int offset_;

  external ffi.Pointer<IO_codecvt_> codecvt_;

  external ffi.Pointer<IO_wide_data_> wide_data_;

  external ffi.Pointer<IO_FILE_> freeres_list_;

  external ffi.Pointer<ffi.Void> freeres_buf_;

  @ffi.Int32()
  external int _pad5_;

  @ffi.Int32()
  external int mode_;

  @ffi.Int8()
  external int unused2_;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class _sigset_t_ extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> _val_;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int64> _fds_bits_;
}

class _pthread_list_t_ extends ffi.Struct {
  external ffi.Pointer<_pthread_list_t_> _prev_;

  external ffi.Pointer<_pthread_list_t_> _next_;
}

class _pthread_slist_t_ extends ffi.Struct {
  external ffi.Pointer<_pthread_slist_t_> _next_;
}

class _pthread_mutex_s_ extends ffi.Struct {
  @ffi.Int32()
  external int _lock_;

  @ffi.Uint32()
  external int _count_;

  @ffi.Int32()
  external int _owner_;

  @ffi.Uint32()
  external int _nusers_;

  @ffi.Int32()
  external int _kind_;

  @ffi.Int16()
  external int _spins_;

  @ffi.Int16()
  external int _elision_;

  external _pthread_list_t_ _list_;
}

class _pthread_rwlock_arch_t_ extends ffi.Struct {
  @ffi.Uint32()
  external int _readers_;

  @ffi.Uint32()
  external int _writers_;

  @ffi.Uint32()
  external int _wrphase_futex_;

  @ffi.Uint32()
  external int _writers_futex_;

  @ffi.Uint32()
  external int _pad3_;

  @ffi.Uint32()
  external int _pad4_;

  @ffi.Int32()
  external int _cur_writer_;

  @ffi.Int32()
  external int _shared_;

  @ffi.Int8()
  external int _rwelision_;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> _pad1_;

  @ffi.Uint64()
  external int _pad2_;

  @ffi.Uint32()
  external int _flags_;
}

class _pthread_cond_s_ extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> _g_refs_;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> _g_size_;

  @ffi.Uint32()
  external int _g1_orig_size_;

  @ffi.Uint32()
  external int _wrefs_;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> _g_signals_;
}

class _once_flag_ extends ffi.Struct {
  @ffi.Int32()
  external int _data_;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> _x_;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> _old_x_;

  @ffi.Uint16()
  external int _c_;

  @ffi.Uint16()
  external int _init_;

  @ffi.Uint64()
  external int _a_;
}

class _locale_data_ extends ffi.Opaque {}

class _locale_struct_ extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<_locale_data_>> _locales_;

  external ffi.Pointer<ffi.Uint16> _ctype_b_;

  external ffi.Pointer<ffi.Int32> _ctype_tolower_;

  external ffi.Pointer<ffi.Int32> _ctype_toupper_;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Int8>> _names_;
}

class flock extends ffi.Struct {
  @ffi.Int16()
  external int l_type;

  @ffi.Int16()
  external int l_whence;

  @ffi.Int64()
  external int l_start;

  @ffi.Int64()
  external int l_len;

  @ffi.Int32()
  external int l_pid;
}

class stat extends ffi.Struct {
  @ffi.Uint64()
  external int st_dev;

  @ffi.Uint64()
  external int st_ino;

  @ffi.Uint64()
  external int st_nlink;

  @ffi.Uint32()
  external int st_mode;

  @ffi.Uint32()
  external int st_uid;

  @ffi.Uint32()
  external int st_gid;

  @ffi.Int32()
  external int _pad0_;

  @ffi.Uint64()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @ffi.Int64()
  external int st_blksize;

  @ffi.Int64()
  external int st_blocks;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int64> _glibc_reserved_;
}

class pollfd extends ffi.Struct {
  @ffi.Int32()
  external int fd;

  @ffi.Int16()
  external int events;

  @ffi.Int16()
  external int revents;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;

  @ffi.Int64()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Int8> tm_zone;
}

class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

class sigevent extends ffi.Opaque {}

class snd_dlsym_link extends ffi.Struct {
  external ffi.Pointer<snd_dlsym_link> next;

  external ffi.Pointer<ffi.Int8> dlsym_name;

  external ffi.Pointer<ffi.Void> dlsym_ptr;
}

class snd_async_handler_ extends ffi.Opaque {}

class snd_shm_area extends ffi.Opaque {}

class snd_input_ extends ffi.Opaque {}

abstract class snd_input_type_t {
  static const int SND_INPUT_STDIO = 0;
  static const int SND_INPUT_BUFFER = 1;
}

class snd_output_ extends ffi.Opaque {}

abstract class snd_output_type_t {
  static const int SND_OUTPUT_STDIO = 0;
  static const int SND_OUTPUT_BUFFER = 1;
}

abstract class snd_config_type_t {
  static const int SND_CONFIG_TYPE_INTEGER = 0;
  static const int SND_CONFIG_TYPE_INTEGER64 = 1;
  static const int SND_CONFIG_TYPE_REAL = 2;
  static const int SND_CONFIG_TYPE_STRING = 3;
  static const int SND_CONFIG_TYPE_POINTER = 4;
  static const int SND_CONFIG_TYPE_COMPOUND = 1024;
}

class snd_config_ extends ffi.Opaque {}

class snd_config_iterator_ extends ffi.Opaque {}

class snd_config_update_ extends ffi.Opaque {}

class snd_devname extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> comment;

  external ffi.Pointer<snd_devname> next;
}

class snd_pcm_info_ extends ffi.Opaque {}

class snd_pcm_hw_params_ extends ffi.Opaque {}

class snd_pcm_sw_params_ extends ffi.Opaque {}

class snd_pcm_status_ extends ffi.Opaque {}

class snd_pcm_access_mask_ extends ffi.Opaque {}

class snd_pcm_format_mask_ extends ffi.Opaque {}

class snd_pcm_subformat_mask_ extends ffi.Opaque {}

abstract class snd_pcm_class_t {
  static const int SND_PCM_CLASS_GENERIC = 0;
  static const int SND_PCM_CLASS_MULTI = 1;
  static const int SND_PCM_CLASS_MODEM = 2;
  static const int SND_PCM_CLASS_DIGITIZER = 3;
  static const int SND_PCM_CLASS_LAST = 3;
}

abstract class snd_pcm_subclass_t {
  static const int SND_PCM_SUBCLASS_GENERIC_MIX = 0;
  static const int SND_PCM_SUBCLASS_MULTI_MIX = 1;
  static const int SND_PCM_SUBCLASS_LAST = 1;
}

abstract class snd_pcm_stream_t {
  static const int SND_PCM_STREAM_PLAYBACK = 0;
  static const int SND_PCM_STREAM_CAPTURE = 1;
  static const int SND_PCM_STREAM_LAST = 1;
}

abstract class snd_pcm_access_t {
  static const int SND_PCM_ACCESS_MMAP_INTERLEAVED = 0;
  static const int SND_PCM_ACCESS_MMAP_NONINTERLEAVED = 1;
  static const int SND_PCM_ACCESS_MMAP_COMPLEX = 2;
  static const int SND_PCM_ACCESS_RW_INTERLEAVED = 3;
  static const int SND_PCM_ACCESS_RW_NONINTERLEAVED = 4;
  static const int SND_PCM_ACCESS_LAST = 4;
}

abstract class snd_pcm_format_t {
  static const int SND_PCM_FORMAT_UNKNOWN = -1;
  static const int SND_PCM_FORMAT_S8 = 0;
  static const int SND_PCM_FORMAT_U8 = 1;
  static const int SND_PCM_FORMAT_S16_LE = 2;
  static const int SND_PCM_FORMAT_S16_BE = 3;
  static const int SND_PCM_FORMAT_U16_LE = 4;
  static const int SND_PCM_FORMAT_U16_BE = 5;
  static const int SND_PCM_FORMAT_S24_LE = 6;
  static const int SND_PCM_FORMAT_S24_BE = 7;
  static const int SND_PCM_FORMAT_U24_LE = 8;
  static const int SND_PCM_FORMAT_U24_BE = 9;
  static const int SND_PCM_FORMAT_S32_LE = 10;
  static const int SND_PCM_FORMAT_S32_BE = 11;
  static const int SND_PCM_FORMAT_U32_LE = 12;
  static const int SND_PCM_FORMAT_U32_BE = 13;
  static const int SND_PCM_FORMAT_FLOAT_LE = 14;
  static const int SND_PCM_FORMAT_FLOAT_BE = 15;
  static const int SND_PCM_FORMAT_FLOAT64_LE = 16;
  static const int SND_PCM_FORMAT_FLOAT64_BE = 17;
  static const int SND_PCM_FORMAT_IEC958_SUBFRAME_LE = 18;
  static const int SND_PCM_FORMAT_IEC958_SUBFRAME_BE = 19;
  static const int SND_PCM_FORMAT_MU_LAW = 20;
  static const int SND_PCM_FORMAT_A_LAW = 21;
  static const int SND_PCM_FORMAT_IMA_ADPCM = 22;
  static const int SND_PCM_FORMAT_MPEG = 23;
  static const int SND_PCM_FORMAT_GSM = 24;
  static const int SND_PCM_FORMAT_S20_LE = 25;
  static const int SND_PCM_FORMAT_S20_BE = 26;
  static const int SND_PCM_FORMAT_U20_LE = 27;
  static const int SND_PCM_FORMAT_U20_BE = 28;
  static const int SND_PCM_FORMAT_SPECIAL = 31;
  static const int SND_PCM_FORMAT_S24_3LE = 32;
  static const int SND_PCM_FORMAT_S24_3BE = 33;
  static const int SND_PCM_FORMAT_U24_3LE = 34;
  static const int SND_PCM_FORMAT_U24_3BE = 35;
  static const int SND_PCM_FORMAT_S20_3LE = 36;
  static const int SND_PCM_FORMAT_S20_3BE = 37;
  static const int SND_PCM_FORMAT_U20_3LE = 38;
  static const int SND_PCM_FORMAT_U20_3BE = 39;
  static const int SND_PCM_FORMAT_S18_3LE = 40;
  static const int SND_PCM_FORMAT_S18_3BE = 41;
  static const int SND_PCM_FORMAT_U18_3LE = 42;
  static const int SND_PCM_FORMAT_U18_3BE = 43;
  static const int SND_PCM_FORMAT_G723_24 = 44;
  static const int SND_PCM_FORMAT_G723_24_1B = 45;
  static const int SND_PCM_FORMAT_G723_40 = 46;
  static const int SND_PCM_FORMAT_G723_40_1B = 47;
  static const int SND_PCM_FORMAT_DSD_U8 = 48;
  static const int SND_PCM_FORMAT_DSD_U16_LE = 49;
  static const int SND_PCM_FORMAT_DSD_U32_LE = 50;
  static const int SND_PCM_FORMAT_DSD_U16_BE = 51;
  static const int SND_PCM_FORMAT_DSD_U32_BE = 52;
  static const int SND_PCM_FORMAT_LAST = 52;
  static const int SND_PCM_FORMAT_S16 = 2;
  static const int SND_PCM_FORMAT_U16 = 4;
  static const int SND_PCM_FORMAT_S24 = 6;
  static const int SND_PCM_FORMAT_U24 = 8;
  static const int SND_PCM_FORMAT_S32 = 10;
  static const int SND_PCM_FORMAT_U32 = 12;
  static const int SND_PCM_FORMAT_FLOAT = 14;
  static const int SND_PCM_FORMAT_FLOAT64 = 16;
  static const int SND_PCM_FORMAT_IEC958_SUBFRAME = 18;
  static const int SND_PCM_FORMAT_S20 = 25;
  static const int SND_PCM_FORMAT_U20 = 27;
}

abstract class snd_pcm_subformat_t {
  static const int SND_PCM_SUBFORMAT_STD = 0;
  static const int SND_PCM_SUBFORMAT_LAST = 0;
}

abstract class snd_pcm_state_t {
  static const int SND_PCM_STATE_OPEN = 0;
  static const int SND_PCM_STATE_SETUP = 1;
  static const int SND_PCM_STATE_PREPARED = 2;
  static const int SND_PCM_STATE_RUNNING = 3;
  static const int SND_PCM_STATE_XRUN = 4;
  static const int SND_PCM_STATE_DRAINING = 5;
  static const int SND_PCM_STATE_PAUSED = 6;
  static const int SND_PCM_STATE_SUSPENDED = 7;
  static const int SND_PCM_STATE_DISCONNECTED = 8;
  static const int SND_PCM_STATE_LAST = 8;
  static const int SND_PCM_STATE_PRIVATE1 = 1024;
}

abstract class snd_pcm_start_t {
  static const int SND_PCM_START_DATA = 0;
  static const int SND_PCM_START_EXPLICIT = 1;
  static const int SND_PCM_START_LAST = 1;
}

abstract class snd_pcm_xrun_t {
  static const int SND_PCM_XRUN_NONE = 0;
  static const int SND_PCM_XRUN_STOP = 1;
  static const int SND_PCM_XRUN_LAST = 1;
}

abstract class snd_pcm_tstamp_t {
  static const int SND_PCM_TSTAMP_NONE = 0;
  static const int SND_PCM_TSTAMP_ENABLE = 1;
  static const int SND_PCM_TSTAMP_MMAP = 1;
  static const int SND_PCM_TSTAMP_LAST = 1;
}

abstract class snd_pcm_tstamp_type_t {
  static const int SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY = 0;
  static const int SND_PCM_TSTAMP_TYPE_MONOTONIC = 1;
  static const int SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW = 2;
  static const int SND_PCM_TSTAMP_TYPE_LAST = 2;
}

class snd_pcm_audio_tstamp_config_t extends ffi.Opaque {}

class snd_pcm_audio_tstamp_report_t extends ffi.Opaque {}

class snd_pcm_ extends ffi.Opaque {}

abstract class _snd_pcm_type {
  static const int SND_PCM_TYPE_HW = 0;
  static const int SND_PCM_TYPE_HOOKS = 1;
  static const int SND_PCM_TYPE_MULTI = 2;
  static const int SND_PCM_TYPE_FILE = 3;
  static const int SND_PCM_TYPE_NULL = 4;
  static const int SND_PCM_TYPE_SHM = 5;
  static const int SND_PCM_TYPE_INET = 6;
  static const int SND_PCM_TYPE_COPY = 7;
  static const int SND_PCM_TYPE_LINEAR = 8;
  static const int SND_PCM_TYPE_ALAW = 9;
  static const int SND_PCM_TYPE_MULAW = 10;
  static const int SND_PCM_TYPE_ADPCM = 11;
  static const int SND_PCM_TYPE_RATE = 12;
  static const int SND_PCM_TYPE_ROUTE = 13;
  static const int SND_PCM_TYPE_PLUG = 14;
  static const int SND_PCM_TYPE_SHARE = 15;
  static const int SND_PCM_TYPE_METER = 16;
  static const int SND_PCM_TYPE_MIX = 17;
  static const int SND_PCM_TYPE_DROUTE = 18;
  static const int SND_PCM_TYPE_LBSERVER = 19;
  static const int SND_PCM_TYPE_LINEAR_FLOAT = 20;
  static const int SND_PCM_TYPE_LADSPA = 21;
  static const int SND_PCM_TYPE_DMIX = 22;
  static const int SND_PCM_TYPE_JACK = 23;
  static const int SND_PCM_TYPE_DSNOOP = 24;
  static const int SND_PCM_TYPE_DSHARE = 25;
  static const int SND_PCM_TYPE_IEC958 = 26;
  static const int SND_PCM_TYPE_SOFTVOL = 27;
  static const int SND_PCM_TYPE_IOPLUG = 28;
  static const int SND_PCM_TYPE_EXTPLUG = 29;
  static const int SND_PCM_TYPE_MMAP_EMUL = 30;
  static const int SND_PCM_TYPE_LAST = 30;
}

class snd_pcm_channel_area_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> addr;

  @ffi.Uint32()
  external int first;

  @ffi.Uint32()
  external int step;
}

class snd_pcm_scope_ extends ffi.Opaque {}

abstract class snd_pcm_chmap_type {
  static const int SND_CHMAP_TYPE_NONE = 0;
  static const int SND_CHMAP_TYPE_FIXED = 1;
  static const int SND_CHMAP_TYPE_VAR = 2;
  static const int SND_CHMAP_TYPE_PAIRED = 3;
  static const int SND_CHMAP_TYPE_LAST = 3;
}

abstract class snd_pcm_chmap_position {
  static const int SND_CHMAP_UNKNOWN = 0;
  static const int SND_CHMAP_NA = 1;
  static const int SND_CHMAP_MONO = 2;
  static const int SND_CHMAP_FL = 3;
  static const int SND_CHMAP_FR = 4;
  static const int SND_CHMAP_RL = 5;
  static const int SND_CHMAP_RR = 6;
  static const int SND_CHMAP_FC = 7;
  static const int SND_CHMAP_LFE = 8;
  static const int SND_CHMAP_SL = 9;
  static const int SND_CHMAP_SR = 10;
  static const int SND_CHMAP_RC = 11;
  static const int SND_CHMAP_FLC = 12;
  static const int SND_CHMAP_FRC = 13;
  static const int SND_CHMAP_RLC = 14;
  static const int SND_CHMAP_RRC = 15;
  static const int SND_CHMAP_FLW = 16;
  static const int SND_CHMAP_FRW = 17;
  static const int SND_CHMAP_FLH = 18;
  static const int SND_CHMAP_FCH = 19;
  static const int SND_CHMAP_FRH = 20;
  static const int SND_CHMAP_TC = 21;
  static const int SND_CHMAP_TFL = 22;
  static const int SND_CHMAP_TFR = 23;
  static const int SND_CHMAP_TFC = 24;
  static const int SND_CHMAP_TRL = 25;
  static const int SND_CHMAP_TRR = 26;
  static const int SND_CHMAP_TRC = 27;
  static const int SND_CHMAP_TFLC = 28;
  static const int SND_CHMAP_TFRC = 29;
  static const int SND_CHMAP_TSL = 30;
  static const int SND_CHMAP_TSR = 31;
  static const int SND_CHMAP_LLFE = 32;
  static const int SND_CHMAP_RLFE = 33;
  static const int SND_CHMAP_BC = 34;
  static const int SND_CHMAP_BLC = 35;
  static const int SND_CHMAP_BRC = 36;
  static const int SND_CHMAP_LAST = 36;
}

class snd_pcm_chmap_t extends ffi.Struct {
  @ffi.Uint32()
  external int channels;

  @ffi.Array.multi([0])
  external ffi.Array<ffi.Uint32> pos;
}

class snd_pcm_chmap_query_t extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external snd_pcm_chmap_t map;
}

abstract class snd_pcm_hook_type_t {
  static const int SND_PCM_HOOK_TYPE_HW_PARAMS = 0;
  static const int SND_PCM_HOOK_TYPE_HW_FREE = 1;
  static const int SND_PCM_HOOK_TYPE_CLOSE = 2;
  static const int SND_PCM_HOOK_TYPE_LAST = 2;
}

class snd_pcm_hook_ extends ffi.Opaque {}

class snd_pcm_scope_ops_t extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> enable;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> disable;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_6>> start;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_7>> stop;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_8>> update;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_9>> reset;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_10>> close;
}

abstract class snd_spcm_latency_t {
  static const int SND_SPCM_LATENCY_STANDARD = 0;
  static const int SND_SPCM_LATENCY_MEDIUM = 1;
  static const int SND_SPCM_LATENCY_REALTIME = 2;
}

abstract class snd_spcm_xrun_type_t {
  static const int SND_SPCM_XRUN_IGNORE = 0;
  static const int SND_SPCM_XRUN_STOP = 1;
}

abstract class snd_spcm_duplex_type_t {
  static const int SND_SPCM_DUPLEX_LIBERAL = 0;
  static const int SND_SPCM_DUPLEX_PEDANTIC = 1;
}

class snd_rawmidi_info_ extends ffi.Opaque {}

class snd_rawmidi_params_ extends ffi.Opaque {}

class snd_rawmidi_status_ extends ffi.Opaque {}

abstract class snd_rawmidi_stream_t {
  static const int SND_RAWMIDI_STREAM_OUTPUT = 0;
  static const int SND_RAWMIDI_STREAM_INPUT = 1;
  static const int SND_RAWMIDI_STREAM_LAST = 1;
}

class snd_rawmidi_ extends ffi.Opaque {}

abstract class snd_rawmidi_type_t {
  static const int SND_RAWMIDI_TYPE_HW = 0;
  static const int SND_RAWMIDI_TYPE_SHM = 1;
  static const int SND_RAWMIDI_TYPE_INET = 2;
  static const int SND_RAWMIDI_TYPE_VIRTUAL = 3;
}

class snd_timer_id_ extends ffi.Opaque {}

class snd_timer_ginfo_ extends ffi.Opaque {}

class snd_timer_gparams_ extends ffi.Opaque {}

class snd_timer_gstatus_ extends ffi.Opaque {}

class snd_timer_info_ extends ffi.Opaque {}

class snd_timer_params_ extends ffi.Opaque {}

class snd_timer_status_ extends ffi.Opaque {}

abstract class snd_timer_class_t {
  static const int SND_TIMER_CLASS_NONE = -1;
  static const int SND_TIMER_CLASS_SLAVE = 0;
  static const int SND_TIMER_CLASS_GLOBAL = 1;
  static const int SND_TIMER_CLASS_CARD = 2;
  static const int SND_TIMER_CLASS_PCM = 3;
  static const int SND_TIMER_CLASS_LAST = 3;
}

abstract class snd_timer_slave_class_t {
  static const int SND_TIMER_SCLASS_NONE = 0;
  static const int SND_TIMER_SCLASS_APPLICATION = 1;
  static const int SND_TIMER_SCLASS_SEQUENCER = 2;
  static const int SND_TIMER_SCLASS_OSS_SEQUENCER = 3;
  static const int SND_TIMER_SCLASS_LAST = 3;
}

abstract class snd_timer_event_t {
  static const int SND_TIMER_EVENT_RESOLUTION = 0;
  static const int SND_TIMER_EVENT_TICK = 1;
  static const int SND_TIMER_EVENT_START = 2;
  static const int SND_TIMER_EVENT_STOP = 3;
  static const int SND_TIMER_EVENT_CONTINUE = 4;
  static const int SND_TIMER_EVENT_PAUSE = 5;
  static const int SND_TIMER_EVENT_EARLY = 6;
  static const int SND_TIMER_EVENT_SUSPEND = 7;
  static const int SND_TIMER_EVENT_RESUME = 8;
  static const int SND_TIMER_EVENT_MSTART = 12;
  static const int SND_TIMER_EVENT_MSTOP = 13;
  static const int SND_TIMER_EVENT_MCONTINUE = 14;
  static const int SND_TIMER_EVENT_MPAUSE = 15;
  static const int SND_TIMER_EVENT_MSUSPEND = 17;
  static const int SND_TIMER_EVENT_MRESUME = 18;
}

class snd_timer_read_t extends ffi.Struct {
  @ffi.Uint32()
  external int resolution;

  @ffi.Uint32()
  external int ticks;
}

class snd_timer_tread_t extends ffi.Struct {
  @ffi.Int32()
  external int event;

  external timespec tstamp;

  @ffi.Uint32()
  external int val;
}

abstract class snd_timer_type_t {
  static const int SND_TIMER_TYPE_HW = 0;
  static const int SND_TIMER_TYPE_SHM = 1;
  static const int SND_TIMER_TYPE_INET = 2;
}

class snd_timer_query_ extends ffi.Opaque {}

class snd_timer_ extends ffi.Opaque {}

class snd_hwdep_info_ extends ffi.Opaque {}

class snd_hwdep_dsp_status_ extends ffi.Opaque {}

class snd_hwdep_dsp_image_ extends ffi.Opaque {}

abstract class snd_hwdep_iface_t {
  static const int SND_HWDEP_IFACE_OPL2 = 0;
  static const int SND_HWDEP_IFACE_OPL3 = 1;
  static const int SND_HWDEP_IFACE_OPL4 = 2;
  static const int SND_HWDEP_IFACE_SB16CSP = 3;
  static const int SND_HWDEP_IFACE_EMU10K1 = 4;
  static const int SND_HWDEP_IFACE_YSS225 = 5;
  static const int SND_HWDEP_IFACE_ICS2115 = 6;
  static const int SND_HWDEP_IFACE_SSCAPE = 7;
  static const int SND_HWDEP_IFACE_VX = 8;
  static const int SND_HWDEP_IFACE_MIXART = 9;
  static const int SND_HWDEP_IFACE_USX2Y = 10;
  static const int SND_HWDEP_IFACE_EMUX_WAVETABLE = 11;
  static const int SND_HWDEP_IFACE_BLUETOOTH = 12;
  static const int SND_HWDEP_IFACE_USX2Y_PCM = 13;
  static const int SND_HWDEP_IFACE_PCXHR = 14;
  static const int SND_HWDEP_IFACE_SB_RC = 15;
  static const int SND_HWDEP_IFACE_HDA = 16;
  static const int SND_HWDEP_IFACE_USB_STREAM = 17;
  static const int SND_HWDEP_IFACE_FW_DICE = 18;
  static const int SND_HWDEP_IFACE_FW_FIREWORKS = 19;
  static const int SND_HWDEP_IFACE_FW_BEBOB = 20;
  static const int SND_HWDEP_IFACE_FW_OXFW = 21;
  static const int SND_HWDEP_IFACE_FW_DIGI00X = 22;
  static const int SND_HWDEP_IFACE_FW_TASCAM = 23;
  static const int SND_HWDEP_IFACE_LINE6 = 24;
  static const int SND_HWDEP_IFACE_FW_MOTU = 25;
  static const int SND_HWDEP_IFACE_FW_FIREFACE = 26;
  static const int SND_HWDEP_IFACE_LAST = 26;
}

abstract class snd_hwdep_type_t {
  static const int SND_HWDEP_TYPE_HW = 0;
  static const int SND_HWDEP_TYPE_SHM = 1;
  static const int SND_HWDEP_TYPE_INET = 2;
}

class snd_hwdep_ extends ffi.Opaque {}

class snd_aes_iec958_t extends ffi.Struct {
  @ffi.Array.multi([24])
  external ffi.Array<ffi.Uint8> status;

  @ffi.Array.multi([147])
  external ffi.Array<ffi.Uint8> subcode;

  @ffi.Uint8()
  external int pad;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> dig_subframe;
}

class snd_ctl_card_info_ extends ffi.Opaque {}

class snd_ctl_elem_id_ extends ffi.Opaque {}

class snd_ctl_elem_list_ extends ffi.Opaque {}

class snd_ctl_elem_info_ extends ffi.Opaque {}

class snd_ctl_elem_value_ extends ffi.Opaque {}

class snd_ctl_event_ extends ffi.Opaque {}

abstract class snd_ctl_elem_type_t {
  static const int SND_CTL_ELEM_TYPE_NONE = 0;
  static const int SND_CTL_ELEM_TYPE_BOOLEAN = 1;
  static const int SND_CTL_ELEM_TYPE_INTEGER = 2;
  static const int SND_CTL_ELEM_TYPE_ENUMERATED = 3;
  static const int SND_CTL_ELEM_TYPE_BYTES = 4;
  static const int SND_CTL_ELEM_TYPE_IEC958 = 5;
  static const int SND_CTL_ELEM_TYPE_INTEGER64 = 6;
  static const int SND_CTL_ELEM_TYPE_LAST = 6;
}

abstract class snd_ctl_elem_iface_t {
  static const int SND_CTL_ELEM_IFACE_CARD = 0;
  static const int SND_CTL_ELEM_IFACE_HWDEP = 1;
  static const int SND_CTL_ELEM_IFACE_MIXER = 2;
  static const int SND_CTL_ELEM_IFACE_PCM = 3;
  static const int SND_CTL_ELEM_IFACE_RAWMIDI = 4;
  static const int SND_CTL_ELEM_IFACE_TIMER = 5;
  static const int SND_CTL_ELEM_IFACE_SEQUENCER = 6;
  static const int SND_CTL_ELEM_IFACE_LAST = 6;
}

abstract class snd_ctl_event_type_t {
  static const int SND_CTL_EVENT_ELEM = 0;
  static const int SND_CTL_EVENT_LAST = 0;
}

abstract class snd_ctl_type_t {
  static const int SND_CTL_TYPE_HW = 0;
  static const int SND_CTL_TYPE_SHM = 1;
  static const int SND_CTL_TYPE_INET = 2;
  static const int SND_CTL_TYPE_EXT = 3;
}

class snd_ctl_ extends ffi.Opaque {}

class snd_sctl_ extends ffi.Opaque {}

class snd_hctl_elem_ extends ffi.Opaque {}

class snd_hctl_ extends ffi.Opaque {}

class snd_mixer_ extends ffi.Opaque {}

class snd_mixer_class_ extends ffi.Opaque {}

class snd_mixer_elem_ extends ffi.Opaque {}

abstract class snd_mixer_elem_type_t {
  static const int SND_MIXER_ELEM_SIMPLE = 0;
  static const int SND_MIXER_ELEM_LAST = 0;
}

abstract class snd_mixer_selem_channel_id_t {
  static const int SND_MIXER_SCHN_UNKNOWN = -1;
  static const int SND_MIXER_SCHN_FRONT_LEFT = 0;
  static const int SND_MIXER_SCHN_FRONT_RIGHT = 1;
  static const int SND_MIXER_SCHN_REAR_LEFT = 2;
  static const int SND_MIXER_SCHN_REAR_RIGHT = 3;
  static const int SND_MIXER_SCHN_FRONT_CENTER = 4;
  static const int SND_MIXER_SCHN_WOOFER = 5;
  static const int SND_MIXER_SCHN_SIDE_LEFT = 6;
  static const int SND_MIXER_SCHN_SIDE_RIGHT = 7;
  static const int SND_MIXER_SCHN_REAR_CENTER = 8;
  static const int SND_MIXER_SCHN_LAST = 31;
  static const int SND_MIXER_SCHN_MONO = 0;
}

abstract class snd_mixer_selem_regopt_abstract {
  static const int SND_MIXER_SABSTRACT_NONE = 0;
  static const int SND_MIXER_SABSTRACT_BASIC = 1;
}

class snd_mixer_selem_regopt extends ffi.Struct {
  @ffi.Int32()
  external int ver;

  @ffi.Int32()
  external int abstract_1;

  external ffi.Pointer<ffi.Int8> device;

  external ffi.Pointer<snd_pcm_> playback_pcm;

  external ffi.Pointer<snd_pcm_> capture_pcm;
}

class snd_mixer_selem_id_ extends ffi.Opaque {}

abstract class snd_seq_event_type {
  static const int SND_SEQ_EVENT_SYSTEM = 0;
  static const int SND_SEQ_EVENT_RESULT = 1;
  static const int SND_SEQ_EVENT_NOTE = 5;
  static const int SND_SEQ_EVENT_NOTEON = 6;
  static const int SND_SEQ_EVENT_NOTEOFF = 7;
  static const int SND_SEQ_EVENT_KEYPRESS = 8;
  static const int SND_SEQ_EVENT_CONTROLLER = 10;
  static const int SND_SEQ_EVENT_PGMCHANGE = 11;
  static const int SND_SEQ_EVENT_CHANPRESS = 12;
  static const int SND_SEQ_EVENT_PITCHBEND = 13;
  static const int SND_SEQ_EVENT_CONTROL14 = 14;
  static const int SND_SEQ_EVENT_NONREGPARAM = 15;
  static const int SND_SEQ_EVENT_REGPARAM = 16;
  static const int SND_SEQ_EVENT_SONGPOS = 20;
  static const int SND_SEQ_EVENT_SONGSEL = 21;
  static const int SND_SEQ_EVENT_QFRAME = 22;
  static const int SND_SEQ_EVENT_TIMESIGN = 23;
  static const int SND_SEQ_EVENT_KEYSIGN = 24;
  static const int SND_SEQ_EVENT_START = 30;
  static const int SND_SEQ_EVENT_CONTINUE = 31;
  static const int SND_SEQ_EVENT_STOP = 32;
  static const int SND_SEQ_EVENT_SETPOS_TICK = 33;
  static const int SND_SEQ_EVENT_SETPOS_TIME = 34;
  static const int SND_SEQ_EVENT_TEMPO = 35;
  static const int SND_SEQ_EVENT_CLOCK = 36;
  static const int SND_SEQ_EVENT_TICK = 37;
  static const int SND_SEQ_EVENT_QUEUE_SKEW = 38;
  static const int SND_SEQ_EVENT_SYNC_POS = 39;
  static const int SND_SEQ_EVENT_TUNE_REQUEST = 40;
  static const int SND_SEQ_EVENT_RESET = 41;
  static const int SND_SEQ_EVENT_SENSING = 42;
  static const int SND_SEQ_EVENT_ECHO = 50;
  static const int SND_SEQ_EVENT_OSS = 51;
  static const int SND_SEQ_EVENT_CLIENT_START = 60;
  static const int SND_SEQ_EVENT_CLIENT_EXIT = 61;
  static const int SND_SEQ_EVENT_CLIENT_CHANGE = 62;
  static const int SND_SEQ_EVENT_PORT_START = 63;
  static const int SND_SEQ_EVENT_PORT_EXIT = 64;
  static const int SND_SEQ_EVENT_PORT_CHANGE = 65;
  static const int SND_SEQ_EVENT_PORT_SUBSCRIBED = 66;
  static const int SND_SEQ_EVENT_PORT_UNSUBSCRIBED = 67;
  static const int SND_SEQ_EVENT_USR0 = 90;
  static const int SND_SEQ_EVENT_USR1 = 91;
  static const int SND_SEQ_EVENT_USR2 = 92;
  static const int SND_SEQ_EVENT_USR3 = 93;
  static const int SND_SEQ_EVENT_USR4 = 94;
  static const int SND_SEQ_EVENT_USR5 = 95;
  static const int SND_SEQ_EVENT_USR6 = 96;
  static const int SND_SEQ_EVENT_USR7 = 97;
  static const int SND_SEQ_EVENT_USR8 = 98;
  static const int SND_SEQ_EVENT_USR9 = 99;
  static const int SND_SEQ_EVENT_SYSEX = 130;
  static const int SND_SEQ_EVENT_BOUNCE = 131;
  static const int SND_SEQ_EVENT_USR_VAR0 = 135;
  static const int SND_SEQ_EVENT_USR_VAR1 = 136;
  static const int SND_SEQ_EVENT_USR_VAR2 = 137;
  static const int SND_SEQ_EVENT_USR_VAR3 = 138;
  static const int SND_SEQ_EVENT_USR_VAR4 = 139;
  static const int SND_SEQ_EVENT_NONE = 255;
}

class snd_seq_addr_t extends ffi.Struct {
  @ffi.Uint8()
  external int client;

  @ffi.Uint8()
  external int port;
}

class snd_seq_connect_t extends ffi.Struct {
  external snd_seq_addr_t sender;

  external snd_seq_addr_t dest;
}

class snd_seq_real_time_t extends ffi.Struct {
  @ffi.Uint32()
  external int tv_sec;

  @ffi.Uint32()
  external int tv_nsec;
}

class snd_seq_ev_note_t extends ffi.Struct {
  @ffi.Uint8()
  external int channel;

  @ffi.Uint8()
  external int note;

  @ffi.Uint8()
  external int velocity;

  @ffi.Uint8()
  external int off_velocity;

  @ffi.Uint32()
  external int duration;
}

class snd_seq_ev_ctrl_t extends ffi.Struct {
  @ffi.Uint8()
  external int channel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> unused;

  @ffi.Uint32()
  external int param;

  @ffi.Int32()
  external int value;
}

class snd_seq_ev_raw8_t extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Uint8> d;
}

class snd_seq_ev_raw32_t extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> d;
}

@ffi.Packed(1)
class snd_seq_ev_ext extends ffi.Struct {
  @ffi.Uint32()
  external int len;

  external ffi.Pointer<ffi.Void> ptr;
}

class snd_seq_result_t extends ffi.Struct {
  @ffi.Int32()
  external int event;

  @ffi.Int32()
  external int result;
}

class snd_seq_queue_skew_t extends ffi.Struct {
  @ffi.Uint32()
  external int value;

  @ffi.Uint32()
  external int base;
}

class snd_seq_ev_queue_control_t extends ffi.Opaque {}

class snd_seq_event_t extends ffi.Opaque {}

class snd_seq_ extends ffi.Opaque {}

abstract class snd_seq_type_t {
  static const int SND_SEQ_TYPE_HW = 0;
  static const int SND_SEQ_TYPE_SHM = 1;
  static const int SND_SEQ_TYPE_INET = 2;
}

class snd_seq_system_info_ extends ffi.Opaque {}

class snd_seq_client_info_ extends ffi.Opaque {}

abstract class snd_seq_client_type_t {
  static const int SND_SEQ_USER_CLIENT = 1;
  static const int SND_SEQ_KERNEL_CLIENT = 2;
}

class snd_seq_client_pool_ extends ffi.Opaque {}

class snd_seq_port_info_ extends ffi.Opaque {}

class snd_seq_port_subscribe_ extends ffi.Opaque {}

class snd_seq_query_subscribe_ extends ffi.Opaque {}

abstract class snd_seq_query_subs_type_t {
  static const int SND_SEQ_QUERY_SUBS_READ = 0;
  static const int SND_SEQ_QUERY_SUBS_WRITE = 1;
}

class snd_seq_queue_info_ extends ffi.Opaque {}

class snd_seq_queue_status_ extends ffi.Opaque {}

class snd_seq_queue_tempo_ extends ffi.Opaque {}

class snd_seq_queue_timer_ extends ffi.Opaque {}

abstract class snd_seq_queue_timer_type_t {
  static const int SND_SEQ_TIMER_ALSA = 0;
  static const int SND_SEQ_TIMER_MIDI_CLOCK = 1;
  static const int SND_SEQ_TIMER_MIDI_TICK = 2;
}

class snd_seq_remove_events_ extends ffi.Opaque {}

class snd_midi_event extends ffi.Opaque {}

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int SND_SEQ_EVFLG_RESULT = 0;

const int SND_SEQ_EVFLG_NOTE = 1;

const int SND_SEQ_EVFLG_CONTROL = 2;

const int SND_SEQ_EVFLG_QUEUE = 3;

const int SND_SEQ_EVFLG_SYSTEM = 4;

const int SND_SEQ_EVFLG_MESSAGE = 5;

const int SND_SEQ_EVFLG_CONNECTION = 6;

const int SND_SEQ_EVFLG_SAMPLE = 7;

const int SND_SEQ_EVFLG_USERS = 8;

const int SND_SEQ_EVFLG_INSTR = 9;

const int SND_SEQ_EVFLG_QUOTE = 10;

const int SND_SEQ_EVFLG_NONE = 11;

const int SND_SEQ_EVFLG_RAW = 12;

const int SND_SEQ_EVFLG_FIXED = 13;

const int SND_SEQ_EVFLG_VARIABLE = 14;

const int SND_SEQ_EVFLG_VARUSR = 15;

const int SND_SEQ_EVFLG_NOTE_ONEARG = 0;

const int SND_SEQ_EVFLG_NOTE_TWOARG = 1;

const int SND_SEQ_EVFLG_QUEUE_NOARG = 0;

const int SND_SEQ_EVFLG_QUEUE_TICK = 1;

const int SND_SEQ_EVFLG_QUEUE_TIME = 2;

const int SND_SEQ_EVFLG_QUEUE_VALUE = 3;

const int _UNISTD_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 33;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _POSIX_VERSION = 200809;

const int __POSIX2_THIS_VERSION = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_LOCALEDEF = 200809;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_FSYNC = 200809;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_VDISABLE = 0;

const int _POSIX_NO_TRUNC = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _POSIX_THREADS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_REGEXP = 1;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPAWN = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_IPV6 = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _XBS5_LP64_OFF64 = 1;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS =
    '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int _PC_LINK_MAX_1 = 0;

const int _PC_MAX_CANON_1 = 1;

const int _PC_MAX_INPUT_1 = 2;

const int _PC_NAME_MAX_1 = 3;

const int _PC_PATH_MAX_1 = 4;

const int _PC_PIPE_BUF_1 = 5;

const int _PC_CHOWN_RESTRICTED_1 = 6;

const int _PC_NO_TRUNC_1 = 7;

const int _PC_VDISABLE_1 = 8;

const int _PC_SYNC_IO_1 = 9;

const int _PC_ASYNC_IO_1 = 10;

const int _PC_PRIO_IO_1 = 11;

const int _PC_SOCK_MAXBUF_1 = 12;

const int _PC_FILESIZEBITS_1 = 13;

const int _PC_REC_INCR_XFER_SIZE_1 = 14;

const int _PC_REC_MAX_XFER_SIZE_1 = 15;

const int _PC_REC_MIN_XFER_SIZE_1 = 16;

const int _PC_REC_XFER_ALIGN_1 = 17;

const int _PC_ALLOC_SIZE_MIN_1 = 18;

const int _PC_SYMLINK_MAX_1 = 19;

const int _PC_2_SYMLINKS_1 = 20;

const int _SC_ARG_MAX_1 = 0;

const int _SC_CHILD_MAX_1 = 1;

const int _SC_CLK_TCK_1 = 2;

const int _SC_NGROUPS_MAX_1 = 3;

const int _SC_OPEN_MAX_1 = 4;

const int _SC_STREAM_MAX_1 = 5;

const int _SC_TZNAME_MAX_1 = 6;

const int _SC_JOB_CONTROL_1 = 7;

const int _SC_SAVED_IDS_1 = 8;

const int _SC_REALTIME_SIGNALS_1 = 9;

const int _SC_PRIORITY_SCHEDULING_1 = 10;

const int _SC_TIMERS_1 = 11;

const int _SC_ASYNCHRONOUS_IO_1 = 12;

const int _SC_PRIORITIZED_IO_1 = 13;

const int _SC_SYNCHRONIZED_IO_1 = 14;

const int _SC_FSYNC_1 = 15;

const int _SC_MAPPED_FILES_1 = 16;

const int _SC_MEMLOCK_1 = 17;

const int _SC_MEMLOCK_RANGE_1 = 18;

const int _SC_MEMORY_PROTECTION_1 = 19;

const int _SC_MESSAGE_PASSING_1 = 20;

const int _SC_SEMAPHORES_1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_1 = 22;

const int _SC_AIO_LISTIO_MAX_1 = 23;

const int _SC_AIO_MAX_1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_1 = 25;

const int _SC_DELAYTIMER_MAX_1 = 26;

const int _SC_MQ_OPEN_MAX_1 = 27;

const int _SC_MQ_PRIO_MAX_1 = 28;

const int _SC_VERSION_1 = 29;

const int _SC_PAGESIZE_1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_RTSIG_MAX_1 = 31;

const int _SC_SEM_NSEMS_MAX_1 = 32;

const int _SC_SEM_VALUE_MAX_1 = 33;

const int _SC_SIGQUEUE_MAX_1 = 34;

const int _SC_TIMER_MAX_1 = 35;

const int _SC_BC_BASE_MAX_1 = 36;

const int _SC_BC_DIM_MAX_1 = 37;

const int _SC_BC_SCALE_MAX_1 = 38;

const int _SC_BC_STRING_MAX_1 = 39;

const int _SC_COLL_WEIGHTS_MAX_1 = 40;

const int _SC_EQUIV_CLASS_MAX_1 = 41;

const int _SC_EXPR_NEST_MAX_1 = 42;

const int _SC_LINE_MAX_1 = 43;

const int _SC_RE_DUP_MAX_1 = 44;

const int _SC_CHARCLASS_NAME_MAX_1 = 45;

const int _SC_2_VERSION_1 = 46;

const int _SC_2_C_BIND_1 = 47;

const int _SC_2_C_DEV_1 = 48;

const int _SC_2_FORT_DEV_1 = 49;

const int _SC_2_FORT_RUN_1 = 50;

const int _SC_2_SW_DEV_1 = 51;

const int _SC_2_LOCALEDEF_1 = 52;

const int _SC_PII_1 = 53;

const int _SC_PII_XTI_1 = 54;

const int _SC_PII_SOCKET_1 = 55;

const int _SC_PII_INTERNET_1 = 56;

const int _SC_PII_OSI_1 = 57;

const int _SC_POLL_1 = 58;

const int _SC_SELECT_1 = 59;

const int _SC_UIO_MAXIOV_1 = 60;

const int _SC_IOV_MAX_1 = 60;

const int _SC_PII_INTERNET_STREAM_1 = 61;

const int _SC_PII_INTERNET_DGRAM_1 = 62;

const int _SC_PII_OSI_COTS_1 = 63;

const int _SC_PII_OSI_CLTS_1 = 64;

const int _SC_PII_OSI_M_1 = 65;

const int _SC_T_IOV_MAX_1 = 66;

const int _SC_THREADS_1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_1 = 68;

const int _SC_GETGR_R_SIZE_MAX_1 = 69;

const int _SC_GETPW_R_SIZE_MAX_1 = 70;

const int _SC_LOGIN_NAME_MAX_1 = 71;

const int _SC_TTY_NAME_MAX_1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_1 = 73;

const int _SC_THREAD_KEYS_MAX_1 = 74;

const int _SC_THREAD_STACK_MIN_1 = 75;

const int _SC_THREAD_THREADS_MAX_1 = 76;

const int _SC_THREAD_ATTR_STACKADDR_1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_1 = 79;

const int _SC_THREAD_PRIO_INHERIT_1 = 80;

const int _SC_THREAD_PRIO_PROTECT_1 = 81;

const int _SC_THREAD_PROCESS_SHARED_1 = 82;

const int _SC_NPROCESSORS_CONF_1 = 83;

const int _SC_NPROCESSORS_ONLN_1 = 84;

const int _SC_PHYS_PAGES_1 = 85;

const int _SC_AVPHYS_PAGES_1 = 86;

const int _SC_ATEXIT_MAX_1 = 87;

const int _SC_PASS_MAX_1 = 88;

const int _SC_XOPEN_VERSION_1 = 89;

const int _SC_XOPEN_XCU_VERSION_1 = 90;

const int _SC_XOPEN_UNIX_1 = 91;

const int _SC_XOPEN_CRYPT_1 = 92;

const int _SC_XOPEN_ENH_I18N_1 = 93;

const int _SC_XOPEN_SHM_1 = 94;

const int _SC_2_CHAR_TERM_1 = 95;

const int _SC_2_C_VERSION_1 = 96;

const int _SC_2_UPE_1 = 97;

const int _SC_XOPEN_XPG2_1 = 98;

const int _SC_XOPEN_XPG3_1 = 99;

const int _SC_XOPEN_XPG4_1 = 100;

const int _SC_CHAR_BIT_1 = 101;

const int _SC_CHAR_MAX_1 = 102;

const int _SC_CHAR_MIN_1 = 103;

const int _SC_INT_MAX_1 = 104;

const int _SC_INT_MIN_1 = 105;

const int _SC_LONG_BIT_1 = 106;

const int _SC_WORD_BIT_1 = 107;

const int _SC_MB_LEN_MAX_1 = 108;

const int _SC_NZERO_1 = 109;

const int _SC_SSIZE_MAX_1 = 110;

const int _SC_SCHAR_MAX_1 = 111;

const int _SC_SCHAR_MIN_1 = 112;

const int _SC_SHRT_MAX_1 = 113;

const int _SC_SHRT_MIN_1 = 114;

const int _SC_UCHAR_MAX_1 = 115;

const int _SC_UINT_MAX_1 = 116;

const int _SC_ULONG_MAX_1 = 117;

const int _SC_USHRT_MAX_1 = 118;

const int _SC_NL_ARGMAX_1 = 119;

const int _SC_NL_LANGMAX_1 = 120;

const int _SC_NL_MSGMAX_1 = 121;

const int _SC_NL_NMAX_1 = 122;

const int _SC_NL_SETMAX_1 = 123;

const int _SC_NL_TEXTMAX_1 = 124;

const int _SC_XBS5_ILP32_OFF32_1 = 125;

const int _SC_XBS5_ILP32_OFFBIG_1 = 126;

const int _SC_XBS5_LP64_OFF64_1 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_1 = 128;

const int _SC_XOPEN_LEGACY_1 = 129;

const int _SC_XOPEN_REALTIME_1 = 130;

const int _SC_XOPEN_REALTIME_THREADS_1 = 131;

const int _SC_ADVISORY_INFO_1 = 132;

const int _SC_BARRIERS_1 = 133;

const int _SC_BASE_1 = 134;

const int _SC_C_LANG_SUPPORT_1 = 135;

const int _SC_C_LANG_SUPPORT_R_1 = 136;

const int _SC_CLOCK_SELECTION_1 = 137;

const int _SC_CPUTIME_1 = 138;

const int _SC_THREAD_CPUTIME_1 = 139;

const int _SC_DEVICE_IO_1 = 140;

const int _SC_DEVICE_SPECIFIC_1 = 141;

const int _SC_DEVICE_SPECIFIC_R_1 = 142;

const int _SC_FD_MGMT_1 = 143;

const int _SC_FIFO_1 = 144;

const int _SC_PIPE_1 = 145;

const int _SC_FILE_ATTRIBUTES_1 = 146;

const int _SC_FILE_LOCKING_1 = 147;

const int _SC_FILE_SYSTEM_1 = 148;

const int _SC_MONOTONIC_CLOCK_1 = 149;

const int _SC_MULTI_PROCESS_1 = 150;

const int _SC_SINGLE_PROCESS_1 = 151;

const int _SC_NETWORKING_1 = 152;

const int _SC_READER_WRITER_LOCKS_1 = 153;

const int _SC_SPIN_LOCKS_1 = 154;

const int _SC_REGEXP_1 = 155;

const int _SC_REGEX_VERSION_1 = 156;

const int _SC_SHELL_1 = 157;

const int _SC_SIGNALS_1 = 158;

const int _SC_SPAWN_1 = 159;

const int _SC_SPORADIC_SERVER_1 = 160;

const int _SC_THREAD_SPORADIC_SERVER_1 = 161;

const int _SC_SYSTEM_DATABASE_1 = 162;

const int _SC_SYSTEM_DATABASE_R_1 = 163;

const int _SC_TIMEOUTS_1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_1 = 165;

const int _SC_USER_GROUPS_1 = 166;

const int _SC_USER_GROUPS_R_1 = 167;

const int _SC_2_PBS_1 = 168;

const int _SC_2_PBS_ACCOUNTING_1 = 169;

const int _SC_2_PBS_LOCATE_1 = 170;

const int _SC_2_PBS_MESSAGE_1 = 171;

const int _SC_2_PBS_TRACK_1 = 172;

const int _SC_SYMLOOP_MAX_1 = 173;

const int _SC_STREAMS_1 = 174;

const int _SC_2_PBS_CHECKPOINT_1 = 175;

const int _SC_V6_ILP32_OFF32_1 = 176;

const int _SC_V6_ILP32_OFFBIG_1 = 177;

const int _SC_V6_LP64_OFF64_1 = 178;

const int _SC_V6_LPBIG_OFFBIG_1 = 179;

const int _SC_HOST_NAME_MAX_1 = 180;

const int _SC_TRACE_1 = 181;

const int _SC_TRACE_EVENT_FILTER_1 = 182;

const int _SC_TRACE_INHERIT_1 = 183;

const int _SC_TRACE_LOG_1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_1 = 190;

const int _SC_LEVEL2_CACHE_SIZE_1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_1 = 193;

const int _SC_LEVEL3_CACHE_SIZE_1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_1 = 196;

const int _SC_LEVEL4_CACHE_SIZE_1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_1 = 199;

const int _SC_IPV6_1 = 235;

const int _SC_RAW_SOCKETS_1 = 236;

const int _SC_V7_ILP32_OFF32_1 = 237;

const int _SC_V7_ILP32_OFFBIG_1 = 238;

const int _SC_V7_LP64_OFF64_1 = 239;

const int _SC_V7_LPBIG_OFFBIG_1 = 240;

const int _SC_SS_REPL_MAX_1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_1 = 242;

const int _SC_TRACE_NAME_MAX_1 = 243;

const int _SC_TRACE_SYS_MAX_1 = 244;

const int _SC_TRACE_USER_EVENT_MAX_1 = 245;

const int _SC_XOPEN_STREAMS_1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_1 = 248;

const int _CS_PATH_1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_1 = 1;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION_1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_1 = 4;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_1 = 5;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS_1 = 1000;

const int _CS_LFS_LDFLAGS_1 = 1001;

const int _CS_LFS_LIBS_1 = 1002;

const int _CS_LFS_LINTFLAGS_1 = 1003;

const int _CS_LFS64_CFLAGS_1 = 1004;

const int _CS_LFS64_LDFLAGS_1 = 1005;

const int _CS_LFS64_LIBS_1 = 1006;

const int _CS_LFS64_LINTFLAGS_1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_1 = 1147;

const int _CS_V6_ENV_1 = 1148;

const int _CS_V7_ENV_1 = 1149;

const int _GETOPT_POSIX_H = 1;

const int _GETOPT_CORE_H = 1;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int _STDIO_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int _BITS_STDINT_INTN_H = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _STRING_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int _FCNTL_H = 1;

const int __O_LARGEFILE = 0;

const int F_GETLK64 = 5;

const int F_SETLK64 = 6;

const int F_SETLKW64 = 7;

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_CREAT = 64;

const int O_EXCL = 128;

const int O_NOCTTY = 256;

const int O_TRUNC = 512;

const int O_APPEND = 1024;

const int O_NONBLOCK = 2048;

const int O_NDELAY = 2048;

const int O_SYNC = 1052672;

const int O_FSYNC = 1052672;

const int O_ASYNC = 8192;

const int __O_DIRECTORY = 65536;

const int __O_NOFOLLOW = 131072;

const int __O_CLOEXEC = 524288;

const int __O_DIRECT = 16384;

const int __O_NOATIME = 262144;

const int __O_PATH = 2097152;

const int __O_DSYNC = 4096;

const int __O_TMPFILE = 4259840;

const int F_GETLK = 5;

const int F_SETLK = 6;

const int F_SETLKW = 7;

const int O_DIRECTORY = 65536;

const int O_NOFOLLOW = 131072;

const int O_CLOEXEC = 524288;

const int O_DSYNC = 4096;

const int O_RSYNC = 1052672;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int __F_SETOWN = 8;

const int __F_GETOWN = 9;

const int F_SETOWN = 8;

const int F_GETOWN = 9;

const int __F_SETSIG = 10;

const int __F_GETSIG = 11;

const int __F_SETOWN_EX = 15;

const int __F_GETOWN_EX = 16;

const int F_DUPFD_CLOEXEC = 1030;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 0;

const int F_WRLCK = 1;

const int F_UNLCK = 2;

const int F_EXLCK = 4;

const int F_SHLCK = 8;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int FAPPEND = 1024;

const int FFSYNC = 1052672;

const int FASYNC = 8192;

const int FNONBLOCK = 2048;

const int FNDELAY = 2048;

const int __POSIX_FADV_DONTNEED = 4;

const int __POSIX_FADV_NOREUSE = 5;

const int POSIX_FADV_NORMAL = 0;

const int POSIX_FADV_RANDOM = 1;

const int POSIX_FADV_SEQUENTIAL = 2;

const int POSIX_FADV_WILLNEED = 3;

const int POSIX_FADV_DONTNEED = 4;

const int POSIX_FADV_NOREUSE = 5;

const int _BITS_STAT_H = 1;

const int _BITS_STRUCT_STAT_H = 1;

const int __S_IFMT = 61440;

const int __S_IFDIR = 16384;

const int __S_IFCHR = 8192;

const int __S_IFBLK = 24576;

const int __S_IFREG = 32768;

const int __S_IFIFO = 4096;

const int __S_IFLNK = 40960;

const int __S_IFSOCK = 49152;

const int __S_ISUID = 2048;

const int __S_ISGID = 1024;

const int __S_ISVTX = 512;

const int __S_IREAD = 256;

const int __S_IWRITE = 128;

const int __S_IEXEC = 64;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXU = 448;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXG = 56;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_IRWXO = 7;

const int AT_FDCWD = -100;

const int AT_SYMLINK_NOFOLLOW = 256;

const int AT_REMOVEDIR = 512;

const int AT_SYMLINK_FOLLOW = 1024;

const int AT_EACCESS = 512;

const int _ASSERT_H = 1;

const int _SYS_POLL_H = 1;

const int POLLIN = 1;

const int POLLPRI = 2;

const int POLLOUT = 4;

const int POLLRDNORM = 64;

const int POLLRDBAND = 128;

const int POLLWRNORM = 256;

const int POLLWRBAND = 512;

const int POLLERR = 8;

const int POLLHUP = 16;

const int POLLNVAL = 32;

const int _ERRNO_H = 1;

const int _BITS_ERRNO_H = 1;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int IEC958_AES0_PROFESSIONAL = 1;

const int IEC958_AES0_NONAUDIO = 2;

const int IEC958_AES0_PRO_EMPHASIS = 28;

const int IEC958_AES0_PRO_EMPHASIS_NOTID = 0;

const int IEC958_AES0_PRO_EMPHASIS_NONE = 4;

const int IEC958_AES0_PRO_EMPHASIS_5015 = 12;

const int IEC958_AES0_PRO_EMPHASIS_CCITT = 28;

const int IEC958_AES0_PRO_FREQ_UNLOCKED = 32;

const int IEC958_AES0_PRO_FS = 192;

const int IEC958_AES0_PRO_FS_NOTID = 0;

const int IEC958_AES0_PRO_FS_44100 = 64;

const int IEC958_AES0_PRO_FS_48000 = 128;

const int IEC958_AES0_PRO_FS_32000 = 192;

const int IEC958_AES0_CON_NOT_COPYRIGHT = 4;

const int IEC958_AES0_CON_EMPHASIS = 56;

const int IEC958_AES0_CON_EMPHASIS_NONE = 0;

const int IEC958_AES0_CON_EMPHASIS_5015 = 8;

const int IEC958_AES0_CON_MODE = 192;

const int IEC958_AES1_PRO_MODE = 15;

const int IEC958_AES1_PRO_MODE_NOTID = 0;

const int IEC958_AES1_PRO_MODE_STEREOPHONIC = 2;

const int IEC958_AES1_PRO_MODE_SINGLE = 4;

const int IEC958_AES1_PRO_MODE_TWO = 8;

const int IEC958_AES1_PRO_MODE_PRIMARY = 12;

const int IEC958_AES1_PRO_MODE_BYTE3 = 15;

const int IEC958_AES1_PRO_USERBITS = 240;

const int IEC958_AES1_PRO_USERBITS_NOTID = 0;

const int IEC958_AES1_PRO_USERBITS_192 = 128;

const int IEC958_AES1_PRO_USERBITS_UDEF = 192;

const int IEC958_AES1_CON_CATEGORY = 127;

const int IEC958_AES1_CON_GENERAL = 0;

const int IEC958_AES1_CON_LASEROPT_MASK = 7;

const int IEC958_AES1_CON_LASEROPT_ID = 1;

const int IEC958_AES1_CON_IEC908_CD = 1;

const int IEC958_AES1_CON_NON_IEC908_CD = 9;

const int IEC958_AES1_CON_MINI_DISC = 73;

const int IEC958_AES1_CON_DVD = 25;

const int IEC958_AES1_CON_LASTEROPT_OTHER = 121;

const int IEC958_AES1_CON_DIGDIGCONV_MASK = 7;

const int IEC958_AES1_CON_DIGDIGCONV_ID = 2;

const int IEC958_AES1_CON_PCM_CODER = 2;

const int IEC958_AES1_CON_MIXER = 18;

const int IEC958_AES1_CON_RATE_CONVERTER = 26;

const int IEC958_AES1_CON_SAMPLER = 34;

const int IEC958_AES1_CON_DSP = 42;

const int IEC958_AES1_CON_DIGDIGCONV_OTHER = 122;

const int IEC958_AES1_CON_MAGNETIC_MASK = 7;

const int IEC958_AES1_CON_MAGNETIC_ID = 3;

const int IEC958_AES1_CON_DAT = 3;

const int IEC958_AES1_CON_VCR = 11;

const int IEC958_AES1_CON_DCC = 67;

const int IEC958_AES1_CON_MAGNETIC_DISC = 27;

const int IEC958_AES1_CON_MAGNETIC_OTHER = 123;

const int IEC958_AES1_CON_BROADCAST1_MASK = 7;

const int IEC958_AES1_CON_BROADCAST1_ID = 4;

const int IEC958_AES1_CON_DAB_JAPAN = 4;

const int IEC958_AES1_CON_DAB_EUROPE = 12;

const int IEC958_AES1_CON_DAB_USA = 100;

const int IEC958_AES1_CON_SOFTWARE = 68;

const int IEC958_AES1_CON_IEC62105 = 36;

const int IEC958_AES1_CON_BROADCAST1_OTHER = 124;

const int IEC958_AES1_CON_BROADCAST2_MASK = 15;

const int IEC958_AES1_CON_BROADCAST2_ID = 14;

const int IEC958_AES1_CON_MUSICAL_MASK = 7;

const int IEC958_AES1_CON_MUSICAL_ID = 5;

const int IEC958_AES1_CON_SYNTHESIZER = 5;

const int IEC958_AES1_CON_MICROPHONE = 13;

const int IEC958_AES1_CON_MUSICAL_OTHER = 125;

const int IEC958_AES1_CON_ADC_MASK = 31;

const int IEC958_AES1_CON_ADC_ID = 6;

const int IEC958_AES1_CON_ADC = 6;

const int IEC958_AES1_CON_ADC_OTHER = 102;

const int IEC958_AES1_CON_ADC_COPYRIGHT_MASK = 31;

const int IEC958_AES1_CON_ADC_COPYRIGHT_ID = 22;

const int IEC958_AES1_CON_ADC_COPYRIGHT = 22;

const int IEC958_AES1_CON_ADC_COPYRIGHT_OTHER = 118;

const int IEC958_AES1_CON_SOLIDMEM_MASK = 15;

const int IEC958_AES1_CON_SOLIDMEM_ID = 8;

const int IEC958_AES1_CON_SOLIDMEM_DIGITAL_RECORDER_PLAYER = 8;

const int IEC958_AES1_CON_SOLIDMEM_OTHER = 120;

const int IEC958_AES1_CON_EXPERIMENTAL = 64;

const int IEC958_AES1_CON_ORIGINAL = 128;

const int IEC958_AES2_PRO_SBITS = 7;

const int IEC958_AES2_PRO_SBITS_20 = 2;

const int IEC958_AES2_PRO_SBITS_24 = 4;

const int IEC958_AES2_PRO_SBITS_UDEF = 6;

const int IEC958_AES2_PRO_WORDLEN = 56;

const int IEC958_AES2_PRO_WORDLEN_NOTID = 0;

const int IEC958_AES2_PRO_WORDLEN_22_18 = 16;

const int IEC958_AES2_PRO_WORDLEN_23_19 = 32;

const int IEC958_AES2_PRO_WORDLEN_24_20 = 40;

const int IEC958_AES2_PRO_WORDLEN_20_16 = 48;

const int IEC958_AES2_CON_SOURCE = 15;

const int IEC958_AES2_CON_SOURCE_UNSPEC = 0;

const int IEC958_AES2_CON_CHANNEL = 240;

const int IEC958_AES2_CON_CHANNEL_UNSPEC = 0;

const int IEC958_AES3_CON_FS = 15;

const int IEC958_AES3_CON_FS_44100 = 0;

const int IEC958_AES3_CON_FS_NOTID = 1;

const int IEC958_AES3_CON_FS_48000 = 2;

const int IEC958_AES3_CON_FS_32000 = 3;

const int IEC958_AES3_CON_FS_22050 = 4;

const int IEC958_AES3_CON_FS_24000 = 6;

const int IEC958_AES3_CON_FS_88200 = 8;

const int IEC958_AES3_CON_FS_768000 = 9;

const int IEC958_AES3_CON_FS_96000 = 10;

const int IEC958_AES3_CON_FS_176400 = 12;

const int IEC958_AES3_CON_FS_192000 = 14;

const int IEC958_AES3_CON_CLOCK = 48;

const int IEC958_AES3_CON_CLOCK_1000PPM = 0;

const int IEC958_AES3_CON_CLOCK_50PPM = 16;

const int IEC958_AES3_CON_CLOCK_VARIABLE = 32;

const int IEC958_AES4_CON_MAX_WORDLEN_24 = 1;

const int IEC958_AES4_CON_WORDLEN = 14;

const int IEC958_AES4_CON_WORDLEN_NOTID = 0;

const int IEC958_AES4_CON_WORDLEN_20_16 = 2;

const int IEC958_AES4_CON_WORDLEN_22_18 = 4;

const int IEC958_AES4_CON_WORDLEN_23_19 = 8;

const int IEC958_AES4_CON_WORDLEN_24_20 = 10;

const int IEC958_AES4_CON_WORDLEN_21_17 = 12;

const int IEC958_AES4_CON_ORIGFS = 240;

const int IEC958_AES4_CON_ORIGFS_NOTID = 0;

const int IEC958_AES4_CON_ORIGFS_192000 = 16;

const int IEC958_AES4_CON_ORIGFS_12000 = 32;

const int IEC958_AES4_CON_ORIGFS_176400 = 48;

const int IEC958_AES4_CON_ORIGFS_96000 = 80;

const int IEC958_AES4_CON_ORIGFS_8000 = 96;

const int IEC958_AES4_CON_ORIGFS_88200 = 112;

const int IEC958_AES4_CON_ORIGFS_16000 = 128;

const int IEC958_AES4_CON_ORIGFS_24000 = 144;

const int IEC958_AES4_CON_ORIGFS_11025 = 160;

const int IEC958_AES4_CON_ORIGFS_22050 = 176;

const int IEC958_AES4_CON_ORIGFS_32000 = 192;

const int IEC958_AES4_CON_ORIGFS_48000 = 208;

const int IEC958_AES4_CON_ORIGFS_44100 = 240;

const int IEC958_AES5_CON_CGMSA = 3;

const int IEC958_AES5_CON_CGMSA_COPYFREELY = 0;

const int IEC958_AES5_CON_CGMSA_COPYONCE = 1;

const int IEC958_AES5_CON_CGMSA_COPYNOMORE = 2;

const int IEC958_AES5_CON_CGMSA_COPYNEVER = 3;

const int CEA861_AUDIO_INFOFRAME_DB1CC = 7;

const int CEA861_AUDIO_INFOFRAME_DB1CT = 240;

const int CEA861_AUDIO_INFOFRAME_DB1CT_FROM_STREAM = 0;

const int CEA861_AUDIO_INFOFRAME_DB1CT_IEC60958 = 16;

const int CEA861_AUDIO_INFOFRAME_DB1CT_AC3 = 32;

const int CEA861_AUDIO_INFOFRAME_DB1CT_MPEG1 = 48;

const int CEA861_AUDIO_INFOFRAME_DB1CT_MP3 = 64;

const int CEA861_AUDIO_INFOFRAME_DB1CT_MPEG2_MULTICH = 80;

const int CEA861_AUDIO_INFOFRAME_DB1CT_AAC = 96;

const int CEA861_AUDIO_INFOFRAME_DB1CT_DTS = 112;

const int CEA861_AUDIO_INFOFRAME_DB1CT_ATRAC = 128;

const int CEA861_AUDIO_INFOFRAME_DB1CT_ONEBIT = 144;

const int CEA861_AUDIO_INFOFRAME_DB1CT_DOLBY_DIG_PLUS = 160;

const int CEA861_AUDIO_INFOFRAME_DB1CT_DTS_HD = 176;

const int CEA861_AUDIO_INFOFRAME_DB1CT_MAT = 192;

const int CEA861_AUDIO_INFOFRAME_DB1CT_DST = 208;

const int CEA861_AUDIO_INFOFRAME_DB1CT_WMA_PRO = 224;

const int CEA861_AUDIO_INFOFRAME_DB2SF = 28;

const int CEA861_AUDIO_INFOFRAME_DB2SF_FROM_STREAM = 0;

const int CEA861_AUDIO_INFOFRAME_DB2SF_32000 = 4;

const int CEA861_AUDIO_INFOFRAME_DB2SF_44100 = 8;

const int CEA861_AUDIO_INFOFRAME_DB2SF_48000 = 12;

const int CEA861_AUDIO_INFOFRAME_DB2SF_88200 = 16;

const int CEA861_AUDIO_INFOFRAME_DB2SF_96000 = 20;

const int CEA861_AUDIO_INFOFRAME_DB2SF_176400 = 24;

const int CEA861_AUDIO_INFOFRAME_DB2SF_192000 = 28;

const int CEA861_AUDIO_INFOFRAME_DB2SS = 3;

const int CEA861_AUDIO_INFOFRAME_DB2SS_FROM_STREAM = 0;

const int CEA861_AUDIO_INFOFRAME_DB2SS_16BIT = 1;

const int CEA861_AUDIO_INFOFRAME_DB2SS_20BIT = 2;

const int CEA861_AUDIO_INFOFRAME_DB2SS_24BIT = 3;

const int CEA861_AUDIO_INFOFRAME_DB5_DM_INH = 128;

const int CEA861_AUDIO_INFOFRAME_DB5_DM_INH_PERMITTED = 0;

const int CEA861_AUDIO_INFOFRAME_DB5_DM_INH_PROHIBITED = 128;

const int CEA861_AUDIO_INFOFRAME_DB5_LSV = 120;

const int MIDI_CHANNELS = 16;

const int MIDI_GM_DRUM_CHANNEL = 9;

const int MIDI_CMD_NOTE_OFF = 128;

const int MIDI_CMD_NOTE_ON = 144;

const int MIDI_CMD_NOTE_PRESSURE = 160;

const int MIDI_CMD_CONTROL = 176;

const int MIDI_CMD_PGM_CHANGE = 192;

const int MIDI_CMD_CHANNEL_PRESSURE = 208;

const int MIDI_CMD_BENDER = 224;

const int MIDI_CMD_COMMON_SYSEX = 240;

const int MIDI_CMD_COMMON_MTC_QUARTER = 241;

const int MIDI_CMD_COMMON_SONG_POS = 242;

const int MIDI_CMD_COMMON_SONG_SELECT = 243;

const int MIDI_CMD_COMMON_TUNE_REQUEST = 246;

const int MIDI_CMD_COMMON_SYSEX_END = 247;

const int MIDI_CMD_COMMON_CLOCK = 248;

const int MIDI_CMD_COMMON_START = 250;

const int MIDI_CMD_COMMON_CONTINUE = 251;

const int MIDI_CMD_COMMON_STOP = 252;

const int MIDI_CMD_COMMON_SENSING = 254;

const int MIDI_CMD_COMMON_RESET = 255;

const int MIDI_CTL_MSB_BANK = 0;

const int MIDI_CTL_MSB_MODWHEEL = 1;

const int MIDI_CTL_MSB_BREATH = 2;

const int MIDI_CTL_MSB_FOOT = 4;

const int MIDI_CTL_MSB_PORTAMENTO_TIME = 5;

const int MIDI_CTL_MSB_DATA_ENTRY = 6;

const int MIDI_CTL_MSB_MAIN_VOLUME = 7;

const int MIDI_CTL_MSB_BALANCE = 8;

const int MIDI_CTL_MSB_PAN = 10;

const int MIDI_CTL_MSB_EXPRESSION = 11;

const int MIDI_CTL_MSB_EFFECT1 = 12;

const int MIDI_CTL_MSB_EFFECT2 = 13;

const int MIDI_CTL_MSB_GENERAL_PURPOSE1 = 16;

const int MIDI_CTL_MSB_GENERAL_PURPOSE2 = 17;

const int MIDI_CTL_MSB_GENERAL_PURPOSE3 = 18;

const int MIDI_CTL_MSB_GENERAL_PURPOSE4 = 19;

const int MIDI_CTL_LSB_BANK = 32;

const int MIDI_CTL_LSB_MODWHEEL = 33;

const int MIDI_CTL_LSB_BREATH = 34;

const int MIDI_CTL_LSB_FOOT = 36;

const int MIDI_CTL_LSB_PORTAMENTO_TIME = 37;

const int MIDI_CTL_LSB_DATA_ENTRY = 38;

const int MIDI_CTL_LSB_MAIN_VOLUME = 39;

const int MIDI_CTL_LSB_BALANCE = 40;

const int MIDI_CTL_LSB_PAN = 42;

const int MIDI_CTL_LSB_EXPRESSION = 43;

const int MIDI_CTL_LSB_EFFECT1 = 44;

const int MIDI_CTL_LSB_EFFECT2 = 45;

const int MIDI_CTL_LSB_GENERAL_PURPOSE1 = 48;

const int MIDI_CTL_LSB_GENERAL_PURPOSE2 = 49;

const int MIDI_CTL_LSB_GENERAL_PURPOSE3 = 50;

const int MIDI_CTL_LSB_GENERAL_PURPOSE4 = 51;

const int MIDI_CTL_SUSTAIN = 64;

const int MIDI_CTL_PORTAMENTO = 65;

const int MIDI_CTL_SOSTENUTO = 66;

const int MIDI_CTL_SUSTENUTO = 66;

const int MIDI_CTL_SOFT_PEDAL = 67;

const int MIDI_CTL_LEGATO_FOOTSWITCH = 68;

const int MIDI_CTL_HOLD2 = 69;

const int MIDI_CTL_SC1_SOUND_VARIATION = 70;

const int MIDI_CTL_SC2_TIMBRE = 71;

const int MIDI_CTL_SC3_RELEASE_TIME = 72;

const int MIDI_CTL_SC4_ATTACK_TIME = 73;

const int MIDI_CTL_SC5_BRIGHTNESS = 74;

const int MIDI_CTL_SC6 = 75;

const int MIDI_CTL_SC7 = 76;

const int MIDI_CTL_SC8 = 77;

const int MIDI_CTL_SC9 = 78;

const int MIDI_CTL_SC10 = 79;

const int MIDI_CTL_GENERAL_PURPOSE5 = 80;

const int MIDI_CTL_GENERAL_PURPOSE6 = 81;

const int MIDI_CTL_GENERAL_PURPOSE7 = 82;

const int MIDI_CTL_GENERAL_PURPOSE8 = 83;

const int MIDI_CTL_PORTAMENTO_CONTROL = 84;

const int MIDI_CTL_E1_REVERB_DEPTH = 91;

const int MIDI_CTL_E2_TREMOLO_DEPTH = 92;

const int MIDI_CTL_E3_CHORUS_DEPTH = 93;

const int MIDI_CTL_E4_DETUNE_DEPTH = 94;

const int MIDI_CTL_E5_PHASER_DEPTH = 95;

const int MIDI_CTL_DATA_INCREMENT = 96;

const int MIDI_CTL_DATA_DECREMENT = 97;

const int MIDI_CTL_NONREG_PARM_NUM_LSB = 98;

const int MIDI_CTL_NONREG_PARM_NUM_MSB = 99;

const int MIDI_CTL_REGIST_PARM_NUM_LSB = 100;

const int MIDI_CTL_REGIST_PARM_NUM_MSB = 101;

const int MIDI_CTL_ALL_SOUNDS_OFF = 120;

const int MIDI_CTL_RESET_CONTROLLERS = 121;

const int MIDI_CTL_LOCAL_CONTROL_SWITCH = 122;

const int MIDI_CTL_ALL_NOTES_OFF = 123;

const int MIDI_CTL_OMNI_OFF = 124;

const int MIDI_CTL_OMNI_ON = 125;

const int MIDI_CTL_MONO1 = 126;

const int MIDI_CTL_MONO2 = 127;

const int SND_LIB_MAJOR = 1;

const int SND_LIB_MINOR = 2;

const int SND_LIB_SUBMINOR = 4;

const int SND_LIB_EXTRAVER = 1000000;

const int SND_LIB_VERSION = 66052;

const String SND_LIB_VERSION_STR = '1.2.4';

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int TIME_UTC = 1;

const int SND_ERROR_BEGIN = 500000;

const int SND_ERROR_INCOMPATIBLE_VERSION = 500000;

const int SND_ERROR_ALISP_NIL = 500001;

const int _STDINT_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int SND_PCM_NONBLOCK = 1;

const int SND_PCM_ASYNC = 2;

const int SND_PCM_ABORT = 32768;

const int SND_PCM_NO_AUTO_RESAMPLE = 65536;

const int SND_PCM_NO_AUTO_CHANNELS = 131072;

const int SND_PCM_NO_AUTO_FORMAT = 262144;

const int SND_PCM_NO_SOFTVOL = 524288;

const int SND_CHMAP_API_VERSION = 65537;

const int SND_CHMAP_POSITION_MASK = 65535;

const int SND_CHMAP_PHASE_INVERSE = 65536;

const int SND_CHMAP_DRIVER_SPEC = 131072;

const int SND_RAWMIDI_APPEND = 1;

const int SND_RAWMIDI_NONBLOCK = 2;

const int SND_RAWMIDI_SYNC = 4;

const int SND_TIMER_GLOBAL_SYSTEM = 0;

const int SND_TIMER_GLOBAL_RTC = 1;

const int SND_TIMER_GLOBAL_HPET = 2;

const int SND_TIMER_GLOBAL_HRTIMER = 3;

const int SND_TIMER_OPEN_NONBLOCK = 1;

const int SND_TIMER_OPEN_TREAD = 2;

const int SND_HWDEP_OPEN_READ = 0;

const int SND_HWDEP_OPEN_WRITE = 1;

const int SND_HWDEP_OPEN_DUPLEX = 2;

const int SND_HWDEP_OPEN_NONBLOCK = 2048;

const int SND_CTL_EVENT_MASK_REMOVE = 4294967295;

const int SND_CTL_EVENT_MASK_VALUE = 1;

const int SND_CTL_EVENT_MASK_INFO = 2;

const int SND_CTL_EVENT_MASK_ADD = 4;

const int SND_CTL_EVENT_MASK_TLV = 8;

const String SND_CTL_NAME_NONE = '';

const String SND_CTL_NAME_PLAYBACK = 'Playback ';

const String SND_CTL_NAME_CAPTURE = 'Capture ';

const String SND_CTL_NAME_IEC958_NONE = '';

const String SND_CTL_NAME_IEC958_SWITCH = 'Switch';

const String SND_CTL_NAME_IEC958_VOLUME = 'Volume';

const String SND_CTL_NAME_IEC958_DEFAULT = 'Default';

const String SND_CTL_NAME_IEC958_MASK = 'Mask';

const String SND_CTL_NAME_IEC958_CON_MASK = 'Con Mask';

const String SND_CTL_NAME_IEC958_PRO_MASK = 'Pro Mask';

const String SND_CTL_NAME_IEC958_PCM_STREAM = 'PCM Stream';

const int SND_CTL_POWER_MASK = 65280;

const int SND_CTL_POWER_D0 = 0;

const int SND_CTL_POWER_D1 = 256;

const int SND_CTL_POWER_D2 = 512;

const int SND_CTL_POWER_D3 = 768;

const int SND_CTL_POWER_D3hot = 768;

const int SND_CTL_POWER_D3cold = 769;

const int SND_CTL_TLVT_CONTAINER = 0;

const int SND_CTL_TLVT_DB_SCALE = 1;

const int SND_CTL_TLVT_DB_LINEAR = 2;

const int SND_CTL_TLVT_DB_RANGE = 3;

const int SND_CTL_TLVT_DB_MINMAX = 4;

const int SND_CTL_TLVT_DB_MINMAX_MUTE = 5;

const int SND_CTL_TLV_DB_GAIN_MUTE = -9999999;

const int SND_CTL_TLVT_CHMAP_FIXED = 257;

const int SND_CTL_TLVT_CHMAP_VAR = 258;

const int SND_CTL_TLVT_CHMAP_PAIRED = 259;

const int SND_CTL_NONBLOCK = 1;

const int SND_CTL_ASYNC = 2;

const int SND_CTL_READONLY = 4;

const int SND_SCTL_NOFREE = 1;

const int SND_SEQ_TIME_STAMP_TICK = 0;

const int SND_SEQ_TIME_STAMP_REAL = 1;

const int SND_SEQ_TIME_STAMP_MASK = 1;

const int SND_SEQ_TIME_MODE_ABS = 0;

const int SND_SEQ_TIME_MODE_REL = 2;

const int SND_SEQ_TIME_MODE_MASK = 2;

const int SND_SEQ_EVENT_LENGTH_FIXED = 0;

const int SND_SEQ_EVENT_LENGTH_VARIABLE = 4;

const int SND_SEQ_EVENT_LENGTH_VARUSR = 8;

const int SND_SEQ_EVENT_LENGTH_MASK = 12;

const int SND_SEQ_PRIORITY_NORMAL = 0;

const int SND_SEQ_PRIORITY_HIGH = 16;

const int SND_SEQ_PRIORITY_MASK = 16;

const int SND_SEQ_OPEN_OUTPUT = 1;

const int SND_SEQ_OPEN_INPUT = 2;

const int SND_SEQ_OPEN_DUPLEX = 3;

const int SND_SEQ_NONBLOCK = 1;

const int SND_SEQ_ADDRESS_UNKNOWN = 253;

const int SND_SEQ_ADDRESS_SUBSCRIBERS = 254;

const int SND_SEQ_ADDRESS_BROADCAST = 255;

const int SND_SEQ_CLIENT_SYSTEM = 0;

const int SND_SEQ_PORT_SYSTEM_TIMER = 0;

const int SND_SEQ_PORT_SYSTEM_ANNOUNCE = 1;

const int SND_SEQ_PORT_CAP_READ = 1;

const int SND_SEQ_PORT_CAP_WRITE = 2;

const int SND_SEQ_PORT_CAP_SYNC_READ = 4;

const int SND_SEQ_PORT_CAP_SYNC_WRITE = 8;

const int SND_SEQ_PORT_CAP_DUPLEX = 16;

const int SND_SEQ_PORT_CAP_SUBS_READ = 32;

const int SND_SEQ_PORT_CAP_SUBS_WRITE = 64;

const int SND_SEQ_PORT_CAP_NO_EXPORT = 128;

const int SND_SEQ_PORT_TYPE_SPECIFIC = 1;

const int SND_SEQ_PORT_TYPE_MIDI_GENERIC = 2;

const int SND_SEQ_PORT_TYPE_MIDI_GM = 4;

const int SND_SEQ_PORT_TYPE_MIDI_GS = 8;

const int SND_SEQ_PORT_TYPE_MIDI_XG = 16;

const int SND_SEQ_PORT_TYPE_MIDI_MT32 = 32;

const int SND_SEQ_PORT_TYPE_MIDI_GM2 = 64;

const int SND_SEQ_PORT_TYPE_SYNTH = 1024;

const int SND_SEQ_PORT_TYPE_DIRECT_SAMPLE = 2048;

const int SND_SEQ_PORT_TYPE_SAMPLE = 4096;

const int SND_SEQ_PORT_TYPE_HARDWARE = 65536;

const int SND_SEQ_PORT_TYPE_SOFTWARE = 131072;

const int SND_SEQ_PORT_TYPE_SYNTHESIZER = 262144;

const int SND_SEQ_PORT_TYPE_PORT = 524288;

const int SND_SEQ_PORT_TYPE_APPLICATION = 1048576;

const int SND_SEQ_QUEUE_DIRECT = 253;

const int SND_SEQ_REMOVE_INPUT = 1;

const int SND_SEQ_REMOVE_OUTPUT = 2;

const int SND_SEQ_REMOVE_DEST = 4;

const int SND_SEQ_REMOVE_DEST_CHANNEL = 8;

const int SND_SEQ_REMOVE_TIME_BEFORE = 16;

const int SND_SEQ_REMOVE_TIME_AFTER = 32;

const int SND_SEQ_REMOVE_TIME_TICK = 64;

const int SND_SEQ_REMOVE_EVENT_TYPE = 128;

const int SND_SEQ_REMOVE_IGNORE_OFF = 256;

const int SND_SEQ_REMOVE_TAG_MATCH = 512;

typedef _c_access = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __type,
);

typedef _dart_access = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __type,
);

typedef _c_faccessat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __type,
  ffi.Int32 __flag,
);

typedef _dart_faccessat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __type,
  int __flag,
);

typedef _c_lseek = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Int64 __offset,
  ffi.Int32 __whence,
);

typedef _dart_lseek = int Function(
  int __fd,
  int __offset,
  int __whence,
);

typedef _c_close = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_close = int Function(
  int __fd,
);

typedef _c_read = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Int32 __nbytes,
);

typedef _dart_read = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef _c_write = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Int32 __n,
);

typedef _dart_write = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
);

typedef _c_pread = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Int32 __nbytes,
  ffi.Int64 __offset,
);

typedef _dart_pread = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
  int __offset,
);

typedef _c_pwrite = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Int32 __n,
  ffi.Int64 __offset,
);

typedef _dart_pwrite = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __offset,
);

typedef _c_pipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __pipedes,
);

typedef _dart_pipe = int Function(
  ffi.Pointer<ffi.Int32> __pipedes,
);

typedef _c_alarm = ffi.Uint32 Function(
  ffi.Uint32 __seconds,
);

typedef _dart_alarm = int Function(
  int __seconds,
);

typedef _c_sleep = ffi.Uint32 Function(
  ffi.Uint32 __seconds,
);

typedef _dart_sleep = int Function(
  int __seconds,
);

typedef _c_ualarm = ffi.Uint32 Function(
  ffi.Uint32 __value,
  ffi.Uint32 __interval,
);

typedef _dart_ualarm = int Function(
  int __value,
  int __interval,
);

typedef _c_usleep = ffi.Int32 Function(
  ffi.Uint32 __useconds,
);

typedef _dart_usleep = int Function(
  int __useconds,
);

typedef _c_pause = ffi.Int32 Function();

typedef _dart_pause = int Function();

typedef _c_chown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_chown = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
);

typedef _c_fchown = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_fchown = int Function(
  int __fd,
  int __owner,
  int __group,
);

typedef _c_lchown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_lchown = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
);

typedef _c_fchownat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
  ffi.Int32 __flag,
);

typedef _dart_fchownat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
  int __flag,
);

typedef _c_chdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_chdir = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_fchdir = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_fchdir = int Function(
  int __fd,
);

typedef _c_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __size,
);

typedef _dart_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
  int __size,
);

typedef _c_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_dup = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_dup = int Function(
  int __fd,
);

typedef _c_dup2 = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __fd2,
);

typedef _dart_dup2 = int Function(
  int __fd,
  int __fd2,
);

typedef _c_execve = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _dart_execve = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _c_fexecve = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _dart_fexecve = int Function(
  int __fd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _c_execv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execv = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_execle = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execle = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_execl = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execl = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_execvp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execvp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_execlp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execlp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_nice = ffi.Int32 Function(
  ffi.Int32 __inc,
);

typedef _dart_nice = int Function(
  int __inc,
);

typedef _c__exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart__exit = void Function(
  int __status,
);

typedef _c_pathconf = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Int32 __name,
);

typedef _dart_pathconf = int Function(
  ffi.Pointer<ffi.Int8> __path,
  int __name,
);

typedef _c_fpathconf = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Int32 __name,
);

typedef _dart_fpathconf = int Function(
  int __fd,
  int __name,
);

typedef _c_sysconf = ffi.Int64 Function(
  ffi.Int32 __name,
);

typedef _dart_sysconf = int Function(
  int __name,
);

typedef _c_confstr = ffi.Int32 Function(
  ffi.Int32 __name,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __len,
);

typedef _dart_confstr = int Function(
  int __name,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_getpid = ffi.Int32 Function();

typedef _dart_getpid = int Function();

typedef _c_getppid = ffi.Int32 Function();

typedef _dart_getppid = int Function();

typedef _c_getpgrp = ffi.Int32 Function();

typedef _dart_getpgrp = int Function();

typedef _c___getpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart___getpgid = int Function(
  int __pid,
);

typedef _c_getpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart_getpgid = int Function(
  int __pid,
);

typedef _c_setpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Int32 __pgid,
);

typedef _dart_setpgid = int Function(
  int __pid,
  int __pgid,
);

typedef _c_setpgrp = ffi.Int32 Function();

typedef _dart_setpgrp = int Function();

typedef _c_setsid = ffi.Int32 Function();

typedef _dart_setsid = int Function();

typedef _c_getsid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart_getsid = int Function(
  int __pid,
);

typedef _c_getuid = ffi.Uint32 Function();

typedef _dart_getuid = int Function();

typedef _c_geteuid = ffi.Uint32 Function();

typedef _dart_geteuid = int Function();

typedef _c_getgid = ffi.Uint32 Function();

typedef _dart_getgid = int Function();

typedef _c_getegid = ffi.Uint32 Function();

typedef _dart_getegid = int Function();

typedef _c_getgroups = ffi.Int32 Function(
  ffi.Int32 __size,
  ffi.Pointer<ffi.Uint32> __list,
);

typedef _dart_getgroups = int Function(
  int __size,
  ffi.Pointer<ffi.Uint32> __list,
);

typedef _c_setuid = ffi.Int32 Function(
  ffi.Uint32 __uid,
);

typedef _dart_setuid = int Function(
  int __uid,
);

typedef _c_setreuid = ffi.Int32 Function(
  ffi.Uint32 __ruid,
  ffi.Uint32 __euid,
);

typedef _dart_setreuid = int Function(
  int __ruid,
  int __euid,
);

typedef _c_seteuid = ffi.Int32 Function(
  ffi.Uint32 __uid,
);

typedef _dart_seteuid = int Function(
  int __uid,
);

typedef _c_setgid = ffi.Int32 Function(
  ffi.Uint32 __gid,
);

typedef _dart_setgid = int Function(
  int __gid,
);

typedef _c_setregid = ffi.Int32 Function(
  ffi.Uint32 __rgid,
  ffi.Uint32 __egid,
);

typedef _dart_setregid = int Function(
  int __rgid,
  int __egid,
);

typedef _c_setegid = ffi.Int32 Function(
  ffi.Uint32 __gid,
);

typedef _dart_setegid = int Function(
  int __gid,
);

typedef _c_fork = ffi.Int32 Function();

typedef _dart_fork = int Function();

typedef _c_vfork = ffi.Int32 Function();

typedef _dart_vfork = int Function();

typedef _c_ttyname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __fd,
);

typedef _dart_ttyname = ffi.Pointer<ffi.Int8> Function(
  int __fd,
);

typedef _c_ttyname_r = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __buflen,
);

typedef _dart_ttyname_r = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __buf,
  int __buflen,
);

typedef _c_isatty = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_isatty = int Function(
  int __fd,
);

typedef _c_ttyslot = ffi.Int32 Function();

typedef _dart_ttyslot = int Function();

typedef _c_link = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_link = int Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_linkat = ffi.Int32 Function(
  ffi.Int32 __fromfd,
  ffi.Pointer<ffi.Int8> __from,
  ffi.Int32 __tofd,
  ffi.Pointer<ffi.Int8> __to,
  ffi.Int32 __flags,
);

typedef _dart_linkat = int Function(
  int __fromfd,
  ffi.Pointer<ffi.Int8> __from,
  int __tofd,
  ffi.Pointer<ffi.Int8> __to,
  int __flags,
);

typedef _c_symlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_symlink = int Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_readlink = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __len,
);

typedef _dart_readlink = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_symlinkat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Int32 __tofd,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_symlinkat = int Function(
  ffi.Pointer<ffi.Int8> __from,
  int __tofd,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_readlinkat = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __len,
);

typedef _dart_readlinkat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_unlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_unlink = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_unlinkat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __flag,
);

typedef _dart_unlinkat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __name,
  int __flag,
);

typedef _c_rmdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_rmdir = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_tcgetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcgetpgrp = int Function(
  int __fd,
);

typedef _c_tcsetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __pgrp_id,
);

typedef _dart_tcsetpgrp = int Function(
  int __fd,
  int __pgrp_id,
);

typedef _c_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _c_getlogin_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __name_len,
);

typedef _dart_getlogin_r = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __name_len,
);

typedef _c_setlogin = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_setlogin = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_getopt = ffi.Int32 Function(
  ffi.Int32 ___argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
  ffi.Pointer<ffi.Int8> __shortopts,
);

typedef _dart_getopt = int Function(
  int ___argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
  ffi.Pointer<ffi.Int8> __shortopts,
);

typedef _c_gethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __len,
);

typedef _dart_gethostname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_sethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __len,
);

typedef _dart_sethostname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_sethostid = ffi.Int32 Function(
  ffi.Int64 __id,
);

typedef _dart_sethostid = int Function(
  int __id,
);

typedef _c_getdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __len,
);

typedef _dart_getdomainname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_setdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __len,
);

typedef _dart_setdomainname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_vhangup = ffi.Int32 Function();

typedef _dart_vhangup = int Function();

typedef _c_revoke = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
);

typedef _dart_revoke = int Function(
  ffi.Pointer<ffi.Int8> __file,
);

typedef _c_profil = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __sample_buffer,
  ffi.Int32 __size,
  ffi.Int32 __offset,
  ffi.Uint32 __scale,
);

typedef _dart_profil = int Function(
  ffi.Pointer<ffi.Uint16> __sample_buffer,
  int __size,
  int __offset,
  int __scale,
);

typedef _c_acct = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_acct = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _c_endusershell = ffi.Void Function();

typedef _dart_endusershell = void Function();

typedef _c_setusershell = ffi.Void Function();

typedef _dart_setusershell = void Function();

typedef _c_daemon = ffi.Int32 Function(
  ffi.Int32 __nochdir,
  ffi.Int32 __noclose,
);

typedef _dart_daemon = int Function(
  int __nochdir,
  int __noclose,
);

typedef _c_chroot = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_chroot = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __prompt,
);

typedef _dart_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __prompt,
);

typedef _c_fsync = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_fsync = int Function(
  int __fd,
);

typedef _c_gethostid = ffi.Int64 Function();

typedef _dart_gethostid = int Function();

typedef _c_sync_1 = ffi.Void Function();

typedef _dart_sync_1 = void Function();

typedef _c_getpagesize = ffi.Int32 Function();

typedef _dart_getpagesize = int Function();

typedef _c_getdtablesize = ffi.Int32 Function();

typedef _dart_getdtablesize = int Function();

typedef _c_truncate = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int64 __length,
);

typedef _dart_truncate = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __length,
);

typedef _c_ftruncate = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int64 __length,
);

typedef _dart_ftruncate = int Function(
  int __fd,
  int __length,
);

typedef _c_brk = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __addr,
);

typedef _dart_brk = int Function(
  ffi.Pointer<ffi.Void> __addr,
);

typedef _c_sbrk = ffi.Pointer<ffi.Void> Function(
  ffi.IntPtr __delta,
);

typedef _dart_sbrk = ffi.Pointer<ffi.Void> Function(
  int __delta,
);

typedef _c_syscall = ffi.Int64 Function(
  ffi.Int64 __sysno,
);

typedef _dart_syscall = int Function(
  int __sysno,
);

typedef _c_lockf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __cmd,
  ffi.Int64 __len,
);

typedef _dart_lockf = int Function(
  int __fd,
  int __cmd,
  int __len,
);

typedef _c_fdatasync = ffi.Int32 Function(
  ffi.Int32 __fildes,
);

typedef _dart_fdatasync = int Function(
  int __fildes,
);

typedef _c_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __key,
  ffi.Pointer<ffi.Int8> __salt,
);

typedef _dart_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __key,
  ffi.Pointer<ffi.Int8> __salt,
);

typedef _c_getentropy = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __buffer,
  ffi.Int32 __length,
);

typedef _dart_getentropy = int Function(
  ffi.Pointer<ffi.Void> __buffer,
  int __length,
);

typedef _c_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _c_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_renameat = ffi.Int32 Function(
  ffi.Int32 __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  ffi.Int32 __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_renameat = int Function(
  int __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  int __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_tmpfile = ffi.Pointer<IO_FILE_> Function();

typedef _dart_tmpfile = ffi.Pointer<IO_FILE_> Function();

typedef _c_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _c_fclose = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fflush = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fflush_unlocked = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fflush_unlocked = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fopen = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fopen = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_freopen = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_freopen = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fdopen = ffi.Pointer<IO_FILE_> Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fdopen = ffi.Pointer<IO_FILE_> Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_fmemopen = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fmemopen = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Void> __s,
  int __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_open_memstream = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Int32> __sizeloc,
);

typedef _dart_open_memstream = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Int32> __sizeloc,
);

typedef _c_setbuf = ffi.Void Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_setvbuf = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __modes,
  ffi.Int32 __n,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __modes,
  int __n,
);

typedef _c_setbuffer = ffi.Void Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __size,
);

typedef _dart_setbuffer = void Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __size,
);

typedef _c_setlinebuf = ffi.Void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_setlinebuf = void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fprintf = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fprintf = int Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_printf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_printf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfprintf = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vfprintf = int Function(
  ffi.Pointer<IO_FILE_> __s,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vprintf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vsprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vsprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_snprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vdprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  ffi.Int32 __arg,
);

typedef _dart_vdprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  int __arg,
);

typedef _c_dprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _dart_dprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _c_fscanf = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fscanf = int Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_scanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_scanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfscanf = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vfscanf = int Function(
  ffi.Pointer<IO_FILE_> __s,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vscanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Int32 __arg,
);

typedef _dart_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  int __arg,
);

typedef _c_fgetc = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_getc = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_getc = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef _c_getc_unlocked = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_getc_unlocked = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_getchar_unlocked = ffi.Int32 Function();

typedef _dart_getchar_unlocked = int Function();

typedef _c_fgetc_unlocked = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fgetc_unlocked = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fputc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fputc = int Function(
  int __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_putc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_putc = int Function(
  int __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_putchar = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar = int Function(
  int __c,
);

typedef _c_fputc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fputc_unlocked = int Function(
  int __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_putc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_putc_unlocked = int Function(
  int __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_putchar_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar_unlocked = int Function(
  int __c,
);

typedef _c_getw = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_getw = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_putw = ffi.Int32 Function(
  ffi.Int32 __w,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_putw = int Function(
  int __w,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c___getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart___getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  int __delimiter,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  int __delimiter,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_getline = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_getline = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Int32> __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_ungetc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_ungetc = int Function(
  int __c,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fread = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
  ffi.Int32 __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fwrite = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
  ffi.Int32 __n,
  ffi.Pointer<IO_FILE_> __s,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<IO_FILE_> __s,
);

typedef _c_fread_unlocked = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
  ffi.Int32 __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fread_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fwrite_unlocked = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
  ffi.Int32 __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fwrite_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fseek = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<IO_FILE_> __stream,
  int __off,
  int __whence,
);

typedef _c_ftell = ffi.Int64 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_rewind = ffi.Void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fseeko = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseeko = int Function(
  ffi.Pointer<IO_FILE_> __stream,
  int __off,
  int __whence,
);

typedef _c_ftello = ffi.Int64 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_ftello = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fgetpos = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<_fpos_t_> __pos,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<_fpos_t_> __pos,
);

typedef _c_fsetpos = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<_fpos_t_> __pos,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<IO_FILE_> __stream,
  ffi.Pointer<_fpos_t_> __pos,
);

typedef _c_clearerr = ffi.Void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_feof = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_feof = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_ferror = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_clearerr_unlocked = ffi.Void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_clearerr_unlocked = void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_feof_unlocked = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_feof_unlocked = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_ferror_unlocked = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_ferror_unlocked = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_fileno = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_fileno_unlocked = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_fileno_unlocked = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_popen = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_popen = ffi.Pointer<IO_FILE_> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_pclose = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_pclose = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_flockfile = ffi.Void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_flockfile = void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_ftrylockfile = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_ftrylockfile = int Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c_funlockfile = ffi.Void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _dart_funlockfile = void Function(
  ffi.Pointer<IO_FILE_> __stream,
);

typedef _c___uflow = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> arg0,
);

typedef _dart___uflow = int Function(
  ffi.Pointer<IO_FILE_> arg0,
);

typedef _c___overflow = ffi.Int32 Function(
  ffi.Pointer<IO_FILE_> arg0,
  ffi.Int32 arg1,
);

typedef _dart___overflow = int Function(
  ffi.Pointer<IO_FILE_> arg0,
  int arg1,
);

typedef _c___ctype_get_mb_cur_max = ffi.Int32 Function();

typedef _dart___ctype_get_mb_cur_max = int Function();

typedef _c_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _c_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _c_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoq = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoq = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtouq = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtouq = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_l64a = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 __n,
);

typedef _dart_l64a = ffi.Pointer<ffi.Int8> Function(
  int __n,
);

typedef _c_a64l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_a64l = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_select = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _dart_select = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _c_pselect = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<_sigset_t_> __sigmask,
);

typedef _dart_pselect = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<_sigset_t_> __sigmask,
);

typedef _c_random = ffi.Int64 Function();

typedef _dart_random = int Function();

typedef _c_srandom = ffi.Void Function(
  ffi.Uint32 __seed,
);

typedef _dart_srandom = void Function(
  int __seed,
);

typedef _c_initstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Int32 __statelen,
);

typedef _dart_initstate = ffi.Pointer<ffi.Int8> Function(
  int __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  int __statelen,
);

typedef _c_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __statebuf,
);

typedef _dart_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __statebuf,
);

typedef _c_random_r = ffi.Int32 Function(
  ffi.Pointer<random_data> __buf,
  ffi.Pointer<ffi.Int32> __result,
);

typedef _dart_random_r = int Function(
  ffi.Pointer<random_data> __buf,
  ffi.Pointer<ffi.Int32> __result,
);

typedef _c_srandom_r = ffi.Int32 Function(
  ffi.Uint32 __seed,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_srandom_r = int Function(
  int __seed,
  ffi.Pointer<random_data> __buf,
);

typedef _c_initstate_r = ffi.Int32 Function(
  ffi.Uint32 __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Int32 __statelen,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_initstate_r = int Function(
  int __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  int __statelen,
  ffi.Pointer<random_data> __buf,
);

typedef _c_setstate_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_setstate_r = int Function(
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Pointer<random_data> __buf,
);

typedef _c_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef _c_srand = ffi.Void Function(
  ffi.Uint32 __seed,
);

typedef _dart_srand = void Function(
  int __seed,
);

typedef _c_rand_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> __seed,
);

typedef _dart_rand_r = int Function(
  ffi.Pointer<ffi.Uint32> __seed,
);

typedef _c_drand48 = ffi.Double Function();

typedef _dart_drand48 = double Function();

typedef _c_erand48 = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_erand48 = double Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_lrand48 = ffi.Int64 Function();

typedef _dart_lrand48 = int Function();

typedef _c_nrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_nrand48 = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_mrand48 = ffi.Int64 Function();

typedef _dart_mrand48 = int Function();

typedef _c_jrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_jrand48 = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_srand48 = ffi.Void Function(
  ffi.Int64 __seedval,
);

typedef _dart_srand48 = void Function(
  int __seedval,
);

typedef _c_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
);

typedef _dart_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
);

typedef _c_lcong48 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> __param,
);

typedef _dart_lcong48 = void Function(
  ffi.Pointer<ffi.Uint16> __param,
);

typedef _c_drand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _dart_drand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _c_erand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _dart_erand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _c_lrand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_lrand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_nrand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_nrand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_mrand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_mrand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_jrand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_jrand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_srand48_r = ffi.Int32 Function(
  ffi.Int64 __seedval,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_srand48_r = int Function(
  int __seedval,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_seed48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_seed48_r = int Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_lcong48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __param,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_lcong48_r = int Function(
  ffi.Pointer<ffi.Uint16> __param,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 __size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 __nmemb,
  ffi.Int32 __size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int __nmemb,
  int __size,
);

typedef _c_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_reallocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Int32 __nmemb,
  ffi.Int32 __size,
);

typedef _dart_reallocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __nmemb,
  int __size,
);

typedef _c_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> __ptr,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> __ptr,
);

typedef _c_alloca = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 __size,
);

typedef _dart_alloca = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_valloc = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 __size,
);

typedef _dart_valloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_posix_memalign = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  ffi.Int32 __alignment,
  ffi.Int32 __size,
);

typedef _dart_posix_memalign = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

typedef _c_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 __alignment,
  ffi.Int32 __size,
);

typedef _dart_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  int __alignment,
  int __size,
);

typedef _c_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef _typedefC_1 = ffi.Void Function();

typedef _c_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __func,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __func,
);

typedef _typedefC_2 = ffi.Void Function();

typedef _c_at_quick_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> __func,
);

typedef _dart_at_quick_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> __func,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_on_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> __func,
  ffi.Pointer<ffi.Void> __arg,
);

typedef _dart_on_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> __func,
  ffi.Pointer<ffi.Void> __arg,
);

typedef _c_exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart_exit = void Function(
  int __status,
);

typedef _c_quick_exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart_quick_exit = void Function(
  int __status,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart__Exit = void Function(
  int __status,
);

typedef _c_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __string,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> __string,
);

typedef _c_setenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  ffi.Int32 __replace,
);

typedef _dart_setenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  int __replace,
);

typedef _c_unsetenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_unsetenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_clearenv = ffi.Int32 Function();

typedef _dart_clearenv = int Function();

typedef _c_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_mkstemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mkstemp = int Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_mkstemps = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __template,
  ffi.Int32 __suffixlen,
);

typedef _dart_mkstemps = int Function(
  ffi.Pointer<ffi.Int8> __template,
  int __suffixlen,
);

typedef _c_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __command,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> __command,
);

typedef _c_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __resolved,
);

typedef _dart_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __resolved,
);

typedef __compar_fn_t = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  ffi.Int32 __nmemb,
  ffi.Int32 __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _c_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Int32 __nmemb,
  ffi.Int32 __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _c_abs = ffi.Int32 Function(
  ffi.Int32 __x,
);

typedef _dart_abs = int Function(
  int __x,
);

typedef _c_labs = ffi.Int64 Function(
  ffi.Int64 __x,
);

typedef _dart_labs = int Function(
  int __x,
);

typedef _c_llabs = ffi.Int64 Function(
  ffi.Int64 __x,
);

typedef _dart_llabs = int Function(
  int __x,
);

typedef _c_div = div_t Function(
  ffi.Int32 __numer,
  ffi.Int32 __denom,
);

typedef _dart_div = div_t Function(
  int __numer,
  int __denom,
);

typedef _c_ldiv = ldiv_t Function(
  ffi.Int64 __numer,
  ffi.Int64 __denom,
);

typedef _dart_ldiv = ldiv_t Function(
  int __numer,
  int __denom,
);

typedef _c_lldiv = lldiv_t Function(
  ffi.Int64 __numer,
  ffi.Int64 __denom,
);

typedef _dart_lldiv = lldiv_t Function(
  int __numer,
  int __denom,
);

typedef _c_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _c_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _c_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_ecvt_r = ffi.Int32 Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __len,
);

typedef _dart_ecvt_r = int Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_fcvt_r = ffi.Int32 Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __len,
);

typedef _dart_fcvt_r = int Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __n,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __pwc,
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __n,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Int32> __pwc,
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __wchar,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __wchar,
);

typedef _c_mbstowcs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __n,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_wcstombs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Int32 __n,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int32> __pwcs,
  int __n,
);

typedef _c_rpmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __response,
);

typedef _dart_rpmatch = int Function(
  ffi.Pointer<ffi.Int8> __response,
);

typedef _c_getsubopt = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
);

typedef _dart_getsubopt = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
);

typedef _c_getloadavg = ffi.Int32 Function(
  ffi.Pointer<ffi.Double> __loadavg,
  ffi.Int32 __nelem,
);

typedef _dart_getloadavg = int Function(
  ffi.Pointer<ffi.Double> __loadavg,
  int __nelem,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __n,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __n,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __c,
  ffi.Int32 __n,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Int32 __n,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Int32 __n,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Int32 __n,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Int32 __n,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Int32 __n,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Int32 __n,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strxfrm = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Int32 __n,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<_locale_struct_> __l,
);

typedef _dart_strcoll_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<_locale_struct_> __l,
);

typedef _c_strxfrm_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Int32 __n,
  ffi.Pointer<_locale_struct_> __l,
);

typedef _dart_strxfrm_l = int Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
  ffi.Pointer<_locale_struct_> __l,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __string,
  ffi.Int32 __n,
);

typedef _dart_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __string,
  int __n,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strcspn = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __reject,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __reject,
);

typedef _c_strspn = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __haystack,
  ffi.Pointer<ffi.Int8> __needle,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __haystack,
  ffi.Pointer<ffi.Int8> __needle,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c___strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _dart___strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _c_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _dart_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _c_strlen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strnlen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __string,
  ffi.Int32 __maxlen,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> __string,
  int __maxlen,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
);

typedef _c_strerror_r = ffi.Int32 Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __buflen,
);

typedef _dart_strerror_r = int Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __buf,
  int __buflen,
);

typedef _c_strerror_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
  ffi.Pointer<_locale_struct_> __l,
);

typedef _dart_strerror_l = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
  ffi.Pointer<_locale_struct_> __l,
);

typedef _c_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Int32 __n,
);

typedef _dart_bcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_bcopy = ffi.Void Function(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  ffi.Int32 __n,
);

typedef _dart_bcopy = void Function(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  int __n,
);

typedef _c_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __n,
);

typedef _dart_bzero = void Function(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

typedef _c_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_ffs = ffi.Int32 Function(
  ffi.Int32 __i,
);

typedef _dart_ffs = int Function(
  int __i,
);

typedef _c_ffsl = ffi.Int32 Function(
  ffi.Int64 __l,
);

typedef _dart_ffsl = int Function(
  int __l,
);

typedef _c_ffsll = ffi.Int32 Function(
  ffi.Int64 __ll,
);

typedef _dart_ffsll = int Function(
  int __ll,
);

typedef _c_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Int32 __n,
);

typedef _dart_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strcasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<_locale_struct_> __loc,
);

typedef _dart_strcasecmp_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<_locale_struct_> __loc,
);

typedef _c_strncasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Int32 __n,
  ffi.Pointer<_locale_struct_> __loc,
);

typedef _dart_strncasecmp_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
  ffi.Pointer<_locale_struct_> __loc,
);

typedef _c_explicit_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __n,
);

typedef _dart_explicit_bzero = void Function(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

typedef _c_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_strsignal = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __sig,
);

typedef _dart_strsignal = ffi.Pointer<ffi.Int8> Function(
  int __sig,
);

typedef _c___stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart___stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c___stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Int32 __n,
);

typedef _dart___stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Int32 __n,
);

typedef _dart_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_fcntl = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __cmd,
);

typedef _dart_fcntl = int Function(
  int __fd,
  int __cmd,
);

typedef _c_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_open = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __oflag,
);

typedef _c_openat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_openat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __oflag,
);

typedef _c_creat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __mode,
);

typedef _dart_creat = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __mode,
);

typedef _c_posix_fadvise = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int64 __offset,
  ffi.Int64 __len,
  ffi.Int32 __advise,
);

typedef _dart_posix_fadvise = int Function(
  int __fd,
  int __offset,
  int __len,
  int __advise,
);

typedef _c_posix_fallocate = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int64 __offset,
  ffi.Int64 __len,
);

typedef _dart_posix_fallocate = int Function(
  int __fd,
  int __offset,
  int __len,
);

typedef _c___assert_fail = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __assertion,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __line,
  ffi.Pointer<ffi.Int8> __function,
);

typedef _dart___assert_fail = void Function(
  ffi.Pointer<ffi.Int8> __assertion,
  ffi.Pointer<ffi.Int8> __file,
  int __line,
  ffi.Pointer<ffi.Int8> __function,
);

typedef _c___assert_perror_fail = ffi.Void Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __line,
  ffi.Pointer<ffi.Int8> __function,
);

typedef _dart___assert_perror_fail = void Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __file,
  int __line,
  ffi.Pointer<ffi.Int8> __function,
);

typedef _c___assert = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __assertion,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __line,
);

typedef _dart___assert = void Function(
  ffi.Pointer<ffi.Int8> __assertion,
  ffi.Pointer<ffi.Int8> __file,
  int __line,
);

typedef _c_poll = ffi.Int32 Function(
  ffi.Pointer<pollfd> __fds,
  ffi.Uint64 __nfds,
  ffi.Int32 __timeout,
);

typedef _dart_poll = int Function(
  ffi.Pointer<pollfd> __fds,
  int __nfds,
  int __timeout,
);

typedef _c___errno_location = ffi.Pointer<ffi.Int32> Function();

typedef _dart___errno_location = ffi.Pointer<ffi.Int32> Function();

typedef _c_clock = ffi.Int64 Function();

typedef _dart_clock = int Function();

typedef _c_time = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_time = int Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_difftime = ffi.Double Function(
  ffi.Int64 __time1,
  ffi.Int64 __time0,
);

typedef _dart_difftime = double Function(
  int __time1,
  int __time0,
);

typedef _c_mktime = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_mktime = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_strftime = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
);

typedef _dart_strftime = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
);

typedef _c_strftime_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
  ffi.Pointer<_locale_struct_> __loc,
);

typedef _dart_strftime_l = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
  ffi.Pointer<_locale_struct_> __loc,
);

typedef _c_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _dart_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _c_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _dart_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _c_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_tzset = ffi.Void Function();

typedef _dart_tzset = void Function();

typedef _c_timegm = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_timegm = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_timelocal = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_timelocal = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_dysize = ffi.Int32 Function(
  ffi.Int32 __year,
);

typedef _dart_dysize = int Function(
  int __year,
);

typedef _c_nanosleep = ffi.Int32 Function(
  ffi.Pointer<timespec> __requested_time,
  ffi.Pointer<timespec> __remaining,
);

typedef _dart_nanosleep = int Function(
  ffi.Pointer<timespec> __requested_time,
  ffi.Pointer<timespec> __remaining,
);

typedef _c_clock_getres = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _dart_clock_getres = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _c_clock_gettime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_gettime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_settime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_settime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_nanosleep = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Int32 __flags,
  ffi.Pointer<timespec> __req,
  ffi.Pointer<timespec> __rem,
);

typedef _dart_clock_nanosleep = int Function(
  int __clock_id,
  int __flags,
  ffi.Pointer<timespec> __req,
  ffi.Pointer<timespec> __rem,
);

typedef _c_clock_getcpuclockid = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Pointer<ffi.Int32> __clock_id,
);

typedef _dart_clock_getcpuclockid = int Function(
  int __pid,
  ffi.Pointer<ffi.Int32> __clock_id,
);

typedef _c_timer_create = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<sigevent> __evp,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
);

typedef _dart_timer_create = int Function(
  int __clock_id,
  ffi.Pointer<sigevent> __evp,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
);

typedef _c_timer_delete = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _dart_timer_delete = int Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _c_timer_settime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Int32 __flags,
  ffi.Pointer<itimerspec> __value,
  ffi.Pointer<itimerspec> __ovalue,
);

typedef _dart_timer_settime = int Function(
  ffi.Pointer<ffi.Void> __timerid,
  int __flags,
  ffi.Pointer<itimerspec> __value,
  ffi.Pointer<itimerspec> __ovalue,
);

typedef _c_timer_gettime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Pointer<itimerspec> __value,
);

typedef _dart_timer_gettime = int Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Pointer<itimerspec> __value,
);

typedef _c_timer_getoverrun = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _dart_timer_getoverrun = int Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _c_timespec_get = ffi.Int32 Function(
  ffi.Pointer<timespec> __ts,
  ffi.Int32 __base,
);

typedef _dart_timespec_get = int Function(
  ffi.Pointer<timespec> __ts,
  int __base,
);

typedef _c_snd_asoundlib_version = ffi.Pointer<ffi.Int8> Function();

typedef _dart_snd_asoundlib_version = ffi.Pointer<ffi.Int8> Function();

typedef _c_snd_dlpath = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 path_len,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_dlpath = int Function(
  ffi.Pointer<ffi.Int8> path,
  int path_len,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_dlopen = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 mode,
  ffi.Pointer<ffi.Int8> errbuf,
  ffi.Int32 errbuflen,
);

typedef _dart_snd_dlopen = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> file,
  int mode,
  ffi.Pointer<ffi.Int8> errbuf,
  int errbuflen,
);

typedef _c_snd_dlsym = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> handle,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> version,
);

typedef _dart_snd_dlsym = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> handle,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> version,
);

typedef _c_snd_dlclose = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> handle,
);

typedef _dart_snd_dlclose = int Function(
  ffi.Pointer<ffi.Void> handle,
);

typedef snd_async_callback_t = ffi.Void Function(
  ffi.Pointer<snd_async_handler_>,
);

typedef _c_snd_async_add_handler = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
  ffi.Int32 fd,
  ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_snd_async_add_handler = int Function(
  ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
  int fd,
  ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _c_snd_async_del_handler = ffi.Int32 Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _dart_snd_async_del_handler = int Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _c_snd_async_handler_get_fd = ffi.Int32 Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _dart_snd_async_handler_get_fd = int Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _c_snd_async_handler_get_signo = ffi.Int32 Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _dart_snd_async_handler_get_signo = int Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _c_snd_async_handler_get_callback_private = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _dart_snd_async_handler_get_callback_private = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _c_snd_shm_area_create = ffi.Pointer<snd_shm_area> Function(
  ffi.Int32 shmid,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_snd_shm_area_create = ffi.Pointer<snd_shm_area> Function(
  int shmid,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_snd_shm_area_share = ffi.Pointer<snd_shm_area> Function(
  ffi.Pointer<snd_shm_area> area,
);

typedef _dart_snd_shm_area_share = ffi.Pointer<snd_shm_area> Function(
  ffi.Pointer<snd_shm_area> area,
);

typedef _c_snd_shm_area_destroy = ffi.Int32 Function(
  ffi.Pointer<snd_shm_area> area,
);

typedef _dart_snd_shm_area_destroy = int Function(
  ffi.Pointer<snd_shm_area> area,
);

typedef _c_snd_user_file = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> result,
);

typedef _dart_snd_user_file = int Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> result,
);

typedef _c_snd_input_stdio_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_snd_input_stdio_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _c_snd_input_stdio_attach = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
  ffi.Pointer<IO_FILE_> fp,
  ffi.Int32 _close,
);

typedef _dart_snd_input_stdio_attach = int Function(
  ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
  ffi.Pointer<IO_FILE_> fp,
  int _close,
);

typedef _c_snd_input_buffer_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int64 size,
);

typedef _dart_snd_input_buffer_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_input_>> inputp,
  ffi.Pointer<ffi.Int8> buffer,
  int size,
);

typedef _c_snd_input_close = ffi.Int32 Function(
  ffi.Pointer<snd_input_> input,
);

typedef _dart_snd_input_close = int Function(
  ffi.Pointer<snd_input_> input,
);

typedef _c_snd_input_scanf = ffi.Int32 Function(
  ffi.Pointer<snd_input_> input,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_snd_input_scanf = int Function(
  ffi.Pointer<snd_input_> input,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_snd_input_gets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_input_> input,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 size,
);

typedef _dart_snd_input_gets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_input_> input,
  ffi.Pointer<ffi.Int8> str,
  int size,
);

typedef _c_snd_input_getc = ffi.Int32 Function(
  ffi.Pointer<snd_input_> input,
);

typedef _dart_snd_input_getc = int Function(
  ffi.Pointer<snd_input_> input,
);

typedef _c_snd_input_ungetc = ffi.Int32 Function(
  ffi.Pointer<snd_input_> input,
  ffi.Int32 c,
);

typedef _dart_snd_input_ungetc = int Function(
  ffi.Pointer<snd_input_> input,
  int c,
);

typedef _c_snd_output_stdio_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_snd_output_stdio_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
  ffi.Pointer<ffi.Int8> file,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _c_snd_output_stdio_attach = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
  ffi.Pointer<IO_FILE_> fp,
  ffi.Int32 _close,
);

typedef _dart_snd_output_stdio_attach = int Function(
  ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
  ffi.Pointer<IO_FILE_> fp,
  int _close,
);

typedef _c_snd_output_buffer_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
);

typedef _dart_snd_output_buffer_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_output_>> outputp,
);

typedef _c_snd_output_buffer_string = ffi.Int32 Function(
  ffi.Pointer<snd_output_> output,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
);

typedef _dart_snd_output_buffer_string = int Function(
  ffi.Pointer<snd_output_> output,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
);

typedef _c_snd_output_close = ffi.Int32 Function(
  ffi.Pointer<snd_output_> output,
);

typedef _dart_snd_output_close = int Function(
  ffi.Pointer<snd_output_> output,
);

typedef _c_snd_output_printf = ffi.Int32 Function(
  ffi.Pointer<snd_output_> output,
  ffi.Pointer<ffi.Int8> format,
);

typedef _dart_snd_output_printf = int Function(
  ffi.Pointer<snd_output_> output,
  ffi.Pointer<ffi.Int8> format,
);

typedef _c_snd_output_vprintf = ffi.Int32 Function(
  ffi.Pointer<snd_output_> output,
  ffi.Pointer<ffi.Int8> format,
  ffi.Int32 args,
);

typedef _dart_snd_output_vprintf = int Function(
  ffi.Pointer<snd_output_> output,
  ffi.Pointer<ffi.Int8> format,
  int args,
);

typedef _c_snd_output_puts = ffi.Int32 Function(
  ffi.Pointer<snd_output_> output,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_snd_output_puts = int Function(
  ffi.Pointer<snd_output_> output,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_snd_output_putc = ffi.Int32 Function(
  ffi.Pointer<snd_output_> output,
  ffi.Int32 c,
);

typedef _dart_snd_output_putc = int Function(
  ffi.Pointer<snd_output_> output,
  int c,
);

typedef _c_snd_output_flush = ffi.Int32 Function(
  ffi.Pointer<snd_output_> output,
);

typedef _dart_snd_output_flush = int Function(
  ffi.Pointer<snd_output_> output,
);

typedef _c_snd_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 errnum,
);

typedef _dart_snd_strerror = ffi.Pointer<ffi.Int8> Function(
  int errnum,
);

typedef snd_lib_error_handler_t = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_snd_lib_error_set_handler = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<snd_lib_error_handler_t>> handler,
);

typedef _dart_snd_lib_error_set_handler = int Function(
  ffi.Pointer<ffi.NativeFunction<snd_lib_error_handler_t>> handler,
);

typedef snd_local_error_handler_t = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c_snd_lib_error_set_local
    = ffi.Pointer<ffi.NativeFunction<snd_local_error_handler_t>> Function(
  ffi.Pointer<ffi.NativeFunction<snd_local_error_handler_t>> func,
);

typedef _dart_snd_lib_error_set_local
    = ffi.Pointer<ffi.NativeFunction<snd_local_error_handler_t>> Function(
  ffi.Pointer<ffi.NativeFunction<snd_local_error_handler_t>> func,
);

typedef _c_snd_config_topdir = ffi.Pointer<ffi.Int8> Function();

typedef _dart_snd_config_topdir = ffi.Pointer<ffi.Int8> Function();

typedef _c_snd_config_top = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
);

typedef _dart_snd_config_top = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
);

typedef _c_snd_config_load = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_input_> in_1,
);

typedef _dart_snd_config_load = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_input_> in_1,
);

typedef _c_snd_config_load_override = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_input_> in_1,
);

typedef _dart_snd_config_load_override = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_input_> in_1,
);

typedef _c_snd_config_save = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_output_> out,
);

typedef _dart_snd_config_save = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_output_> out,
);

typedef _c_snd_config_update = ffi.Int32 Function();

typedef _dart_snd_config_update = int Function();

typedef _c_snd_config_update_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> top,
  ffi.Pointer<ffi.Pointer<snd_config_update_>> update,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_snd_config_update_r = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> top,
  ffi.Pointer<ffi.Pointer<snd_config_update_>> update,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_snd_config_update_free = ffi.Int32 Function(
  ffi.Pointer<snd_config_update_> update,
);

typedef _dart_snd_config_update_free = int Function(
  ffi.Pointer<snd_config_update_> update,
);

typedef _c_snd_config_update_free_global = ffi.Int32 Function();

typedef _dart_snd_config_update_free_global = int Function();

typedef _c_snd_config_update_ref = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> top,
);

typedef _dart_snd_config_update_ref = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> top,
);

typedef _c_snd_config_ref = ffi.Void Function(
  ffi.Pointer<snd_config_> top,
);

typedef _dart_snd_config_ref = void Function(
  ffi.Pointer<snd_config_> top,
);

typedef _c_snd_config_unref = ffi.Void Function(
  ffi.Pointer<snd_config_> top,
);

typedef _dart_snd_config_unref = void Function(
  ffi.Pointer<snd_config_> top,
);

typedef _c_snd_config_search = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _dart_snd_config_search = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _c_snd_config_searchv = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _dart_snd_config_searchv = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _c_snd_config_search_definition = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> base,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _dart_snd_config_search_definition = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> base,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _c_snd_config_expand = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_config_> root,
  ffi.Pointer<ffi.Int8> args,
  ffi.Pointer<snd_config_> private_data,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _dart_snd_config_expand = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_config_> root,
  ffi.Pointer<ffi.Int8> args,
  ffi.Pointer<snd_config_> private_data,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _c_snd_config_evaluate = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_config_> root,
  ffi.Pointer<snd_config_> private_data,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _dart_snd_config_evaluate = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_config_> root,
  ffi.Pointer<snd_config_> private_data,
  ffi.Pointer<ffi.Pointer<snd_config_>> result,
);

typedef _c_snd_config_add = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_config_> child,
);

typedef _dart_snd_config_add = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_config_> child,
);

typedef _c_snd_config_add_before = ffi.Int32 Function(
  ffi.Pointer<snd_config_> before,
  ffi.Pointer<snd_config_> child,
);

typedef _dart_snd_config_add_before = int Function(
  ffi.Pointer<snd_config_> before,
  ffi.Pointer<snd_config_> child,
);

typedef _c_snd_config_add_after = ffi.Int32 Function(
  ffi.Pointer<snd_config_> after,
  ffi.Pointer<snd_config_> child,
);

typedef _dart_snd_config_add_after = int Function(
  ffi.Pointer<snd_config_> after,
  ffi.Pointer<snd_config_> child,
);

typedef _c_snd_config_remove = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
);

typedef _dart_snd_config_remove = int Function(
  ffi.Pointer<snd_config_> config,
);

typedef _c_snd_config_delete = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
);

typedef _dart_snd_config_delete = int Function(
  ffi.Pointer<snd_config_> config,
);

typedef _c_snd_config_delete_compound_members = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
);

typedef _dart_snd_config_delete_compound_members = int Function(
  ffi.Pointer<snd_config_> config,
);

typedef _c_snd_config_copy = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> dst,
  ffi.Pointer<snd_config_> src,
);

typedef _dart_snd_config_copy = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> dst,
  ffi.Pointer<snd_config_> src,
);

typedef _c_snd_config_make = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Int32 type,
);

typedef _dart_snd_config_make = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  int type,
);

typedef _c_snd_config_make_integer = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_snd_config_make_integer = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_snd_config_make_integer64 = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_snd_config_make_integer64 = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_snd_config_make_real = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_snd_config_make_real = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_snd_config_make_string = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_snd_config_make_string = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_snd_config_make_pointer = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_snd_config_make_pointer = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_snd_config_make_compound = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Int32 join,
);

typedef _dart_snd_config_make_compound = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  int join,
);

typedef _c_snd_config_imake_integer = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Int64 value,
);

typedef _dart_snd_config_imake_integer = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  int value,
);

typedef _c_snd_config_imake_integer64 = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Int64 value,
);

typedef _dart_snd_config_imake_integer64 = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  int value,
);

typedef _c_snd_config_imake_real = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Double value,
);

typedef _dart_snd_config_imake_real = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  double value,
);

typedef _c_snd_config_imake_string = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _dart_snd_config_imake_string = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _c_snd_config_imake_safe_string = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _dart_snd_config_imake_safe_string = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _c_snd_config_imake_pointer = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_snd_config_imake_pointer = int Function(
  ffi.Pointer<ffi.Pointer<snd_config_>> config,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_snd_config_get_type = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
);

typedef _dart_snd_config_get_type = int Function(
  ffi.Pointer<snd_config_> config,
);

typedef _c_snd_config_is_array = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
);

typedef _dart_snd_config_is_array = int Function(
  ffi.Pointer<snd_config_> config,
);

typedef _c_snd_config_set_id = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_snd_config_set_id = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_snd_config_set_integer = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Int64 value,
);

typedef _dart_snd_config_set_integer = int Function(
  ffi.Pointer<snd_config_> config,
  int value,
);

typedef _c_snd_config_set_integer64 = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Int64 value,
);

typedef _dart_snd_config_set_integer64 = int Function(
  ffi.Pointer<snd_config_> config,
  int value,
);

typedef _c_snd_config_set_real = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Double value,
);

typedef _dart_snd_config_set_real = int Function(
  ffi.Pointer<snd_config_> config,
  double value,
);

typedef _c_snd_config_set_string = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_snd_config_set_string = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_snd_config_set_ascii = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _dart_snd_config_set_ascii = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _c_snd_config_set_pointer = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_snd_config_set_pointer = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_snd_config_get_id = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _dart_snd_config_get_id = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _c_snd_config_get_integer = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_snd_config_get_integer = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_snd_config_get_integer64 = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_snd_config_get_integer64 = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_snd_config_get_real = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Double> value,
);

typedef _dart_snd_config_get_real = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Double> value,
);

typedef _c_snd_config_get_ireal = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Double> value,
);

typedef _dart_snd_config_get_ireal = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Double> value,
);

typedef _c_snd_config_get_string = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _dart_snd_config_get_string = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _c_snd_config_get_ascii = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _dart_snd_config_get_ascii = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _c_snd_config_get_pointer = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<ffi.Void>> value,
);

typedef _dart_snd_config_get_pointer = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Pointer<ffi.Void>> value,
);

typedef _c_snd_config_test_id = ffi.Int32 Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_snd_config_test_id = int Function(
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_snd_config_iterator_first = ffi.Pointer<snd_config_iterator_>
    Function(
  ffi.Pointer<snd_config_> node,
);

typedef _dart_snd_config_iterator_first = ffi.Pointer<snd_config_iterator_>
    Function(
  ffi.Pointer<snd_config_> node,
);

typedef _c_snd_config_iterator_next = ffi.Pointer<snd_config_iterator_>
    Function(
  ffi.Pointer<snd_config_iterator_> iterator,
);

typedef _dart_snd_config_iterator_next = ffi.Pointer<snd_config_iterator_>
    Function(
  ffi.Pointer<snd_config_iterator_> iterator,
);

typedef _c_snd_config_iterator_end = ffi.Pointer<snd_config_iterator_> Function(
  ffi.Pointer<snd_config_> node,
);

typedef _dart_snd_config_iterator_end = ffi.Pointer<snd_config_iterator_>
    Function(
  ffi.Pointer<snd_config_> node,
);

typedef _c_snd_config_iterator_entry = ffi.Pointer<snd_config_> Function(
  ffi.Pointer<snd_config_iterator_> iterator,
);

typedef _dart_snd_config_iterator_entry = ffi.Pointer<snd_config_> Function(
  ffi.Pointer<snd_config_iterator_> iterator,
);

typedef _c_snd_config_get_bool_ascii = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _dart_snd_config_get_bool_ascii = int Function(
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _c_snd_config_get_bool = ffi.Int32 Function(
  ffi.Pointer<snd_config_> conf,
);

typedef _dart_snd_config_get_bool = int Function(
  ffi.Pointer<snd_config_> conf,
);

typedef _c_snd_config_get_ctl_iface_ascii = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _dart_snd_config_get_ctl_iface_ascii = int Function(
  ffi.Pointer<ffi.Int8> ascii,
);

typedef _c_snd_config_get_ctl_iface = ffi.Int32 Function(
  ffi.Pointer<snd_config_> conf,
);

typedef _dart_snd_config_get_ctl_iface = int Function(
  ffi.Pointer<snd_config_> conf,
);

typedef _c_snd_names_list = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> iface,
  ffi.Pointer<ffi.Pointer<snd_devname>> list,
);

typedef _dart_snd_names_list = int Function(
  ffi.Pointer<ffi.Int8> iface,
  ffi.Pointer<ffi.Pointer<snd_devname>> list,
);

typedef _c_snd_names_list_free = ffi.Void Function(
  ffi.Pointer<snd_devname> list,
);

typedef _dart_snd_names_list_free = void Function(
  ffi.Pointer<snd_devname> list,
);

typedef _c_snd_pcm_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 stream,
  ffi.Int32 mode,
);

typedef _dart_snd_pcm_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
  ffi.Pointer<ffi.Int8> name,
  int stream,
  int mode,
);

typedef _c_snd_pcm_open_lconf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 stream,
  ffi.Int32 mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _dart_snd_pcm_open_lconf = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
  ffi.Pointer<ffi.Int8> name,
  int stream,
  int mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _c_snd_pcm_open_fallback = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
  ffi.Pointer<snd_config_> root,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> orig_name,
  ffi.Int32 stream,
  ffi.Int32 mode,
);

typedef _dart_snd_pcm_open_fallback = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_>> pcm,
  ffi.Pointer<snd_config_> root,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> orig_name,
  int stream,
  int mode,
);

typedef _c_snd_pcm_close = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_close = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_type = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_type = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_stream = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_stream = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_poll_descriptors_count = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_poll_descriptors_count = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_poll_descriptors = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 space,
);

typedef _dart_snd_pcm_poll_descriptors = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<pollfd> pfds,
  int space,
);

typedef _c_snd_pcm_poll_descriptors_revents = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _dart_snd_pcm_poll_descriptors_revents = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<pollfd> pfds,
  int nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _c_snd_pcm_nonblock = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int32 nonblock,
);

typedef _dart_snd_pcm_nonblock = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int nonblock,
);

typedef _c_snd_async_add_pcm_handler = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_snd_async_add_pcm_handler = int Function(
  ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _c_snd_async_handler_get_pcm = ffi.Pointer<snd_pcm_> Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _dart_snd_async_handler_get_pcm = ffi.Pointer<snd_pcm_> Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _c_snd_pcm_info = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_info_> info,
);

typedef _dart_snd_pcm_info = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_info_> info,
);

typedef _c_snd_pcm_hw_params_current = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_current = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_free = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_hw_free = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_sw_params_current = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
);

typedef _dart_snd_pcm_sw_params_current = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
);

typedef _c_snd_pcm_sw_params = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
);

typedef _dart_snd_pcm_sw_params = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
);

typedef _c_snd_pcm_prepare = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_prepare = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_reset = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_reset = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_status = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_status_> status,
);

typedef _dart_snd_pcm_status = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_status_> status,
);

typedef _c_snd_pcm_start = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_start = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_drop = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_drop = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_drain = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_drain = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_pause = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int32 enable,
);

typedef _dart_snd_pcm_pause = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int enable,
);

typedef _c_snd_pcm_state = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_state = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_hwsync = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_hwsync = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_delay = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Int64> delayp,
);

typedef _dart_snd_pcm_delay = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Int64> delayp,
);

typedef _c_snd_pcm_resume = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_resume = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_htimestamp = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Uint64> avail,
  ffi.Pointer<timespec> tstamp,
);

typedef _dart_snd_pcm_htimestamp = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Uint64> avail,
  ffi.Pointer<timespec> tstamp,
);

typedef _c_snd_pcm_avail = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_avail = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_avail_update = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_avail_update = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_avail_delay = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Int64> availp,
  ffi.Pointer<ffi.Int64> delayp,
);

typedef _dart_snd_pcm_avail_delay = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Int64> availp,
  ffi.Pointer<ffi.Int64> delayp,
);

typedef _c_snd_pcm_rewindable = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_rewindable = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_rewind = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Uint64 frames,
);

typedef _dart_snd_pcm_rewind = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int frames,
);

typedef _c_snd_pcm_forwardable = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_forwardable = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_forward = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Uint64 frames,
);

typedef _dart_snd_pcm_forward = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int frames,
);

typedef _c_snd_pcm_writei = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 size,
);

typedef _dart_snd_pcm_writei = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_pcm_readi = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 size,
);

typedef _dart_snd_pcm_readi = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_pcm_writen = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
  ffi.Uint64 size,
);

typedef _dart_snd_pcm_writen = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
  int size,
);

typedef _c_snd_pcm_readn = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
  ffi.Uint64 size,
);

typedef _dart_snd_pcm_readn = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
  int size,
);

typedef _c_snd_pcm_wait = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int32 timeout,
);

typedef _dart_snd_pcm_wait = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int timeout,
);

typedef _c_snd_pcm_link = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm1,
  ffi.Pointer<snd_pcm_> pcm2,
);

typedef _dart_snd_pcm_link = int Function(
  ffi.Pointer<snd_pcm_> pcm1,
  ffi.Pointer<snd_pcm_> pcm2,
);

typedef _c_snd_pcm_unlink = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_unlink = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_query_chmaps
    = ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_query_chmaps
    = ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_query_chmaps_from_hw
    = ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> Function(
  ffi.Int32 card,
  ffi.Int32 dev,
  ffi.Int32 subdev,
  ffi.Int32 stream,
);

typedef _dart_snd_pcm_query_chmaps_from_hw
    = ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> Function(
  int card,
  int dev,
  int subdev,
  int stream,
);

typedef _c_snd_pcm_free_chmaps = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> maps,
);

typedef _dart_snd_pcm_free_chmaps = void Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> maps,
);

typedef _c_snd_pcm_get_chmap = ffi.Pointer<snd_pcm_chmap_t> Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_get_chmap = ffi.Pointer<snd_pcm_chmap_t> Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_set_chmap = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_chmap_t> map,
);

typedef _dart_snd_pcm_set_chmap = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_chmap_t> map,
);

typedef _c_snd_pcm_chmap_type_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 val,
);

typedef _dart_snd_pcm_chmap_type_name = ffi.Pointer<ffi.Int8> Function(
  int val,
);

typedef _c_snd_pcm_chmap_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 val,
);

typedef _dart_snd_pcm_chmap_name = ffi.Pointer<ffi.Int8> Function(
  int val,
);

typedef _c_snd_pcm_chmap_long_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 val,
);

typedef _dart_snd_pcm_chmap_long_name = ffi.Pointer<ffi.Int8> Function(
  int val,
);

typedef _c_snd_pcm_chmap_print = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_chmap_t> map,
  ffi.Int32 maxlen,
  ffi.Pointer<ffi.Int8> buf,
);

typedef _dart_snd_pcm_chmap_print = int Function(
  ffi.Pointer<snd_pcm_chmap_t> map,
  int maxlen,
  ffi.Pointer<ffi.Int8> buf,
);

typedef _c_snd_pcm_chmap_from_string = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_snd_pcm_chmap_from_string = int Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_snd_pcm_chmap_parse_string = ffi.Pointer<snd_pcm_chmap_t> Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_snd_pcm_chmap_parse_string = ffi.Pointer<snd_pcm_chmap_t>
    Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_snd_pcm_recover = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int32 err,
  ffi.Int32 silent,
);

typedef _dart_snd_pcm_recover = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int err,
  int silent,
);

typedef _c_snd_pcm_set_params = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int32 format,
  ffi.Int32 access,
  ffi.Uint32 channels,
  ffi.Uint32 rate,
  ffi.Int32 soft_resample,
  ffi.Uint32 latency,
);

typedef _dart_snd_pcm_set_params = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int format,
  int access,
  int channels,
  int rate,
  int soft_resample,
  int latency,
);

typedef _c_snd_pcm_get_params = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Uint64> buffer_size,
  ffi.Pointer<ffi.Uint64> period_size,
);

typedef _dart_snd_pcm_get_params = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Uint64> buffer_size,
  ffi.Pointer<ffi.Uint64> period_size,
);

typedef _c_snd_pcm_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_pcm_info_sizeof = int Function();

typedef _c_snd_pcm_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_info_>> ptr,
);

typedef _dart_snd_pcm_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_info_>> ptr,
);

typedef _c_snd_pcm_info_free = ffi.Void Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_free = void Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_copy = ffi.Void Function(
  ffi.Pointer<snd_pcm_info_> dst,
  ffi.Pointer<snd_pcm_info_> src,
);

typedef _dart_snd_pcm_info_copy = void Function(
  ffi.Pointer<snd_pcm_info_> dst,
  ffi.Pointer<snd_pcm_info_> src,
);

typedef _c_snd_pcm_info_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_device = int Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_subdevice = ffi.Uint32 Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_subdevice = int Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_stream = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_stream = int Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_card = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_card = int Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_subdevice_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_subdevice_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_class = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_class = int Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_subclass = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_subclass = int Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_subdevices_count = ffi.Uint32 Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_subdevices_count = int Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_get_subdevices_avail = ffi.Uint32 Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _dart_snd_pcm_info_get_subdevices_avail = int Function(
  ffi.Pointer<snd_pcm_info_> obj,
);

typedef _c_snd_pcm_info_set_device = ffi.Void Function(
  ffi.Pointer<snd_pcm_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_pcm_info_set_device = void Function(
  ffi.Pointer<snd_pcm_info_> obj,
  int val,
);

typedef _c_snd_pcm_info_set_subdevice = ffi.Void Function(
  ffi.Pointer<snd_pcm_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_pcm_info_set_subdevice = void Function(
  ffi.Pointer<snd_pcm_info_> obj,
  int val,
);

typedef _c_snd_pcm_info_set_stream = ffi.Void Function(
  ffi.Pointer<snd_pcm_info_> obj,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_info_set_stream = void Function(
  ffi.Pointer<snd_pcm_info_> obj,
  int val,
);

typedef _c_snd_pcm_hw_params_any = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_any = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_can_mmap_sample_resolution = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_can_mmap_sample_resolution = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_is_double = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_is_double = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_is_batch = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_is_batch = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_is_block_transfer = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_is_block_transfer = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_is_monotonic = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_is_monotonic = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_can_overrange = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_can_overrange = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_can_pause = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_can_pause = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_can_resume = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_can_resume = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_is_half_duplex = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_is_half_duplex = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_is_joint_duplex = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_is_joint_duplex = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_can_sync_start = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_can_sync_start = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_can_disable_period_wakeup = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_can_disable_period_wakeup = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_supports_audio_wallclock_ts = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_supports_audio_wallclock_ts = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_supports_audio_ts_type = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Int32 type,
);

typedef _dart_snd_pcm_hw_params_supports_audio_ts_type = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  int type,
);

typedef _c_snd_pcm_hw_params_get_rate_numden = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> rate_num,
  ffi.Pointer<ffi.Uint32> rate_den,
);

typedef _dart_snd_pcm_hw_params_get_rate_numden = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> rate_num,
  ffi.Pointer<ffi.Uint32> rate_den,
);

typedef _c_snd_pcm_hw_params_get_sbits = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_get_sbits = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_get_fifo_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_get_fifo_size = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_sizeof = ffi.Int32 Function();

typedef _dart_snd_pcm_hw_params_sizeof = int Function();

typedef _c_snd_pcm_hw_params_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_hw_params_>> ptr,
);

typedef _dart_snd_pcm_hw_params_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_hw_params_>> ptr,
);

typedef _c_snd_pcm_hw_params_free = ffi.Void Function(
  ffi.Pointer<snd_pcm_hw_params_> obj,
);

typedef _dart_snd_pcm_hw_params_free = void Function(
  ffi.Pointer<snd_pcm_hw_params_> obj,
);

typedef _c_snd_pcm_hw_params_copy = ffi.Void Function(
  ffi.Pointer<snd_pcm_hw_params_> dst,
  ffi.Pointer<snd_pcm_hw_params_> src,
);

typedef _dart_snd_pcm_hw_params_copy = void Function(
  ffi.Pointer<snd_pcm_hw_params_> dst,
  ffi.Pointer<snd_pcm_hw_params_> src,
);

typedef _c_snd_pcm_hw_params_get_access = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> _access,
);

typedef _dart_snd_pcm_hw_params_get_access = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> _access,
);

typedef _c_snd_pcm_hw_params_test_access = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Int32 _access,
);

typedef _dart_snd_pcm_hw_params_test_access = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int _access,
);

typedef _c_snd_pcm_hw_params_set_access = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Int32 _access,
);

typedef _dart_snd_pcm_hw_params_set_access = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int _access,
);

typedef _c_snd_pcm_hw_params_set_access_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> _access,
);

typedef _dart_snd_pcm_hw_params_set_access_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> _access,
);

typedef _c_snd_pcm_hw_params_set_access_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> _access,
);

typedef _dart_snd_pcm_hw_params_set_access_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> _access,
);

typedef _c_snd_pcm_hw_params_set_access_mask = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _dart_snd_pcm_hw_params_set_access_mask = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _c_snd_pcm_hw_params_get_access_mask = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _dart_snd_pcm_hw_params_get_access_mask = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _c_snd_pcm_hw_params_get_format = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> val,
);

typedef _dart_snd_pcm_hw_params_get_format = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> val,
);

typedef _c_snd_pcm_hw_params_test_format = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_hw_params_test_format = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_set_format = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_hw_params_set_format = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_set_format_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> format,
);

typedef _dart_snd_pcm_hw_params_set_format_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> format,
);

typedef _c_snd_pcm_hw_params_set_format_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> format,
);

typedef _dart_snd_pcm_hw_params_set_format_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> format,
);

typedef _c_snd_pcm_hw_params_set_format_mask = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _dart_snd_pcm_hw_params_set_format_mask = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _c_snd_pcm_hw_params_get_format_mask = ffi.Void Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _dart_snd_pcm_hw_params_get_format_mask = void Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _c_snd_pcm_hw_params_get_subformat = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> subformat,
);

typedef _dart_snd_pcm_hw_params_get_subformat = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> subformat,
);

typedef _c_snd_pcm_hw_params_test_subformat = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Int32 subformat,
);

typedef _dart_snd_pcm_hw_params_test_subformat = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int subformat,
);

typedef _c_snd_pcm_hw_params_set_subformat = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Int32 subformat,
);

typedef _dart_snd_pcm_hw_params_set_subformat = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int subformat,
);

typedef _c_snd_pcm_hw_params_set_subformat_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> subformat,
);

typedef _dart_snd_pcm_hw_params_set_subformat_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> subformat,
);

typedef _c_snd_pcm_hw_params_set_subformat_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> subformat,
);

typedef _dart_snd_pcm_hw_params_set_subformat_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Int32> subformat,
);

typedef _c_snd_pcm_hw_params_set_subformat_mask = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _dart_snd_pcm_hw_params_set_subformat_mask = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _c_snd_pcm_hw_params_get_subformat_mask = ffi.Void Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _dart_snd_pcm_hw_params_get_subformat_mask = void Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _c_snd_pcm_hw_params_get_channels = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_get_channels = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_get_channels_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_get_channels_min = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_get_channels_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_get_channels_max = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_test_channels = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
);

typedef _dart_snd_pcm_hw_params_test_channels = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_set_channels = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
);

typedef _dart_snd_pcm_hw_params_set_channels = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_set_channels_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_set_channels_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_set_channels_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_set_channels_max = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_set_channels_minmax = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Uint32> max,
);

typedef _dart_snd_pcm_hw_params_set_channels_minmax = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Uint32> max,
);

typedef _c_snd_pcm_hw_params_set_channels_near = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_set_channels_near = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_set_channels_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_set_channels_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_set_channels_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_set_channels_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_get_rate = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_rate = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_rate_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_rate_min = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_rate_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_rate_max = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_test_rate = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_test_rate = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_rate = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_set_rate = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_rate_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_rate_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_rate_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_rate_max = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_rate_minmax = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _dart_snd_pcm_hw_params_set_rate_minmax = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _c_snd_pcm_hw_params_set_rate_near = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_rate_near = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_rate_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_rate_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_rate_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_rate_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_rate_resample = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
);

typedef _dart_snd_pcm_hw_params_set_rate_resample = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_get_rate_resample = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_get_rate_resample = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_set_export_buffer = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
);

typedef _dart_snd_pcm_hw_params_set_export_buffer = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_get_export_buffer = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_get_export_buffer = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_set_period_wakeup = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
);

typedef _dart_snd_pcm_hw_params_set_period_wakeup = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_get_period_wakeup = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_hw_params_get_period_wakeup = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_get_period_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_period_time = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_period_time_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_period_time_min = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_period_time_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_period_time_max = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_test_period_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_test_period_time = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_period_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_set_period_time = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_period_time_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_time_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_time_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_time_max = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_time_minmax = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _dart_snd_pcm_hw_params_set_period_time_minmax = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _c_snd_pcm_hw_params_set_period_time_near = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_time_near = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_time_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_time_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_time_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_time_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_period_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> frames,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_period_size = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> frames,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_period_size_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> frames,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_period_size_min = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> frames,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_period_size_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> frames,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_period_size_max = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> frames,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_test_period_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint64 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_test_period_size = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_period_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint64 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_set_period_size = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_period_size_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_size_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_size_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_size_max = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_size_minmax = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint64> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _dart_snd_pcm_hw_params_set_period_size_minmax = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint64> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _c_snd_pcm_hw_params_set_period_size_near = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_size_near = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_size_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_size_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_size_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_period_size_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_period_size_integer = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_set_period_size_integer = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_get_periods = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_periods = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_periods_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_periods_min = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_periods_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_periods_max = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_test_periods = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_test_periods = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_periods = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_set_periods = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_periods_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_periods_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_periods_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_periods_max = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_periods_minmax = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _dart_snd_pcm_hw_params_set_periods_minmax = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _c_snd_pcm_hw_params_set_periods_near = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_periods_near = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_periods_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_periods_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_periods_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_periods_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_periods_integer = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _dart_snd_pcm_hw_params_set_periods_integer = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
);

typedef _c_snd_pcm_hw_params_get_buffer_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_buffer_time = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_buffer_time_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_buffer_time_min = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_buffer_time_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_buffer_time_max = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_test_buffer_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_test_buffer_time = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_buffer_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_set_buffer_time = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_buffer_time_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_buffer_time_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_buffer_time_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_buffer_time_max = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_buffer_time_minmax = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _dart_snd_pcm_hw_params_set_buffer_time_minmax = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _c_snd_pcm_hw_params_set_buffer_time_near = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_buffer_time_near = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_buffer_time_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_buffer_time_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_buffer_time_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_buffer_time_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_get_buffer_size = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_hw_params_get_buffer_size_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_get_buffer_size_min = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_hw_params_get_buffer_size_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_get_buffer_size_max = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_hw_params_test_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint64 val,
);

typedef _dart_snd_pcm_hw_params_test_buffer_size = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_set_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint64 val,
);

typedef _dart_snd_pcm_hw_params_set_buffer_size = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
);

typedef _c_snd_pcm_hw_params_set_buffer_size_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_set_buffer_size_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_hw_params_set_buffer_size_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_set_buffer_size_max = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_hw_params_set_buffer_size_minmax = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> min,
  ffi.Pointer<ffi.Uint64> max,
);

typedef _dart_snd_pcm_hw_params_set_buffer_size_minmax = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> min,
  ffi.Pointer<ffi.Uint64> max,
);

typedef _c_snd_pcm_hw_params_set_buffer_size_near = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_set_buffer_size_near = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_hw_params_set_buffer_size_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_set_buffer_size_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_hw_params_set_buffer_size_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_set_buffer_size_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_hw_params_get_min_align = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_hw_params_get_min_align = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_sw_params_sizeof = ffi.Int32 Function();

typedef _dart_snd_pcm_sw_params_sizeof = int Function();

typedef _c_snd_pcm_sw_params_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_sw_params_>> ptr,
);

typedef _dart_snd_pcm_sw_params_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_sw_params_>> ptr,
);

typedef _c_snd_pcm_sw_params_free = ffi.Void Function(
  ffi.Pointer<snd_pcm_sw_params_> obj,
);

typedef _dart_snd_pcm_sw_params_free = void Function(
  ffi.Pointer<snd_pcm_sw_params_> obj,
);

typedef _c_snd_pcm_sw_params_copy = ffi.Void Function(
  ffi.Pointer<snd_pcm_sw_params_> dst,
  ffi.Pointer<snd_pcm_sw_params_> src,
);

typedef _dart_snd_pcm_sw_params_copy = void Function(
  ffi.Pointer<snd_pcm_sw_params_> dst,
  ffi.Pointer<snd_pcm_sw_params_> src,
);

typedef _c_snd_pcm_sw_params_get_boundary = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_sw_params_get_boundary = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_sw_params_set_tstamp_mode = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_sw_params_set_tstamp_mode = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_tstamp_mode = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Int32> val,
);

typedef _dart_snd_pcm_sw_params_get_tstamp_mode = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Int32> val,
);

typedef _c_snd_pcm_sw_params_set_tstamp_type = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_sw_params_set_tstamp_type = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_tstamp_type = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Int32> val,
);

typedef _dart_snd_pcm_sw_params_get_tstamp_type = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Int32> val,
);

typedef _c_snd_pcm_sw_params_set_avail_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Uint64 val,
);

typedef _dart_snd_pcm_sw_params_set_avail_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_avail_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_sw_params_get_avail_min = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_sw_params_set_period_event = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_sw_params_set_period_event = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_period_event = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Int32> val,
);

typedef _dart_snd_pcm_sw_params_get_period_event = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Int32> val,
);

typedef _c_snd_pcm_sw_params_set_start_threshold = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Uint64 val,
);

typedef _dart_snd_pcm_sw_params_set_start_threshold = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_start_threshold = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> paramsm,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_sw_params_get_start_threshold = int Function(
  ffi.Pointer<snd_pcm_sw_params_> paramsm,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_sw_params_set_stop_threshold = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Uint64 val,
);

typedef _dart_snd_pcm_sw_params_set_stop_threshold = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_stop_threshold = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_sw_params_get_stop_threshold = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_sw_params_set_silence_threshold = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Uint64 val,
);

typedef _dart_snd_pcm_sw_params_set_silence_threshold = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_silence_threshold = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_sw_params_get_silence_threshold = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_sw_params_set_silence_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Uint64 val,
);

typedef _dart_snd_pcm_sw_params_set_silence_size = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_silence_size = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_sw_params_get_silence_size = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_access_mask_sizeof = ffi.Int32 Function();

typedef _dart_snd_pcm_access_mask_sizeof = int Function();

typedef _c_snd_pcm_access_mask_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_access_mask_>> ptr,
);

typedef _dart_snd_pcm_access_mask_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_access_mask_>> ptr,
);

typedef _c_snd_pcm_access_mask_free = ffi.Void Function(
  ffi.Pointer<snd_pcm_access_mask_> obj,
);

typedef _dart_snd_pcm_access_mask_free = void Function(
  ffi.Pointer<snd_pcm_access_mask_> obj,
);

typedef _c_snd_pcm_access_mask_copy = ffi.Void Function(
  ffi.Pointer<snd_pcm_access_mask_> dst,
  ffi.Pointer<snd_pcm_access_mask_> src,
);

typedef _dart_snd_pcm_access_mask_copy = void Function(
  ffi.Pointer<snd_pcm_access_mask_> dst,
  ffi.Pointer<snd_pcm_access_mask_> src,
);

typedef _c_snd_pcm_access_mask_none = ffi.Void Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _dart_snd_pcm_access_mask_none = void Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _c_snd_pcm_access_mask_any = ffi.Void Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _dart_snd_pcm_access_mask_any = void Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _c_snd_pcm_access_mask_test = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_access_mask_test = int Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
  int val,
);

typedef _c_snd_pcm_access_mask_empty = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _dart_snd_pcm_access_mask_empty = int Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
);

typedef _c_snd_pcm_access_mask_set = ffi.Void Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_access_mask_set = void Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
  int val,
);

typedef _c_snd_pcm_access_mask_reset = ffi.Void Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_access_mask_reset = void Function(
  ffi.Pointer<snd_pcm_access_mask_> mask,
  int val,
);

typedef _c_snd_pcm_format_mask_sizeof = ffi.Int32 Function();

typedef _dart_snd_pcm_format_mask_sizeof = int Function();

typedef _c_snd_pcm_format_mask_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_format_mask_>> ptr,
);

typedef _dart_snd_pcm_format_mask_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_format_mask_>> ptr,
);

typedef _c_snd_pcm_format_mask_free = ffi.Void Function(
  ffi.Pointer<snd_pcm_format_mask_> obj,
);

typedef _dart_snd_pcm_format_mask_free = void Function(
  ffi.Pointer<snd_pcm_format_mask_> obj,
);

typedef _c_snd_pcm_format_mask_copy = ffi.Void Function(
  ffi.Pointer<snd_pcm_format_mask_> dst,
  ffi.Pointer<snd_pcm_format_mask_> src,
);

typedef _dart_snd_pcm_format_mask_copy = void Function(
  ffi.Pointer<snd_pcm_format_mask_> dst,
  ffi.Pointer<snd_pcm_format_mask_> src,
);

typedef _c_snd_pcm_format_mask_none = ffi.Void Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _dart_snd_pcm_format_mask_none = void Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _c_snd_pcm_format_mask_any = ffi.Void Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _dart_snd_pcm_format_mask_any = void Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _c_snd_pcm_format_mask_test = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_format_mask_test = int Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
  int val,
);

typedef _c_snd_pcm_format_mask_empty = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _dart_snd_pcm_format_mask_empty = int Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
);

typedef _c_snd_pcm_format_mask_set = ffi.Void Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_format_mask_set = void Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
  int val,
);

typedef _c_snd_pcm_format_mask_reset = ffi.Void Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_format_mask_reset = void Function(
  ffi.Pointer<snd_pcm_format_mask_> mask,
  int val,
);

typedef _c_snd_pcm_subformat_mask_sizeof = ffi.Int32 Function();

typedef _dart_snd_pcm_subformat_mask_sizeof = int Function();

typedef _c_snd_pcm_subformat_mask_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_subformat_mask_>> ptr,
);

typedef _dart_snd_pcm_subformat_mask_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_subformat_mask_>> ptr,
);

typedef _c_snd_pcm_subformat_mask_free = ffi.Void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> obj,
);

typedef _dart_snd_pcm_subformat_mask_free = void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> obj,
);

typedef _c_snd_pcm_subformat_mask_copy = ffi.Void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> dst,
  ffi.Pointer<snd_pcm_subformat_mask_> src,
);

typedef _dart_snd_pcm_subformat_mask_copy = void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> dst,
  ffi.Pointer<snd_pcm_subformat_mask_> src,
);

typedef _c_snd_pcm_subformat_mask_none = ffi.Void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _dart_snd_pcm_subformat_mask_none = void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _c_snd_pcm_subformat_mask_any = ffi.Void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _dart_snd_pcm_subformat_mask_any = void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _c_snd_pcm_subformat_mask_test = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_subformat_mask_test = int Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
  int val,
);

typedef _c_snd_pcm_subformat_mask_empty = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _dart_snd_pcm_subformat_mask_empty = int Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
);

typedef _c_snd_pcm_subformat_mask_set = ffi.Void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_subformat_mask_set = void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
  int val,
);

typedef _c_snd_pcm_subformat_mask_reset = ffi.Void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_subformat_mask_reset = void Function(
  ffi.Pointer<snd_pcm_subformat_mask_> mask,
  int val,
);

typedef _c_snd_pcm_status_sizeof = ffi.Int32 Function();

typedef _dart_snd_pcm_status_sizeof = int Function();

typedef _c_snd_pcm_status_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_status_>> ptr,
);

typedef _dart_snd_pcm_status_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_status_>> ptr,
);

typedef _c_snd_pcm_status_free = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _dart_snd_pcm_status_free = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _c_snd_pcm_status_copy = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> dst,
  ffi.Pointer<snd_pcm_status_> src,
);

typedef _dart_snd_pcm_status_copy = void Function(
  ffi.Pointer<snd_pcm_status_> dst,
  ffi.Pointer<snd_pcm_status_> src,
);

typedef _c_snd_pcm_status_get_state = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _dart_snd_pcm_status_get_state = int Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _c_snd_pcm_status_get_trigger_tstamp = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timeval> ptr,
);

typedef _dart_snd_pcm_status_get_trigger_tstamp = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timeval> ptr,
);

typedef _c_snd_pcm_status_get_trigger_htstamp = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _dart_snd_pcm_status_get_trigger_htstamp = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _c_snd_pcm_status_get_tstamp = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timeval> ptr,
);

typedef _dart_snd_pcm_status_get_tstamp = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timeval> ptr,
);

typedef _c_snd_pcm_status_get_htstamp = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _dart_snd_pcm_status_get_htstamp = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _c_snd_pcm_status_get_audio_htstamp = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _dart_snd_pcm_status_get_audio_htstamp = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _c_snd_pcm_status_get_driver_htstamp = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _dart_snd_pcm_status_get_driver_htstamp = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _c_snd_pcm_status_get_audio_htstamp_report = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<snd_pcm_audio_tstamp_report_t> audio_tstamp_report,
);

typedef _dart_snd_pcm_status_get_audio_htstamp_report = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<snd_pcm_audio_tstamp_report_t> audio_tstamp_report,
);

typedef _c_snd_pcm_status_set_audio_htstamp_config = ffi.Void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<snd_pcm_audio_tstamp_config_t> audio_tstamp_config,
);

typedef _dart_snd_pcm_status_set_audio_htstamp_config = void Function(
  ffi.Pointer<snd_pcm_status_> obj,
  ffi.Pointer<snd_pcm_audio_tstamp_config_t> audio_tstamp_config,
);

typedef _c_snd_pcm_status_get_delay = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _dart_snd_pcm_status_get_delay = int Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _c_snd_pcm_status_get_avail = ffi.Uint64 Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _dart_snd_pcm_status_get_avail = int Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _c_snd_pcm_status_get_avail_max = ffi.Uint64 Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _dart_snd_pcm_status_get_avail_max = int Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _c_snd_pcm_status_get_overrange = ffi.Uint64 Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _dart_snd_pcm_status_get_overrange = int Function(
  ffi.Pointer<snd_pcm_status_> obj,
);

typedef _c_snd_pcm_type_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 type,
);

typedef _dart_snd_pcm_type_name = ffi.Pointer<ffi.Int8> Function(
  int type,
);

typedef _c_snd_pcm_stream_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 stream,
);

typedef _dart_snd_pcm_stream_name = ffi.Pointer<ffi.Int8> Function(
  int stream,
);

typedef _c_snd_pcm_access_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _access,
);

typedef _dart_snd_pcm_access_name = ffi.Pointer<ffi.Int8> Function(
  int _access,
);

typedef _c_snd_pcm_format_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_name = ffi.Pointer<ffi.Int8> Function(
  int format,
);

typedef _c_snd_pcm_format_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_description = ffi.Pointer<ffi.Int8> Function(
  int format,
);

typedef _c_snd_pcm_subformat_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 subformat,
);

typedef _dart_snd_pcm_subformat_name = ffi.Pointer<ffi.Int8> Function(
  int subformat,
);

typedef _c_snd_pcm_subformat_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 subformat,
);

typedef _dart_snd_pcm_subformat_description = ffi.Pointer<ffi.Int8> Function(
  int subformat,
);

typedef _c_snd_pcm_format_value = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_pcm_format_value = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_pcm_tstamp_mode_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 mode,
);

typedef _dart_snd_pcm_tstamp_mode_name = ffi.Pointer<ffi.Int8> Function(
  int mode,
);

typedef _c_snd_pcm_state_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 state,
);

typedef _dart_snd_pcm_state_name = ffi.Pointer<ffi.Int8> Function(
  int state,
);

typedef _c_snd_pcm_dump = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_output_> out,
);

typedef _dart_snd_pcm_dump = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_output_> out,
);

typedef _c_snd_pcm_dump_hw_setup = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_output_> out,
);

typedef _dart_snd_pcm_dump_hw_setup = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_output_> out,
);

typedef _c_snd_pcm_dump_sw_setup = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_output_> out,
);

typedef _dart_snd_pcm_dump_sw_setup = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_output_> out,
);

typedef _c_snd_pcm_dump_setup = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_output_> out,
);

typedef _dart_snd_pcm_dump_setup = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_output_> out,
);

typedef _c_snd_pcm_hw_params_dump = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_output_> out,
);

typedef _dart_snd_pcm_hw_params_dump = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<snd_output_> out,
);

typedef _c_snd_pcm_sw_params_dump = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<snd_output_> out,
);

typedef _dart_snd_pcm_sw_params_dump = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<snd_output_> out,
);

typedef _c_snd_pcm_status_dump = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_status_> status,
  ffi.Pointer<snd_output_> out,
);

typedef _dart_snd_pcm_status_dump = int Function(
  ffi.Pointer<snd_pcm_status_> status,
  ffi.Pointer<snd_output_> out,
);

typedef _c_snd_pcm_mmap_begin = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<snd_pcm_channel_area_t>> areas,
  ffi.Pointer<ffi.Uint64> offset,
  ffi.Pointer<ffi.Uint64> frames,
);

typedef _dart_snd_pcm_mmap_begin = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<snd_pcm_channel_area_t>> areas,
  ffi.Pointer<ffi.Uint64> offset,
  ffi.Pointer<ffi.Uint64> frames,
);

typedef _c_snd_pcm_mmap_commit = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Uint64 offset,
  ffi.Uint64 frames,
);

typedef _dart_snd_pcm_mmap_commit = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int offset,
  int frames,
);

typedef _c_snd_pcm_mmap_writei = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 size,
);

typedef _dart_snd_pcm_mmap_writei = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_pcm_mmap_readi = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 size,
);

typedef _dart_snd_pcm_mmap_readi = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_pcm_mmap_writen = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
  ffi.Uint64 size,
);

typedef _dart_snd_pcm_mmap_writen = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
  int size,
);

typedef _c_snd_pcm_mmap_readn = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
  ffi.Uint64 size,
);

typedef _dart_snd_pcm_mmap_readn = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
  int size,
);

typedef _c_snd_pcm_format_signed = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_signed = int Function(
  int format,
);

typedef _c_snd_pcm_format_unsigned = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_unsigned = int Function(
  int format,
);

typedef _c_snd_pcm_format_linear = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_linear = int Function(
  int format,
);

typedef _c_snd_pcm_format_float = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_float = int Function(
  int format,
);

typedef _c_snd_pcm_format_little_endian = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_little_endian = int Function(
  int format,
);

typedef _c_snd_pcm_format_big_endian = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_big_endian = int Function(
  int format,
);

typedef _c_snd_pcm_format_cpu_endian = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_cpu_endian = int Function(
  int format,
);

typedef _c_snd_pcm_format_width = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_width = int Function(
  int format,
);

typedef _c_snd_pcm_format_physical_width = ffi.Int32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_physical_width = int Function(
  int format,
);

typedef _c_snd_pcm_build_linear_format = ffi.Int32 Function(
  ffi.Int32 width,
  ffi.Int32 pwidth,
  ffi.Int32 unsignd,
  ffi.Int32 big_endian,
);

typedef _dart_snd_pcm_build_linear_format = int Function(
  int width,
  int pwidth,
  int unsignd,
  int big_endian,
);

typedef _c_snd_pcm_format_size = ffi.Int64 Function(
  ffi.Int32 format,
  ffi.Int32 samples,
);

typedef _dart_snd_pcm_format_size = int Function(
  int format,
  int samples,
);

typedef _c_snd_pcm_format_silence = ffi.Uint8 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_silence = int Function(
  int format,
);

typedef _c_snd_pcm_format_silence_16 = ffi.Uint16 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_silence_16 = int Function(
  int format,
);

typedef _c_snd_pcm_format_silence_32 = ffi.Uint32 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_silence_32 = int Function(
  int format,
);

typedef _c_snd_pcm_format_silence_64 = ffi.Uint64 Function(
  ffi.Int32 format,
);

typedef _dart_snd_pcm_format_silence_64 = int Function(
  int format,
);

typedef _c_snd_pcm_format_set_silence = ffi.Int32 Function(
  ffi.Int32 format,
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint32 samples,
);

typedef _dart_snd_pcm_format_set_silence = int Function(
  int format,
  ffi.Pointer<ffi.Void> buf,
  int samples,
);

typedef _c_snd_pcm_bytes_to_frames = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int64 bytes,
);

typedef _dart_snd_pcm_bytes_to_frames = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int bytes,
);

typedef _c_snd_pcm_frames_to_bytes = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int64 frames,
);

typedef _dart_snd_pcm_frames_to_bytes = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int frames,
);

typedef _c_snd_pcm_bytes_to_samples = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int64 bytes,
);

typedef _dart_snd_pcm_bytes_to_samples = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int bytes,
);

typedef _c_snd_pcm_samples_to_bytes = ffi.Int64 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int64 samples,
);

typedef _dart_snd_pcm_samples_to_bytes = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int samples,
);

typedef _c_snd_pcm_area_silence = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channel,
  ffi.Uint64 dst_offset,
  ffi.Uint32 samples,
  ffi.Int32 format,
);

typedef _dart_snd_pcm_area_silence = int Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channel,
  int dst_offset,
  int samples,
  int format,
);

typedef _c_snd_pcm_areas_silence = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
  ffi.Uint64 dst_offset,
  ffi.Uint32 channels,
  ffi.Uint64 frames,
  ffi.Int32 format,
);

typedef _dart_snd_pcm_areas_silence = int Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
  int dst_offset,
  int channels,
  int frames,
  int format,
);

typedef _c_snd_pcm_area_copy = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channel,
  ffi.Uint64 dst_offset,
  ffi.Pointer<snd_pcm_channel_area_t> src_channel,
  ffi.Uint64 src_offset,
  ffi.Uint32 samples,
  ffi.Int32 format,
);

typedef _dart_snd_pcm_area_copy = int Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channel,
  int dst_offset,
  ffi.Pointer<snd_pcm_channel_area_t> src_channel,
  int src_offset,
  int samples,
  int format,
);

typedef _c_snd_pcm_areas_copy = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
  ffi.Uint64 dst_offset,
  ffi.Pointer<snd_pcm_channel_area_t> src_channels,
  ffi.Uint64 src_offset,
  ffi.Uint32 channels,
  ffi.Uint64 frames,
  ffi.Int32 format,
);

typedef _dart_snd_pcm_areas_copy = int Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
  int dst_offset,
  ffi.Pointer<snd_pcm_channel_area_t> src_channels,
  int src_offset,
  int channels,
  int frames,
  int format,
);

typedef _c_snd_pcm_areas_copy_wrap = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
  ffi.Uint64 dst_offset,
  ffi.Uint64 dst_size,
  ffi.Pointer<snd_pcm_channel_area_t> src_channels,
  ffi.Uint64 src_offset,
  ffi.Uint64 src_size,
  ffi.Uint32 channels,
  ffi.Uint64 frames,
  ffi.Int32 format,
);

typedef _dart_snd_pcm_areas_copy_wrap = int Function(
  ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
  int dst_offset,
  int dst_size,
  ffi.Pointer<snd_pcm_channel_area_t> src_channels,
  int src_offset,
  int src_size,
  int channels,
  int frames,
  int format,
);

typedef _c_snd_pcm_hook_get_pcm = ffi.Pointer<snd_pcm_> Function(
  ffi.Pointer<snd_pcm_hook_> hook,
);

typedef _dart_snd_pcm_hook_get_pcm = ffi.Pointer<snd_pcm_> Function(
  ffi.Pointer<snd_pcm_hook_> hook,
);

typedef _c_snd_pcm_hook_get_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_pcm_hook_> hook,
);

typedef _dart_snd_pcm_hook_get_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_pcm_hook_> hook,
);

typedef _c_snd_pcm_hook_set_private = ffi.Void Function(
  ffi.Pointer<snd_pcm_hook_> hook,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_snd_pcm_hook_set_private = void Function(
  ffi.Pointer<snd_pcm_hook_> hook,
  ffi.Pointer<ffi.Void> private_data,
);

typedef snd_pcm_hook_func_t = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hook_>,
);

typedef _c_snd_pcm_hook_add = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_hook_>> hookp,
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Int32 type,
  ffi.Pointer<ffi.NativeFunction<snd_pcm_hook_func_t>> func,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_snd_pcm_hook_add = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_hook_>> hookp,
  ffi.Pointer<snd_pcm_> pcm,
  int type,
  ffi.Pointer<ffi.NativeFunction<snd_pcm_hook_func_t>> func,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _c_snd_pcm_hook_remove = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hook_> hook,
);

typedef _dart_snd_pcm_hook_remove = int Function(
  ffi.Pointer<snd_pcm_hook_> hook,
);

typedef _c_snd_pcm_meter_get_bufsize = ffi.Uint64 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_meter_get_bufsize = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_meter_get_channels = ffi.Uint32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_meter_get_channels = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_meter_get_rate = ffi.Uint32 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_meter_get_rate = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_meter_get_now = ffi.Uint64 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_meter_get_now = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_meter_get_boundary = ffi.Uint64 Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _dart_snd_pcm_meter_get_boundary = int Function(
  ffi.Pointer<snd_pcm_> pcm,
);

typedef _c_snd_pcm_meter_add_scope = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_scope_> scope,
);

typedef _dart_snd_pcm_meter_add_scope = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_scope_> scope,
);

typedef _c_snd_pcm_meter_search_scope = ffi.Pointer<snd_pcm_scope_> Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_pcm_meter_search_scope = ffi.Pointer<snd_pcm_scope_> Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_pcm_scope_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_scope_>> ptr,
);

typedef _dart_snd_pcm_scope_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_pcm_scope_>> ptr,
);

typedef _c_snd_pcm_scope_set_ops = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_> scope,
  ffi.Pointer<snd_pcm_scope_ops_t> val,
);

typedef _dart_snd_pcm_scope_set_ops = void Function(
  ffi.Pointer<snd_pcm_scope_> scope,
  ffi.Pointer<snd_pcm_scope_ops_t> val,
);

typedef _c_snd_pcm_scope_set_name = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_> scope,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_snd_pcm_scope_set_name = void Function(
  ffi.Pointer<snd_pcm_scope_> scope,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_snd_pcm_scope_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_scope_> scope,
);

typedef _dart_snd_pcm_scope_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_pcm_scope_> scope,
);

typedef _c_snd_pcm_scope_get_callback_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_pcm_scope_> scope,
);

typedef _dart_snd_pcm_scope_get_callback_private = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<snd_pcm_scope_> scope,
);

typedef _c_snd_pcm_scope_set_callback_private = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_> scope,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_snd_pcm_scope_set_callback_private = void Function(
  ffi.Pointer<snd_pcm_scope_> scope,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_snd_pcm_scope_s16_open = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<snd_pcm_scope_>> scopep,
);

typedef _dart_snd_pcm_scope_s16_open = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<snd_pcm_scope_>> scopep,
);

typedef _c_snd_pcm_scope_s16_get_channel_buffer = ffi.Pointer<ffi.Int16>
    Function(
  ffi.Pointer<snd_pcm_scope_> scope,
  ffi.Uint32 channel,
);

typedef _dart_snd_pcm_scope_s16_get_channel_buffer = ffi.Pointer<ffi.Int16>
    Function(
  ffi.Pointer<snd_pcm_scope_> scope,
  int channel,
);

typedef _c_snd_spcm_init = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Uint32 rate,
  ffi.Uint32 channels,
  ffi.Int32 format,
  ffi.Int32 subformat,
  ffi.Int32 latency,
  ffi.Int32 _access,
  ffi.Int32 xrun_type,
);

typedef _dart_snd_spcm_init = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  int rate,
  int channels,
  int format,
  int subformat,
  int latency,
  int _access,
  int xrun_type,
);

typedef _c_snd_spcm_init_duplex = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> playback_pcm,
  ffi.Pointer<snd_pcm_> capture_pcm,
  ffi.Uint32 rate,
  ffi.Uint32 channels,
  ffi.Int32 format,
  ffi.Int32 subformat,
  ffi.Int32 latency,
  ffi.Int32 _access,
  ffi.Int32 xrun_type,
  ffi.Int32 duplex_type,
);

typedef _dart_snd_spcm_init_duplex = int Function(
  ffi.Pointer<snd_pcm_> playback_pcm,
  ffi.Pointer<snd_pcm_> capture_pcm,
  int rate,
  int channels,
  int format,
  int subformat,
  int latency,
  int _access,
  int xrun_type,
  int duplex_type,
);

typedef _c_snd_spcm_init_get_params = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Uint32> rate,
  ffi.Pointer<ffi.Uint64> buffer_size,
  ffi.Pointer<ffi.Uint64> period_size,
);

typedef _dart_snd_spcm_init_get_params = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<ffi.Uint32> rate,
  ffi.Pointer<ffi.Uint64> buffer_size,
  ffi.Pointer<ffi.Uint64> period_size,
);

typedef _c_snd_pcm_start_mode_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 mode,
);

typedef _dart_snd_pcm_start_mode_name = ffi.Pointer<ffi.Int8> Function(
  int mode,
);

typedef _c_snd_pcm_xrun_mode_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 mode,
);

typedef _dart_snd_pcm_xrun_mode_name = ffi.Pointer<ffi.Int8> Function(
  int mode,
);

typedef _c_snd_pcm_sw_params_set_start_mode = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_sw_params_set_start_mode = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_start_mode = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
);

typedef _dart_snd_pcm_sw_params_get_start_mode = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
);

typedef _c_snd_pcm_sw_params_set_xrun_mode = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_pcm_sw_params_set_xrun_mode = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_xrun_mode = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
);

typedef _dart_snd_pcm_sw_params_get_xrun_mode = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
);

typedef _c_snd_pcm_sw_params_set_xfer_align = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Uint64 val,
);

typedef _dart_snd_pcm_sw_params_set_xfer_align = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_xfer_align = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _dart_snd_pcm_sw_params_get_xfer_align = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint64> val,
);

typedef _c_snd_pcm_sw_params_set_sleep_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Uint32 val,
);

typedef _dart_snd_pcm_sw_params_set_sleep_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_sw_params_> params,
  int val,
);

typedef _c_snd_pcm_sw_params_get_sleep_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _dart_snd_pcm_sw_params_get_sleep_min = int Function(
  ffi.Pointer<snd_pcm_sw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
);

typedef _c_snd_pcm_hw_params_get_tick_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_tick_time = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_tick_time_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_tick_time_min = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_get_tick_time_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_get_tick_time_max = int Function(
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_test_tick_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_test_tick_time = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_tick_time = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Uint32 val,
  ffi.Int32 dir,
);

typedef _dart_snd_pcm_hw_params_set_tick_time = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  int val,
  int dir,
);

typedef _c_snd_pcm_hw_params_set_tick_time_min = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_tick_time_min = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_tick_time_max = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_tick_time_max = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_tick_time_minmax = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _dart_snd_pcm_hw_params_set_tick_time_minmax = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> min,
  ffi.Pointer<ffi.Int32> mindir,
  ffi.Pointer<ffi.Uint32> max,
  ffi.Pointer<ffi.Int32> maxdir,
);

typedef _c_snd_pcm_hw_params_set_tick_time_near = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_tick_time_near = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_tick_time_first = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_tick_time_first = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_pcm_hw_params_set_tick_time_last = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _dart_snd_pcm_hw_params_set_tick_time_last = int Function(
  ffi.Pointer<snd_pcm_> pcm,
  ffi.Pointer<snd_pcm_hw_params_> params,
  ffi.Pointer<ffi.Uint32> val,
  ffi.Pointer<ffi.Int32> dir,
);

typedef _c_snd_rawmidi_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_>> in_rmidi,
  ffi.Pointer<ffi.Pointer<snd_rawmidi_>> out_rmidi,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
);

typedef _dart_snd_rawmidi_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_>> in_rmidi,
  ffi.Pointer<ffi.Pointer<snd_rawmidi_>> out_rmidi,
  ffi.Pointer<ffi.Int8> name,
  int mode,
);

typedef _c_snd_rawmidi_open_lconf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_>> in_rmidi,
  ffi.Pointer<ffi.Pointer<snd_rawmidi_>> out_rmidi,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _dart_snd_rawmidi_open_lconf = int Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_>> in_rmidi,
  ffi.Pointer<ffi.Pointer<snd_rawmidi_>> out_rmidi,
  ffi.Pointer<ffi.Int8> name,
  int mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _c_snd_rawmidi_close = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _dart_snd_rawmidi_close = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _c_snd_rawmidi_poll_descriptors_count = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _dart_snd_rawmidi_poll_descriptors_count = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _c_snd_rawmidi_poll_descriptors = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 space,
);

typedef _dart_snd_rawmidi_poll_descriptors = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<pollfd> pfds,
  int space,
);

typedef _c_snd_rawmidi_poll_descriptors_revents = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rawmidi,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 nfds,
  ffi.Pointer<ffi.Uint16> revent,
);

typedef _dart_snd_rawmidi_poll_descriptors_revents = int Function(
  ffi.Pointer<snd_rawmidi_> rawmidi,
  ffi.Pointer<pollfd> pfds,
  int nfds,
  ffi.Pointer<ffi.Uint16> revent,
);

typedef _c_snd_rawmidi_nonblock = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Int32 nonblock,
);

typedef _dart_snd_rawmidi_nonblock = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  int nonblock,
);

typedef _c_snd_rawmidi_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_rawmidi_info_sizeof = int Function();

typedef _c_snd_rawmidi_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_info_>> ptr,
);

typedef _dart_snd_rawmidi_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_info_>> ptr,
);

typedef _c_snd_rawmidi_info_free = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_free = void Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_copy = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_info_> dst,
  ffi.Pointer<snd_rawmidi_info_> src,
);

typedef _dart_snd_rawmidi_info_copy = void Function(
  ffi.Pointer<snd_rawmidi_info_> dst,
  ffi.Pointer<snd_rawmidi_info_> src,
);

typedef _c_snd_rawmidi_info_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_device = int Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_subdevice = ffi.Uint32 Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_subdevice = int Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_stream = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_stream = int Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_card = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_card = int Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_flags = ffi.Uint32 Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_flags = int Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_subdevice_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_subdevice_name = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_subdevices_count = ffi.Uint32 Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_subdevices_count = int Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_get_subdevices_avail = ffi.Uint32 Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _dart_snd_rawmidi_info_get_subdevices_avail = int Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
);

typedef _c_snd_rawmidi_info_set_device = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_rawmidi_info_set_device = void Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
  int val,
);

typedef _c_snd_rawmidi_info_set_subdevice = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_rawmidi_info_set_subdevice = void Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
  int val,
);

typedef _c_snd_rawmidi_info_set_stream = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
  ffi.Int32 val,
);

typedef _dart_snd_rawmidi_info_set_stream = void Function(
  ffi.Pointer<snd_rawmidi_info_> obj,
  int val,
);

typedef _c_snd_rawmidi_info = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_info_> info,
);

typedef _dart_snd_rawmidi_info = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_info_> info,
);

typedef _c_snd_rawmidi_params_sizeof = ffi.Int32 Function();

typedef _dart_snd_rawmidi_params_sizeof = int Function();

typedef _c_snd_rawmidi_params_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_params_>> ptr,
);

typedef _dart_snd_rawmidi_params_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_params_>> ptr,
);

typedef _c_snd_rawmidi_params_free = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_params_> obj,
);

typedef _dart_snd_rawmidi_params_free = void Function(
  ffi.Pointer<snd_rawmidi_params_> obj,
);

typedef _c_snd_rawmidi_params_copy = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_params_> dst,
  ffi.Pointer<snd_rawmidi_params_> src,
);

typedef _dart_snd_rawmidi_params_copy = void Function(
  ffi.Pointer<snd_rawmidi_params_> dst,
  ffi.Pointer<snd_rawmidi_params_> src,
);

typedef _c_snd_rawmidi_params_set_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_rawmidi_params_set_buffer_size = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
  int val,
);

typedef _c_snd_rawmidi_params_get_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _dart_snd_rawmidi_params_get_buffer_size = int Function(
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _c_snd_rawmidi_params_set_avail_min = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_rawmidi_params_set_avail_min = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
  int val,
);

typedef _c_snd_rawmidi_params_get_avail_min = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _dart_snd_rawmidi_params_get_avail_min = int Function(
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _c_snd_rawmidi_params_set_no_active_sensing = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
  ffi.Int32 val,
);

typedef _dart_snd_rawmidi_params_set_no_active_sensing = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
  int val,
);

typedef _c_snd_rawmidi_params_get_no_active_sensing = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _dart_snd_rawmidi_params_get_no_active_sensing = int Function(
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _c_snd_rawmidi_params = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _dart_snd_rawmidi_params = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _c_snd_rawmidi_params_current = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _dart_snd_rawmidi_params_current = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_params_> params,
);

typedef _c_snd_rawmidi_status_sizeof = ffi.Int32 Function();

typedef _dart_snd_rawmidi_status_sizeof = int Function();

typedef _c_snd_rawmidi_status_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_status_>> ptr,
);

typedef _dart_snd_rawmidi_status_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_rawmidi_status_>> ptr,
);

typedef _c_snd_rawmidi_status_free = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_status_> obj,
);

typedef _dart_snd_rawmidi_status_free = void Function(
  ffi.Pointer<snd_rawmidi_status_> obj,
);

typedef _c_snd_rawmidi_status_copy = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_status_> dst,
  ffi.Pointer<snd_rawmidi_status_> src,
);

typedef _dart_snd_rawmidi_status_copy = void Function(
  ffi.Pointer<snd_rawmidi_status_> dst,
  ffi.Pointer<snd_rawmidi_status_> src,
);

typedef _c_snd_rawmidi_status_get_tstamp = ffi.Void Function(
  ffi.Pointer<snd_rawmidi_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _dart_snd_rawmidi_status_get_tstamp = void Function(
  ffi.Pointer<snd_rawmidi_status_> obj,
  ffi.Pointer<timespec> ptr,
);

typedef _c_snd_rawmidi_status_get_avail = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_status_> obj,
);

typedef _dart_snd_rawmidi_status_get_avail = int Function(
  ffi.Pointer<snd_rawmidi_status_> obj,
);

typedef _c_snd_rawmidi_status_get_xruns = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_status_> obj,
);

typedef _dart_snd_rawmidi_status_get_xruns = int Function(
  ffi.Pointer<snd_rawmidi_status_> obj,
);

typedef _c_snd_rawmidi_status = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_status_> status,
);

typedef _dart_snd_rawmidi_status = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<snd_rawmidi_status_> status,
);

typedef _c_snd_rawmidi_drain = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _dart_snd_rawmidi_drain = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _c_snd_rawmidi_drop = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _dart_snd_rawmidi_drop = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _c_snd_rawmidi_write = ffi.Int64 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Int32 size,
);

typedef _dart_snd_rawmidi_write = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_rawmidi_read = ffi.Int64 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Int32 size,
);

typedef _dart_snd_rawmidi_read = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_rawmidi_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _dart_snd_rawmidi_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _c_snd_rawmidi_type = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _dart_snd_rawmidi_type = int Function(
  ffi.Pointer<snd_rawmidi_> rmidi,
);

typedef _c_snd_rawmidi_stream = ffi.Int32 Function(
  ffi.Pointer<snd_rawmidi_> rawmidi,
);

typedef _dart_snd_rawmidi_stream = int Function(
  ffi.Pointer<snd_rawmidi_> rawmidi,
);

typedef _c_snd_timer_query_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_query_>> handle,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
);

typedef _dart_snd_timer_query_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_query_>> handle,
  ffi.Pointer<ffi.Int8> name,
  int mode,
);

typedef _c_snd_timer_query_open_lconf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_query_>> handle,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _dart_snd_timer_query_open_lconf = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_query_>> handle,
  ffi.Pointer<ffi.Int8> name,
  int mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _c_snd_timer_query_close = ffi.Int32 Function(
  ffi.Pointer<snd_timer_query_> handle,
);

typedef _dart_snd_timer_query_close = int Function(
  ffi.Pointer<snd_timer_query_> handle,
);

typedef _c_snd_timer_query_next_device = ffi.Int32 Function(
  ffi.Pointer<snd_timer_query_> handle,
  ffi.Pointer<snd_timer_id_> tid,
);

typedef _dart_snd_timer_query_next_device = int Function(
  ffi.Pointer<snd_timer_query_> handle,
  ffi.Pointer<snd_timer_id_> tid,
);

typedef _c_snd_timer_query_info = ffi.Int32 Function(
  ffi.Pointer<snd_timer_query_> handle,
  ffi.Pointer<snd_timer_ginfo_> info,
);

typedef _dart_snd_timer_query_info = int Function(
  ffi.Pointer<snd_timer_query_> handle,
  ffi.Pointer<snd_timer_ginfo_> info,
);

typedef _c_snd_timer_query_params = ffi.Int32 Function(
  ffi.Pointer<snd_timer_query_> handle,
  ffi.Pointer<snd_timer_gparams_> params,
);

typedef _dart_snd_timer_query_params = int Function(
  ffi.Pointer<snd_timer_query_> handle,
  ffi.Pointer<snd_timer_gparams_> params,
);

typedef _c_snd_timer_query_status = ffi.Int32 Function(
  ffi.Pointer<snd_timer_query_> handle,
  ffi.Pointer<snd_timer_gstatus_> status,
);

typedef _dart_snd_timer_query_status = int Function(
  ffi.Pointer<snd_timer_query_> handle,
  ffi.Pointer<snd_timer_gstatus_> status,
);

typedef _c_snd_timer_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_>> handle,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
);

typedef _dart_snd_timer_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_>> handle,
  ffi.Pointer<ffi.Int8> name,
  int mode,
);

typedef _c_snd_timer_open_lconf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_>> handle,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _dart_snd_timer_open_lconf = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_>> handle,
  ffi.Pointer<ffi.Int8> name,
  int mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _c_snd_timer_close = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _dart_snd_timer_close = int Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _c_snd_async_add_timer_handler = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
  ffi.Pointer<snd_timer_> timer,
  ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_snd_async_add_timer_handler = int Function(
  ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
  ffi.Pointer<snd_timer_> timer,
  ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _c_snd_async_handler_get_timer = ffi.Pointer<snd_timer_> Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _dart_snd_async_handler_get_timer = ffi.Pointer<snd_timer_> Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _c_snd_timer_poll_descriptors_count = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _dart_snd_timer_poll_descriptors_count = int Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _c_snd_timer_poll_descriptors = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 space,
);

typedef _dart_snd_timer_poll_descriptors = int Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<pollfd> pfds,
  int space,
);

typedef _c_snd_timer_poll_descriptors_revents = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> timer,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _dart_snd_timer_poll_descriptors_revents = int Function(
  ffi.Pointer<snd_timer_> timer,
  ffi.Pointer<pollfd> pfds,
  int nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _c_snd_timer_info = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<snd_timer_info_> timer,
);

typedef _dart_snd_timer_info = int Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<snd_timer_info_> timer,
);

typedef _c_snd_timer_params = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<snd_timer_params_> params,
);

typedef _dart_snd_timer_params = int Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<snd_timer_params_> params,
);

typedef _c_snd_timer_status = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<snd_timer_status_> status,
);

typedef _dart_snd_timer_status = int Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<snd_timer_status_> status,
);

typedef _c_snd_timer_start = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _dart_snd_timer_start = int Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _c_snd_timer_stop = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _dart_snd_timer_stop = int Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _c_snd_timer_continue = ffi.Int32 Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _dart_snd_timer_continue = int Function(
  ffi.Pointer<snd_timer_> handle,
);

typedef _c_snd_timer_read = ffi.Int64 Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Int32 size,
);

typedef _dart_snd_timer_read = int Function(
  ffi.Pointer<snd_timer_> handle,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_timer_id_sizeof = ffi.Int32 Function();

typedef _dart_snd_timer_id_sizeof = int Function();

typedef _c_snd_timer_id_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_id_>> ptr,
);

typedef _dart_snd_timer_id_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_id_>> ptr,
);

typedef _c_snd_timer_id_free = ffi.Void Function(
  ffi.Pointer<snd_timer_id_> obj,
);

typedef _dart_snd_timer_id_free = void Function(
  ffi.Pointer<snd_timer_id_> obj,
);

typedef _c_snd_timer_id_copy = ffi.Void Function(
  ffi.Pointer<snd_timer_id_> dst,
  ffi.Pointer<snd_timer_id_> src,
);

typedef _dart_snd_timer_id_copy = void Function(
  ffi.Pointer<snd_timer_id_> dst,
  ffi.Pointer<snd_timer_id_> src,
);

typedef _c_snd_timer_id_set_class = ffi.Void Function(
  ffi.Pointer<snd_timer_id_> id,
  ffi.Int32 dev_class,
);

typedef _dart_snd_timer_id_set_class = void Function(
  ffi.Pointer<snd_timer_id_> id,
  int dev_class,
);

typedef _c_snd_timer_id_get_class = ffi.Int32 Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _dart_snd_timer_id_get_class = int Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _c_snd_timer_id_set_sclass = ffi.Void Function(
  ffi.Pointer<snd_timer_id_> id,
  ffi.Int32 dev_sclass,
);

typedef _dart_snd_timer_id_set_sclass = void Function(
  ffi.Pointer<snd_timer_id_> id,
  int dev_sclass,
);

typedef _c_snd_timer_id_get_sclass = ffi.Int32 Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _dart_snd_timer_id_get_sclass = int Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _c_snd_timer_id_set_card = ffi.Void Function(
  ffi.Pointer<snd_timer_id_> id,
  ffi.Int32 card,
);

typedef _dart_snd_timer_id_set_card = void Function(
  ffi.Pointer<snd_timer_id_> id,
  int card,
);

typedef _c_snd_timer_id_get_card = ffi.Int32 Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _dart_snd_timer_id_get_card = int Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _c_snd_timer_id_set_device = ffi.Void Function(
  ffi.Pointer<snd_timer_id_> id,
  ffi.Int32 device,
);

typedef _dart_snd_timer_id_set_device = void Function(
  ffi.Pointer<snd_timer_id_> id,
  int device,
);

typedef _c_snd_timer_id_get_device = ffi.Int32 Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _dart_snd_timer_id_get_device = int Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _c_snd_timer_id_set_subdevice = ffi.Void Function(
  ffi.Pointer<snd_timer_id_> id,
  ffi.Int32 subdevice,
);

typedef _dart_snd_timer_id_set_subdevice = void Function(
  ffi.Pointer<snd_timer_id_> id,
  int subdevice,
);

typedef _c_snd_timer_id_get_subdevice = ffi.Int32 Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _dart_snd_timer_id_get_subdevice = int Function(
  ffi.Pointer<snd_timer_id_> id,
);

typedef _c_snd_timer_ginfo_sizeof = ffi.Int32 Function();

typedef _dart_snd_timer_ginfo_sizeof = int Function();

typedef _c_snd_timer_ginfo_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_ginfo_>> ptr,
);

typedef _dart_snd_timer_ginfo_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_ginfo_>> ptr,
);

typedef _c_snd_timer_ginfo_free = ffi.Void Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_free = void Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_copy = ffi.Void Function(
  ffi.Pointer<snd_timer_ginfo_> dst,
  ffi.Pointer<snd_timer_ginfo_> src,
);

typedef _dart_snd_timer_ginfo_copy = void Function(
  ffi.Pointer<snd_timer_ginfo_> dst,
  ffi.Pointer<snd_timer_ginfo_> src,
);

typedef _c_snd_timer_ginfo_set_tid = ffi.Int32 Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
  ffi.Pointer<snd_timer_id_> tid,
);

typedef _dart_snd_timer_ginfo_set_tid = int Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
  ffi.Pointer<snd_timer_id_> tid,
);

typedef _c_snd_timer_ginfo_get_tid = ffi.Pointer<snd_timer_id_> Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_tid = ffi.Pointer<snd_timer_id_> Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_get_flags = ffi.Uint32 Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_flags = int Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_get_card = ffi.Int32 Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_card = int Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_get_resolution = ffi.Uint64 Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_resolution = int Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_get_resolution_min = ffi.Uint64 Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_resolution_min = int Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_get_resolution_max = ffi.Uint64 Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_resolution_max = int Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_ginfo_get_clients = ffi.Uint32 Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _dart_snd_timer_ginfo_get_clients = int Function(
  ffi.Pointer<snd_timer_ginfo_> obj,
);

typedef _c_snd_timer_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_timer_info_sizeof = int Function();

typedef _c_snd_timer_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_info_>> ptr,
);

typedef _dart_snd_timer_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_info_>> ptr,
);

typedef _c_snd_timer_info_free = ffi.Void Function(
  ffi.Pointer<snd_timer_info_> obj,
);

typedef _dart_snd_timer_info_free = void Function(
  ffi.Pointer<snd_timer_info_> obj,
);

typedef _c_snd_timer_info_copy = ffi.Void Function(
  ffi.Pointer<snd_timer_info_> dst,
  ffi.Pointer<snd_timer_info_> src,
);

typedef _dart_snd_timer_info_copy = void Function(
  ffi.Pointer<snd_timer_info_> dst,
  ffi.Pointer<snd_timer_info_> src,
);

typedef _c_snd_timer_info_is_slave = ffi.Int32 Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _dart_snd_timer_info_is_slave = int Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _c_snd_timer_info_get_card = ffi.Int32 Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _dart_snd_timer_info_get_card = int Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _c_snd_timer_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _dart_snd_timer_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _c_snd_timer_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _dart_snd_timer_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _c_snd_timer_info_get_resolution = ffi.Int64 Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _dart_snd_timer_info_get_resolution = int Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _c_snd_timer_params_sizeof = ffi.Int32 Function();

typedef _dart_snd_timer_params_sizeof = int Function();

typedef _c_snd_timer_params_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_params_>> ptr,
);

typedef _dart_snd_timer_params_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_params_>> ptr,
);

typedef _c_snd_timer_params_free = ffi.Void Function(
  ffi.Pointer<snd_timer_params_> obj,
);

typedef _dart_snd_timer_params_free = void Function(
  ffi.Pointer<snd_timer_params_> obj,
);

typedef _c_snd_timer_params_copy = ffi.Void Function(
  ffi.Pointer<snd_timer_params_> dst,
  ffi.Pointer<snd_timer_params_> src,
);

typedef _dart_snd_timer_params_copy = void Function(
  ffi.Pointer<snd_timer_params_> dst,
  ffi.Pointer<snd_timer_params_> src,
);

typedef _c_snd_timer_params_set_auto_start = ffi.Int32 Function(
  ffi.Pointer<snd_timer_params_> params,
  ffi.Int32 auto_start,
);

typedef _dart_snd_timer_params_set_auto_start = int Function(
  ffi.Pointer<snd_timer_params_> params,
  int auto_start,
);

typedef _c_snd_timer_params_get_auto_start = ffi.Int32 Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _dart_snd_timer_params_get_auto_start = int Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _c_snd_timer_params_set_exclusive = ffi.Int32 Function(
  ffi.Pointer<snd_timer_params_> params,
  ffi.Int32 exclusive,
);

typedef _dart_snd_timer_params_set_exclusive = int Function(
  ffi.Pointer<snd_timer_params_> params,
  int exclusive,
);

typedef _c_snd_timer_params_get_exclusive = ffi.Int32 Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _dart_snd_timer_params_get_exclusive = int Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _c_snd_timer_params_set_early_event = ffi.Int32 Function(
  ffi.Pointer<snd_timer_params_> params,
  ffi.Int32 early_event,
);

typedef _dart_snd_timer_params_set_early_event = int Function(
  ffi.Pointer<snd_timer_params_> params,
  int early_event,
);

typedef _c_snd_timer_params_get_early_event = ffi.Int32 Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _dart_snd_timer_params_get_early_event = int Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _c_snd_timer_params_set_ticks = ffi.Void Function(
  ffi.Pointer<snd_timer_params_> params,
  ffi.Int64 ticks,
);

typedef _dart_snd_timer_params_set_ticks = void Function(
  ffi.Pointer<snd_timer_params_> params,
  int ticks,
);

typedef _c_snd_timer_params_get_ticks = ffi.Int64 Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _dart_snd_timer_params_get_ticks = int Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _c_snd_timer_params_set_queue_size = ffi.Void Function(
  ffi.Pointer<snd_timer_params_> params,
  ffi.Int64 queue_size,
);

typedef _dart_snd_timer_params_set_queue_size = void Function(
  ffi.Pointer<snd_timer_params_> params,
  int queue_size,
);

typedef _c_snd_timer_params_get_queue_size = ffi.Int64 Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _dart_snd_timer_params_get_queue_size = int Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _c_snd_timer_params_set_filter = ffi.Void Function(
  ffi.Pointer<snd_timer_params_> params,
  ffi.Uint32 filter,
);

typedef _dart_snd_timer_params_set_filter = void Function(
  ffi.Pointer<snd_timer_params_> params,
  int filter,
);

typedef _c_snd_timer_params_get_filter = ffi.Uint32 Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _dart_snd_timer_params_get_filter = int Function(
  ffi.Pointer<snd_timer_params_> params,
);

typedef _c_snd_timer_status_sizeof = ffi.Int32 Function();

typedef _dart_snd_timer_status_sizeof = int Function();

typedef _c_snd_timer_status_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_timer_status_>> ptr,
);

typedef _dart_snd_timer_status_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_timer_status_>> ptr,
);

typedef _c_snd_timer_status_free = ffi.Void Function(
  ffi.Pointer<snd_timer_status_> obj,
);

typedef _dart_snd_timer_status_free = void Function(
  ffi.Pointer<snd_timer_status_> obj,
);

typedef _c_snd_timer_status_copy = ffi.Void Function(
  ffi.Pointer<snd_timer_status_> dst,
  ffi.Pointer<snd_timer_status_> src,
);

typedef _dart_snd_timer_status_copy = void Function(
  ffi.Pointer<snd_timer_status_> dst,
  ffi.Pointer<snd_timer_status_> src,
);

typedef _c_snd_timer_status_get_timestamp = timespec Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _dart_snd_timer_status_get_timestamp = timespec Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _c_snd_timer_status_get_resolution = ffi.Int64 Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _dart_snd_timer_status_get_resolution = int Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _c_snd_timer_status_get_lost = ffi.Int64 Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _dart_snd_timer_status_get_lost = int Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _c_snd_timer_status_get_overrun = ffi.Int64 Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _dart_snd_timer_status_get_overrun = int Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _c_snd_timer_status_get_queue = ffi.Int64 Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _dart_snd_timer_status_get_queue = int Function(
  ffi.Pointer<snd_timer_status_> status,
);

typedef _c_snd_timer_info_get_ticks = ffi.Int64 Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _dart_snd_timer_info_get_ticks = int Function(
  ffi.Pointer<snd_timer_info_> info,
);

typedef _c_snd_hwdep_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_hwdep_>> hwdep,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
);

typedef _dart_snd_hwdep_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_hwdep_>> hwdep,
  ffi.Pointer<ffi.Int8> name,
  int mode,
);

typedef _c_snd_hwdep_close = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
);

typedef _dart_snd_hwdep_close = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
);

typedef _c_snd_hwdep_poll_descriptors = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 space,
);

typedef _dart_snd_hwdep_poll_descriptors = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<pollfd> pfds,
  int space,
);

typedef _c_snd_hwdep_poll_descriptors_count = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
);

typedef _dart_snd_hwdep_poll_descriptors_count = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
);

typedef _c_snd_hwdep_poll_descriptors_revents = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _dart_snd_hwdep_poll_descriptors_revents = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<pollfd> pfds,
  int nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _c_snd_hwdep_nonblock = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Int32 nonblock,
);

typedef _dart_snd_hwdep_nonblock = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  int nonblock,
);

typedef _c_snd_hwdep_info = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<snd_hwdep_info_> info,
);

typedef _dart_snd_hwdep_info = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<snd_hwdep_info_> info,
);

typedef _c_snd_hwdep_dsp_status = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<snd_hwdep_dsp_status_> status,
);

typedef _dart_snd_hwdep_dsp_status = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<snd_hwdep_dsp_status_> status,
);

typedef _c_snd_hwdep_dsp_load = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<snd_hwdep_dsp_image_> block,
);

typedef _dart_snd_hwdep_dsp_load = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<snd_hwdep_dsp_image_> block,
);

typedef _c_snd_hwdep_ioctl = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Uint32 request,
  ffi.Pointer<ffi.Void> arg,
);

typedef _dart_snd_hwdep_ioctl = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  int request,
  ffi.Pointer<ffi.Void> arg,
);

typedef _c_snd_hwdep_write = ffi.Int64 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Int32 size,
);

typedef _dart_snd_hwdep_write = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_hwdep_read = ffi.Int64 Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Int32 size,
);

typedef _dart_snd_hwdep_read = int Function(
  ffi.Pointer<snd_hwdep_> hwdep,
  ffi.Pointer<ffi.Void> buffer,
  int size,
);

typedef _c_snd_hwdep_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_hwdep_info_sizeof = int Function();

typedef _c_snd_hwdep_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_hwdep_info_>> ptr,
);

typedef _dart_snd_hwdep_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_hwdep_info_>> ptr,
);

typedef _c_snd_hwdep_info_free = ffi.Void Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _dart_snd_hwdep_info_free = void Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _c_snd_hwdep_info_copy = ffi.Void Function(
  ffi.Pointer<snd_hwdep_info_> dst,
  ffi.Pointer<snd_hwdep_info_> src,
);

typedef _dart_snd_hwdep_info_copy = void Function(
  ffi.Pointer<snd_hwdep_info_> dst,
  ffi.Pointer<snd_hwdep_info_> src,
);

typedef _c_snd_hwdep_info_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _dart_snd_hwdep_info_get_device = int Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _c_snd_hwdep_info_get_card = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _dart_snd_hwdep_info_get_card = int Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _c_snd_hwdep_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _dart_snd_hwdep_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _c_snd_hwdep_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _dart_snd_hwdep_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _c_snd_hwdep_info_get_iface = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _dart_snd_hwdep_info_get_iface = int Function(
  ffi.Pointer<snd_hwdep_info_> obj,
);

typedef _c_snd_hwdep_info_set_device = ffi.Void Function(
  ffi.Pointer<snd_hwdep_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_hwdep_info_set_device = void Function(
  ffi.Pointer<snd_hwdep_info_> obj,
  int val,
);

typedef _c_snd_hwdep_dsp_status_sizeof = ffi.Int32 Function();

typedef _dart_snd_hwdep_dsp_status_sizeof = int Function();

typedef _c_snd_hwdep_dsp_status_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_status_>> ptr,
);

typedef _dart_snd_hwdep_dsp_status_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_status_>> ptr,
);

typedef _c_snd_hwdep_dsp_status_free = ffi.Void Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _dart_snd_hwdep_dsp_status_free = void Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _c_snd_hwdep_dsp_status_copy = ffi.Void Function(
  ffi.Pointer<snd_hwdep_dsp_status_> dst,
  ffi.Pointer<snd_hwdep_dsp_status_> src,
);

typedef _dart_snd_hwdep_dsp_status_copy = void Function(
  ffi.Pointer<snd_hwdep_dsp_status_> dst,
  ffi.Pointer<snd_hwdep_dsp_status_> src,
);

typedef _c_snd_hwdep_dsp_status_get_version = ffi.Uint32 Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _dart_snd_hwdep_dsp_status_get_version = int Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _c_snd_hwdep_dsp_status_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _dart_snd_hwdep_dsp_status_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _c_snd_hwdep_dsp_status_get_num_dsps = ffi.Uint32 Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _dart_snd_hwdep_dsp_status_get_num_dsps = int Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _c_snd_hwdep_dsp_status_get_dsp_loaded = ffi.Uint32 Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _dart_snd_hwdep_dsp_status_get_dsp_loaded = int Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _c_snd_hwdep_dsp_status_get_chip_ready = ffi.Uint32 Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _dart_snd_hwdep_dsp_status_get_chip_ready = int Function(
  ffi.Pointer<snd_hwdep_dsp_status_> obj,
);

typedef _c_snd_hwdep_dsp_image_sizeof = ffi.Int32 Function();

typedef _dart_snd_hwdep_dsp_image_sizeof = int Function();

typedef _c_snd_hwdep_dsp_image_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_image_>> ptr,
);

typedef _dart_snd_hwdep_dsp_image_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_image_>> ptr,
);

typedef _c_snd_hwdep_dsp_image_free = ffi.Void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _dart_snd_hwdep_dsp_image_free = void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _c_snd_hwdep_dsp_image_copy = ffi.Void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> dst,
  ffi.Pointer<snd_hwdep_dsp_image_> src,
);

typedef _dart_snd_hwdep_dsp_image_copy = void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> dst,
  ffi.Pointer<snd_hwdep_dsp_image_> src,
);

typedef _c_snd_hwdep_dsp_image_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _dart_snd_hwdep_dsp_image_get_index = int Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _c_snd_hwdep_dsp_image_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _dart_snd_hwdep_dsp_image_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _c_snd_hwdep_dsp_image_get_image = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _dart_snd_hwdep_dsp_image_get_image = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _c_snd_hwdep_dsp_image_get_length = ffi.Int32 Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _dart_snd_hwdep_dsp_image_get_length = int Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
);

typedef _c_snd_hwdep_dsp_image_set_index = ffi.Void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ffi.Uint32 _index,
);

typedef _dart_snd_hwdep_dsp_image_set_index = void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
  int _index,
);

typedef _c_snd_hwdep_dsp_image_set_name = ffi.Void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_hwdep_dsp_image_set_name = void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_hwdep_dsp_image_set_image = ffi.Void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ffi.Pointer<ffi.Void> buffer,
);

typedef _dart_snd_hwdep_dsp_image_set_image = void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ffi.Pointer<ffi.Void> buffer,
);

typedef _c_snd_hwdep_dsp_image_set_length = ffi.Void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
  ffi.Int32 length,
);

typedef _dart_snd_hwdep_dsp_image_set_length = void Function(
  ffi.Pointer<snd_hwdep_dsp_image_> obj,
  int length,
);

typedef _c_snd_card_load = ffi.Int32 Function(
  ffi.Int32 card,
);

typedef _dart_snd_card_load = int Function(
  int card,
);

typedef _c_snd_card_next = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> card,
);

typedef _dart_snd_card_next = int Function(
  ffi.Pointer<ffi.Int32> card,
);

typedef _c_snd_card_get_index = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_card_get_index = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_card_get_name = ffi.Int32 Function(
  ffi.Int32 card,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _dart_snd_card_get_name = int Function(
  int card,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _c_snd_card_get_longname = ffi.Int32 Function(
  ffi.Int32 card,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _dart_snd_card_get_longname = int Function(
  int card,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
);

typedef _c_snd_device_name_hint = ffi.Int32 Function(
  ffi.Int32 card,
  ffi.Pointer<ffi.Int8> iface,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> hints,
);

typedef _dart_snd_device_name_hint = int Function(
  int card,
  ffi.Pointer<ffi.Int8> iface,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> hints,
);

typedef _c_snd_device_name_free_hint = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> hints,
);

typedef _dart_snd_device_name_free_hint = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> hints,
);

typedef _c_snd_device_name_get_hint = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> hint,
  ffi.Pointer<ffi.Int8> id,
);

typedef _dart_snd_device_name_get_hint = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> hint,
  ffi.Pointer<ffi.Int8> id,
);

typedef _c_snd_ctl_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
);

typedef _dart_snd_ctl_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
  ffi.Pointer<ffi.Int8> name,
  int mode,
);

typedef _c_snd_ctl_open_lconf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _dart_snd_ctl_open_lconf = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
  ffi.Pointer<ffi.Int8> name,
  int mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _c_snd_ctl_open_fallback = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
  ffi.Pointer<snd_config_> root,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> orig_name,
  ffi.Int32 mode,
);

typedef _dart_snd_ctl_open_fallback = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_>> ctl,
  ffi.Pointer<snd_config_> root,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> orig_name,
  int mode,
);

typedef _c_snd_ctl_close = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _dart_snd_ctl_close = int Function(
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _c_snd_ctl_nonblock = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Int32 nonblock,
);

typedef _dart_snd_ctl_nonblock = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  int nonblock,
);

typedef _c_snd_async_add_ctl_handler = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_snd_async_add_ctl_handler = int Function(
  ffi.Pointer<ffi.Pointer<snd_async_handler_>> handler,
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.NativeFunction<snd_async_callback_t>> callback,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _c_snd_async_handler_get_ctl = ffi.Pointer<snd_ctl_> Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _dart_snd_async_handler_get_ctl = ffi.Pointer<snd_ctl_> Function(
  ffi.Pointer<snd_async_handler_> handler,
);

typedef _c_snd_ctl_poll_descriptors_count = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _dart_snd_ctl_poll_descriptors_count = int Function(
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _c_snd_ctl_poll_descriptors = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 space,
);

typedef _dart_snd_ctl_poll_descriptors = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<pollfd> pfds,
  int space,
);

typedef _c_snd_ctl_poll_descriptors_revents = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _dart_snd_ctl_poll_descriptors_revents = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<pollfd> pfds,
  int nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _c_snd_ctl_subscribe_events = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Int32 subscribe,
);

typedef _dart_snd_ctl_subscribe_events = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  int subscribe,
);

typedef _c_snd_ctl_card_info = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_card_info_> info,
);

typedef _dart_snd_ctl_card_info = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_card_info_> info,
);

typedef _c_snd_ctl_elem_list = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_list_> list,
);

typedef _dart_snd_ctl_elem_list = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_list_> list,
);

typedef _c_snd_ctl_elem_info = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
);

typedef _dart_snd_ctl_elem_info = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
);

typedef _c_snd_ctl_elem_read = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_value_> data,
);

typedef _dart_snd_ctl_elem_read = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_value_> data,
);

typedef _c_snd_ctl_elem_write = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_value_> data,
);

typedef _dart_snd_ctl_elem_write = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_value_> data,
);

typedef _c_snd_ctl_elem_lock = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _dart_snd_ctl_elem_lock = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _c_snd_ctl_elem_unlock = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _dart_snd_ctl_elem_unlock = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _c_snd_ctl_elem_tlv_read = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Pointer<ffi.Uint32> tlv,
  ffi.Uint32 tlv_size,
);

typedef _dart_snd_ctl_elem_tlv_read = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Pointer<ffi.Uint32> tlv,
  int tlv_size,
);

typedef _c_snd_ctl_elem_tlv_write = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Pointer<ffi.Uint32> tlv,
);

typedef _dart_snd_ctl_elem_tlv_write = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Pointer<ffi.Uint32> tlv,
);

typedef _c_snd_ctl_elem_tlv_command = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Pointer<ffi.Uint32> tlv,
);

typedef _dart_snd_ctl_elem_tlv_command = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Pointer<ffi.Uint32> tlv,
);

typedef _c_snd_ctl_hwdep_next_device = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.Int32> device,
);

typedef _dart_snd_ctl_hwdep_next_device = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.Int32> device,
);

typedef _c_snd_ctl_hwdep_info = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_hwdep_info_> info,
);

typedef _dart_snd_ctl_hwdep_info = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_hwdep_info_> info,
);

typedef _c_snd_ctl_pcm_next_device = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.Int32> device,
);

typedef _dart_snd_ctl_pcm_next_device = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.Int32> device,
);

typedef _c_snd_ctl_pcm_info = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_pcm_info_> info,
);

typedef _dart_snd_ctl_pcm_info = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_pcm_info_> info,
);

typedef _c_snd_ctl_pcm_prefer_subdevice = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Int32 subdev,
);

typedef _dart_snd_ctl_pcm_prefer_subdevice = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  int subdev,
);

typedef _c_snd_ctl_rawmidi_next_device = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.Int32> device,
);

typedef _dart_snd_ctl_rawmidi_next_device = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.Int32> device,
);

typedef _c_snd_ctl_rawmidi_info = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_rawmidi_info_> info,
);

typedef _dart_snd_ctl_rawmidi_info = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_rawmidi_info_> info,
);

typedef _c_snd_ctl_rawmidi_prefer_subdevice = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Int32 subdev,
);

typedef _dart_snd_ctl_rawmidi_prefer_subdevice = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  int subdev,
);

typedef _c_snd_ctl_set_power_state = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Uint32 state,
);

typedef _dart_snd_ctl_set_power_state = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  int state,
);

typedef _c_snd_ctl_get_power_state = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.Uint32> state,
);

typedef _dart_snd_ctl_get_power_state = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<ffi.Uint32> state,
);

typedef _c_snd_ctl_read = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_event_> event,
);

typedef _dart_snd_ctl_read = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_event_> event,
);

typedef _c_snd_ctl_wait = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Int32 timeout,
);

typedef _dart_snd_ctl_wait = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  int timeout,
);

typedef _c_snd_ctl_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _dart_snd_ctl_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _c_snd_ctl_type = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _dart_snd_ctl_type = int Function(
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _c_snd_ctl_elem_type_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 type,
);

typedef _dart_snd_ctl_elem_type_name = ffi.Pointer<ffi.Int8> Function(
  int type,
);

typedef _c_snd_ctl_elem_iface_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 iface,
);

typedef _dart_snd_ctl_elem_iface_name = ffi.Pointer<ffi.Int8> Function(
  int iface,
);

typedef _c_snd_ctl_event_type_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 type,
);

typedef _dart_snd_ctl_event_type_name = ffi.Pointer<ffi.Int8> Function(
  int type,
);

typedef _c_snd_ctl_event_elem_get_mask = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_elem_get_mask = int Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_event_elem_get_numid = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_elem_get_numid = int Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_event_elem_get_id = ffi.Void Function(
  ffi.Pointer<snd_ctl_event_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _dart_snd_ctl_event_elem_get_id = void Function(
  ffi.Pointer<snd_ctl_event_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _c_snd_ctl_event_elem_get_interface = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_elem_get_interface = int Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_event_elem_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_elem_get_device = int Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_event_elem_get_subdevice = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_elem_get_subdevice = int Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_event_elem_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_elem_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_event_elem_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_elem_get_index = int Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_elem_list_alloc_space = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 entries,
);

typedef _dart_snd_ctl_elem_list_alloc_space = int Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int entries,
);

typedef _c_snd_ctl_elem_list_free_space = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _dart_snd_ctl_elem_list_free_space = void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _c_snd_ctl_ascii_elem_id_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _dart_snd_ctl_ascii_elem_id_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _c_snd_ctl_ascii_elem_id_parse = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_id_> dst,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_snd_ctl_ascii_elem_id_parse = int Function(
  ffi.Pointer<snd_ctl_elem_id_> dst,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_snd_ctl_ascii_value_parse = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> handle,
  ffi.Pointer<snd_ctl_elem_value_> dst,
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_snd_ctl_ascii_value_parse = int Function(
  ffi.Pointer<snd_ctl_> handle,
  ffi.Pointer<snd_ctl_elem_value_> dst,
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_snd_ctl_elem_id_sizeof = ffi.Int32 Function();

typedef _dart_snd_ctl_elem_id_sizeof = int Function();

typedef _c_snd_ctl_elem_id_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_elem_id_>> ptr,
);

typedef _dart_snd_ctl_elem_id_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_elem_id_>> ptr,
);

typedef _c_snd_ctl_elem_id_free = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _dart_snd_ctl_elem_id_free = void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _c_snd_ctl_elem_id_clear = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _dart_snd_ctl_elem_id_clear = void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _c_snd_ctl_elem_id_copy = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> dst,
  ffi.Pointer<snd_ctl_elem_id_> src,
);

typedef _dart_snd_ctl_elem_id_copy = void Function(
  ffi.Pointer<snd_ctl_elem_id_> dst,
  ffi.Pointer<snd_ctl_elem_id_> src,
);

typedef _c_snd_ctl_elem_id_get_numid = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _dart_snd_ctl_elem_id_get_numid = int Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _c_snd_ctl_elem_id_get_interface = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _dart_snd_ctl_elem_id_get_interface = int Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _c_snd_ctl_elem_id_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _dart_snd_ctl_elem_id_get_device = int Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _c_snd_ctl_elem_id_get_subdevice = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _dart_snd_ctl_elem_id_get_subdevice = int Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _c_snd_ctl_elem_id_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _dart_snd_ctl_elem_id_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _c_snd_ctl_elem_id_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _dart_snd_ctl_elem_id_get_index = int Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
);

typedef _c_snd_ctl_elem_id_set_numid = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_id_set_numid = void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  int val,
);

typedef _c_snd_ctl_elem_id_set_interface = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  ffi.Int32 val,
);

typedef _dart_snd_ctl_elem_id_set_interface = void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  int val,
);

typedef _c_snd_ctl_elem_id_set_device = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_id_set_device = void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  int val,
);

typedef _c_snd_ctl_elem_id_set_subdevice = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_id_set_subdevice = void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  int val,
);

typedef _c_snd_ctl_elem_id_set_name = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_snd_ctl_elem_id_set_name = void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_snd_ctl_elem_id_set_index = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_id_set_index = void Function(
  ffi.Pointer<snd_ctl_elem_id_> obj,
  int val,
);

typedef _c_snd_ctl_card_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_ctl_card_info_sizeof = int Function();

typedef _c_snd_ctl_card_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_card_info_>> ptr,
);

typedef _dart_snd_ctl_card_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_card_info_>> ptr,
);

typedef _c_snd_ctl_card_info_free = ffi.Void Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_free = void Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_card_info_clear = ffi.Void Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_clear = void Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_card_info_copy = ffi.Void Function(
  ffi.Pointer<snd_ctl_card_info_> dst,
  ffi.Pointer<snd_ctl_card_info_> src,
);

typedef _dart_snd_ctl_card_info_copy = void Function(
  ffi.Pointer<snd_ctl_card_info_> dst,
  ffi.Pointer<snd_ctl_card_info_> src,
);

typedef _c_snd_ctl_card_info_get_card = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_get_card = int Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_card_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_get_id = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_card_info_get_driver = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_get_driver = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_card_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_card_info_get_longname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_get_longname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_card_info_get_mixername = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_get_mixername = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_card_info_get_components = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _dart_snd_ctl_card_info_get_components = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_card_info_> obj,
);

typedef _c_snd_ctl_event_sizeof = ffi.Int32 Function();

typedef _dart_snd_ctl_event_sizeof = int Function();

typedef _c_snd_ctl_event_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_event_>> ptr,
);

typedef _dart_snd_ctl_event_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_event_>> ptr,
);

typedef _c_snd_ctl_event_free = ffi.Void Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_free = void Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_event_clear = ffi.Void Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_clear = void Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_event_copy = ffi.Void Function(
  ffi.Pointer<snd_ctl_event_> dst,
  ffi.Pointer<snd_ctl_event_> src,
);

typedef _dart_snd_ctl_event_copy = void Function(
  ffi.Pointer<snd_ctl_event_> dst,
  ffi.Pointer<snd_ctl_event_> src,
);

typedef _c_snd_ctl_event_get_type = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _dart_snd_ctl_event_get_type = int Function(
  ffi.Pointer<snd_ctl_event_> obj,
);

typedef _c_snd_ctl_elem_list_sizeof = ffi.Int32 Function();

typedef _dart_snd_ctl_elem_list_sizeof = int Function();

typedef _c_snd_ctl_elem_list_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_elem_list_>> ptr,
);

typedef _dart_snd_ctl_elem_list_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_elem_list_>> ptr,
);

typedef _c_snd_ctl_elem_list_free = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _dart_snd_ctl_elem_list_free = void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _c_snd_ctl_elem_list_clear = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _dart_snd_ctl_elem_list_clear = void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _c_snd_ctl_elem_list_copy = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_list_> dst,
  ffi.Pointer<snd_ctl_elem_list_> src,
);

typedef _dart_snd_ctl_elem_list_copy = void Function(
  ffi.Pointer<snd_ctl_elem_list_> dst,
  ffi.Pointer<snd_ctl_elem_list_> src,
);

typedef _c_snd_ctl_elem_list_set_offset = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_list_set_offset = void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int val,
);

typedef _c_snd_ctl_elem_list_get_used = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _dart_snd_ctl_elem_list_get_used = int Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _c_snd_ctl_elem_list_get_count = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _dart_snd_ctl_elem_list_get_count = int Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
);

typedef _c_snd_ctl_elem_list_get_id = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 idx,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _dart_snd_ctl_elem_list_get_id = void Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int idx,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _c_snd_ctl_elem_list_get_numid = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_list_get_numid = int Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_list_get_interface = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_list_get_interface = int Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_list_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_list_get_device = int Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_list_get_subdevice = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_list_get_subdevice = int Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_list_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_list_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_list_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_list_get_index = int Function(
  ffi.Pointer<snd_ctl_elem_list_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_ctl_elem_info_sizeof = int Function();

typedef _c_snd_ctl_elem_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_elem_info_>> ptr,
);

typedef _dart_snd_ctl_elem_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_elem_info_>> ptr,
);

typedef _c_snd_ctl_elem_info_free = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_free = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_clear = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_clear = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_copy = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> dst,
  ffi.Pointer<snd_ctl_elem_info_> src,
);

typedef _dart_snd_ctl_elem_info_copy = void Function(
  ffi.Pointer<snd_ctl_elem_info_> dst,
  ffi.Pointer<snd_ctl_elem_info_> src,
);

typedef _c_snd_ctl_elem_info_get_type = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_type = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_readable = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_readable = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_writable = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_writable = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_volatile = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_volatile = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_inactive = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_inactive = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_locked = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_locked = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_tlv_readable = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_tlv_readable = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_tlv_writable = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_tlv_writable = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_tlv_commandable = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_tlv_commandable = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_owner = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_owner = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_is_user = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_is_user = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_owner = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_owner = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_count = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_count = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_min = ffi.Int64 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_min = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_max = ffi.Int64 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_max = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_step = ffi.Int64 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_step = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_min64 = ffi.Int64 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_min64 = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_max64 = ffi.Int64 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_max64 = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_step64 = ffi.Int64 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_step64 = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_items = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_items = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_set_item = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_info_set_item = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  int val,
);

typedef _c_snd_ctl_elem_info_get_item_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_item_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_dimensions = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_dimensions = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_dimension = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_info_get_dimension = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_info_set_dimension = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Pointer<ffi.Int32> dimension,
);

typedef _dart_snd_ctl_elem_info_set_dimension = int Function(
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Pointer<ffi.Int32> dimension,
);

typedef _c_snd_ctl_elem_info_get_id = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _dart_snd_ctl_elem_info_get_id = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _c_snd_ctl_elem_info_get_numid = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_numid = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_interface = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_interface = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_device = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_subdevice = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_subdevice = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _dart_snd_ctl_elem_info_get_index = int Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
);

typedef _c_snd_ctl_elem_info_set_id = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _dart_snd_ctl_elem_info_set_id = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _c_snd_ctl_elem_info_set_numid = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_info_set_numid = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  int val,
);

typedef _c_snd_ctl_elem_info_set_interface = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Int32 val,
);

typedef _dart_snd_ctl_elem_info_set_interface = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  int val,
);

typedef _c_snd_ctl_elem_info_set_device = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_info_set_device = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  int val,
);

typedef _c_snd_ctl_elem_info_set_subdevice = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_info_set_subdevice = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  int val,
);

typedef _c_snd_ctl_elem_info_set_name = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_snd_ctl_elem_info_set_name = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_snd_ctl_elem_info_set_index = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_info_set_index = void Function(
  ffi.Pointer<snd_ctl_elem_info_> obj,
  int val,
);

typedef _c_snd_ctl_add_integer_elem_set = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Uint32 element_count,
  ffi.Uint32 member_count,
  ffi.Int64 min,
  ffi.Int64 max,
  ffi.Int64 step,
);

typedef _dart_snd_ctl_add_integer_elem_set = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  int element_count,
  int member_count,
  int min,
  int max,
  int step,
);

typedef _c_snd_ctl_add_integer64_elem_set = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Uint32 element_count,
  ffi.Uint32 member_count,
  ffi.Int64 min,
  ffi.Int64 max,
  ffi.Int64 step,
);

typedef _dart_snd_ctl_add_integer64_elem_set = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  int element_count,
  int member_count,
  int min,
  int max,
  int step,
);

typedef _c_snd_ctl_add_boolean_elem_set = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Uint32 element_count,
  ffi.Uint32 member_count,
);

typedef _dart_snd_ctl_add_boolean_elem_set = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  int element_count,
  int member_count,
);

typedef _c_snd_ctl_add_enumerated_elem_set = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Uint32 element_count,
  ffi.Uint32 member_count,
  ffi.Uint32 items,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> labels,
);

typedef _dart_snd_ctl_add_enumerated_elem_set = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  int element_count,
  int member_count,
  int items,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> labels,
);

typedef _c_snd_ctl_add_bytes_elem_set = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  ffi.Uint32 element_count,
  ffi.Uint32 member_count,
);

typedef _dart_snd_ctl_add_bytes_elem_set = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_info_> info,
  int element_count,
  int member_count,
);

typedef _c_snd_ctl_elem_add_integer = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Uint32 count,
  ffi.Int64 imin,
  ffi.Int64 imax,
  ffi.Int64 istep,
);

typedef _dart_snd_ctl_elem_add_integer = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  int count,
  int imin,
  int imax,
  int istep,
);

typedef _c_snd_ctl_elem_add_integer64 = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Uint32 count,
  ffi.Int64 imin,
  ffi.Int64 imax,
  ffi.Int64 istep,
);

typedef _dart_snd_ctl_elem_add_integer64 = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  int count,
  int imin,
  int imax,
  int istep,
);

typedef _c_snd_ctl_elem_add_boolean = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Uint32 count,
);

typedef _dart_snd_ctl_elem_add_boolean = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  int count,
);

typedef _c_snd_ctl_elem_add_enumerated = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Uint32 count,
  ffi.Uint32 items,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> names,
);

typedef _dart_snd_ctl_elem_add_enumerated = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  int count,
  int items,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> names,
);

typedef _c_snd_ctl_elem_add_iec958 = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _dart_snd_ctl_elem_add_iec958 = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _c_snd_ctl_elem_remove = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _dart_snd_ctl_elem_remove = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _c_snd_ctl_elem_value_sizeof = ffi.Int32 Function();

typedef _dart_snd_ctl_elem_value_sizeof = int Function();

typedef _c_snd_ctl_elem_value_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_elem_value_>> ptr,
);

typedef _dart_snd_ctl_elem_value_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_ctl_elem_value_>> ptr,
);

typedef _c_snd_ctl_elem_value_free = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_free = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_clear = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_clear = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_copy = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> dst,
  ffi.Pointer<snd_ctl_elem_value_> src,
);

typedef _dart_snd_ctl_elem_value_copy = void Function(
  ffi.Pointer<snd_ctl_elem_value_> dst,
  ffi.Pointer<snd_ctl_elem_value_> src,
);

typedef _c_snd_ctl_elem_value_compare = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_value_> left,
  ffi.Pointer<snd_ctl_elem_value_> right,
);

typedef _dart_snd_ctl_elem_value_compare = int Function(
  ffi.Pointer<snd_ctl_elem_value_> left,
  ffi.Pointer<snd_ctl_elem_value_> right,
);

typedef _c_snd_ctl_elem_value_get_id = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _dart_snd_ctl_elem_value_get_id = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _c_snd_ctl_elem_value_get_numid = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_get_numid = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_get_interface = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_get_interface = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_get_device = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_get_subdevice = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_get_subdevice = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_get_index = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_set_id = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _dart_snd_ctl_elem_value_set_id = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _c_snd_ctl_elem_value_set_numid = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_value_set_numid = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int val,
);

typedef _c_snd_ctl_elem_value_set_interface = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Int32 val,
);

typedef _dart_snd_ctl_elem_value_set_interface = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int val,
);

typedef _c_snd_ctl_elem_value_set_device = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_value_set_device = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int val,
);

typedef _c_snd_ctl_elem_value_set_subdevice = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_value_set_subdevice = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int val,
);

typedef _c_snd_ctl_elem_value_set_name = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_snd_ctl_elem_value_set_name = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_snd_ctl_elem_value_set_index = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_value_set_index = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int val,
);

typedef _c_snd_ctl_elem_value_get_boolean = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_value_get_boolean = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_value_get_integer = ffi.Int64 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_value_get_integer = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_value_get_integer64 = ffi.Int64 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_value_get_integer64 = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_value_get_enumerated = ffi.Uint32 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_value_get_enumerated = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_value_get_byte = ffi.Uint8 Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
);

typedef _dart_snd_ctl_elem_value_get_byte = int Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
);

typedef _c_snd_ctl_elem_value_set_boolean = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
  ffi.Int64 val,
);

typedef _dart_snd_ctl_elem_value_set_boolean = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
  int val,
);

typedef _c_snd_ctl_elem_value_set_integer = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
  ffi.Int64 val,
);

typedef _dart_snd_ctl_elem_value_set_integer = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
  int val,
);

typedef _c_snd_ctl_elem_value_set_integer64 = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
  ffi.Int64 val,
);

typedef _dart_snd_ctl_elem_value_set_integer64 = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
  int val,
);

typedef _c_snd_ctl_elem_value_set_enumerated = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
  ffi.Uint32 val,
);

typedef _dart_snd_ctl_elem_value_set_enumerated = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
  int val,
);

typedef _c_snd_ctl_elem_value_set_byte = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Uint32 idx,
  ffi.Uint8 val,
);

typedef _dart_snd_ctl_elem_value_set_byte = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  int idx,
  int val,
);

typedef _c_snd_ctl_elem_set_bytes = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 size,
);

typedef _dart_snd_ctl_elem_set_bytes = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_snd_ctl_elem_value_get_bytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _dart_snd_ctl_elem_value_get_bytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
);

typedef _c_snd_ctl_elem_value_get_iec958 = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<snd_aes_iec958_t> ptr,
);

typedef _dart_snd_ctl_elem_value_get_iec958 = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<snd_aes_iec958_t> ptr,
);

typedef _c_snd_ctl_elem_value_set_iec958 = ffi.Void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<snd_aes_iec958_t> ptr,
);

typedef _dart_snd_ctl_elem_value_set_iec958 = void Function(
  ffi.Pointer<snd_ctl_elem_value_> obj,
  ffi.Pointer<snd_aes_iec958_t> ptr,
);

typedef _c_snd_tlv_parse_dB_info = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> tlv,
  ffi.Uint32 tlv_size,
  ffi.Pointer<ffi.Pointer<ffi.Uint32>> db_tlvp,
);

typedef _dart_snd_tlv_parse_dB_info = int Function(
  ffi.Pointer<ffi.Uint32> tlv,
  int tlv_size,
  ffi.Pointer<ffi.Pointer<ffi.Uint32>> db_tlvp,
);

typedef _c_snd_tlv_get_dB_range = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> tlv,
  ffi.Int64 rangemin,
  ffi.Int64 rangemax,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _dart_snd_tlv_get_dB_range = int Function(
  ffi.Pointer<ffi.Uint32> tlv,
  int rangemin,
  int rangemax,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _c_snd_tlv_convert_to_dB = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> tlv,
  ffi.Int64 rangemin,
  ffi.Int64 rangemax,
  ffi.Int64 volume,
  ffi.Pointer<ffi.Int64> db_gain,
);

typedef _dart_snd_tlv_convert_to_dB = int Function(
  ffi.Pointer<ffi.Uint32> tlv,
  int rangemin,
  int rangemax,
  int volume,
  ffi.Pointer<ffi.Int64> db_gain,
);

typedef _c_snd_tlv_convert_from_dB = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> tlv,
  ffi.Int64 rangemin,
  ffi.Int64 rangemax,
  ffi.Int64 db_gain,
  ffi.Pointer<ffi.Int64> value,
  ffi.Int32 xdir,
);

typedef _dart_snd_tlv_convert_from_dB = int Function(
  ffi.Pointer<ffi.Uint32> tlv,
  int rangemin,
  int rangemax,
  int db_gain,
  ffi.Pointer<ffi.Int64> value,
  int xdir,
);

typedef _c_snd_ctl_get_dB_range = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _dart_snd_ctl_get_dB_range = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _c_snd_ctl_convert_to_dB = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Int64 volume,
  ffi.Pointer<ffi.Int64> db_gain,
);

typedef _dart_snd_ctl_convert_to_dB = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  int volume,
  ffi.Pointer<ffi.Int64> db_gain,
);

typedef _c_snd_ctl_convert_from_dB = ffi.Int32 Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  ffi.Int64 db_gain,
  ffi.Pointer<ffi.Int64> value,
  ffi.Int32 xdir,
);

typedef _dart_snd_ctl_convert_from_dB = int Function(
  ffi.Pointer<snd_ctl_> ctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
  int db_gain,
  ffi.Pointer<ffi.Int64> value,
  int xdir,
);

typedef _c_snd_hctl_compare_fast = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_> c1,
  ffi.Pointer<snd_hctl_elem_> c2,
);

typedef _dart_snd_hctl_compare_fast = int Function(
  ffi.Pointer<snd_hctl_elem_> c1,
  ffi.Pointer<snd_hctl_elem_> c2,
);

typedef _c_snd_hctl_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_hctl_>> hctl,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 mode,
);

typedef _dart_snd_hctl_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_hctl_>> hctl,
  ffi.Pointer<ffi.Int8> name,
  int mode,
);

typedef _c_snd_hctl_open_ctl = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_hctl_>> hctlp,
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _dart_snd_hctl_open_ctl = int Function(
  ffi.Pointer<ffi.Pointer<snd_hctl_>> hctlp,
  ffi.Pointer<snd_ctl_> ctl,
);

typedef _c_snd_hctl_close = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_close = int Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_nonblock = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Int32 nonblock,
);

typedef _dart_snd_hctl_nonblock = int Function(
  ffi.Pointer<snd_hctl_> hctl,
  int nonblock,
);

typedef _c_snd_hctl_poll_descriptors_count = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_poll_descriptors_count = int Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_poll_descriptors = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 space,
);

typedef _dart_snd_hctl_poll_descriptors = int Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<pollfd> pfds,
  int space,
);

typedef _c_snd_hctl_poll_descriptors_revents = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> ctl,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _dart_snd_hctl_poll_descriptors_revents = int Function(
  ffi.Pointer<snd_hctl_> ctl,
  ffi.Pointer<pollfd> pfds,
  int nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _c_snd_hctl_get_count = ffi.Uint32 Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_get_count = int Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef snd_hctl_compare_t = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_>,
  ffi.Pointer<snd_hctl_elem_>,
);

typedef _c_snd_hctl_set_compare = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<ffi.NativeFunction<snd_hctl_compare_t>> hsort,
);

typedef _dart_snd_hctl_set_compare = int Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<ffi.NativeFunction<snd_hctl_compare_t>> hsort,
);

typedef _c_snd_hctl_first_elem = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_first_elem = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_last_elem = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_last_elem = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_find_elem = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef _dart_snd_hctl_find_elem = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<snd_ctl_elem_id_> id,
);

typedef snd_hctl_callback_t = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_>,
  ffi.Uint32,
  ffi.Pointer<snd_hctl_elem_>,
);

typedef _c_snd_hctl_set_callback = ffi.Void Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<ffi.NativeFunction<snd_hctl_callback_t>> callback,
);

typedef _dart_snd_hctl_set_callback = void Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<ffi.NativeFunction<snd_hctl_callback_t>> callback,
);

typedef _c_snd_hctl_set_callback_private = ffi.Void Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_snd_hctl_set_callback_private = void Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_snd_hctl_get_callback_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_get_callback_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_load = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_load = int Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_free = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_free = int Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_handle_events = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_handle_events = int Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_wait = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_> hctl,
  ffi.Int32 timeout,
);

typedef _dart_snd_hctl_wait = int Function(
  ffi.Pointer<snd_hctl_> hctl,
  int timeout,
);

typedef _c_snd_hctl_ctl = ffi.Pointer<snd_ctl_> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_hctl_ctl = ffi.Pointer<snd_ctl_> Function(
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_hctl_elem_next = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_elem_> elem,
);

typedef _dart_snd_hctl_elem_next = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_elem_> elem,
);

typedef _c_snd_hctl_elem_prev = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_elem_> elem,
);

typedef _dart_snd_hctl_elem_prev = ffi.Pointer<snd_hctl_elem_> Function(
  ffi.Pointer<snd_hctl_elem_> elem,
);

typedef _c_snd_hctl_elem_info = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<snd_ctl_elem_info_> info,
);

typedef _dart_snd_hctl_elem_info = int Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<snd_ctl_elem_info_> info,
);

typedef _c_snd_hctl_elem_read = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<snd_ctl_elem_value_> value,
);

typedef _dart_snd_hctl_elem_read = int Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<snd_ctl_elem_value_> value,
);

typedef _c_snd_hctl_elem_write = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<snd_ctl_elem_value_> value,
);

typedef _dart_snd_hctl_elem_write = int Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<snd_ctl_elem_value_> value,
);

typedef _c_snd_hctl_elem_tlv_read = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<ffi.Uint32> tlv,
  ffi.Uint32 tlv_size,
);

typedef _dart_snd_hctl_elem_tlv_read = int Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<ffi.Uint32> tlv,
  int tlv_size,
);

typedef _c_snd_hctl_elem_tlv_write = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<ffi.Uint32> tlv,
);

typedef _dart_snd_hctl_elem_tlv_write = int Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<ffi.Uint32> tlv,
);

typedef _c_snd_hctl_elem_tlv_command = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<ffi.Uint32> tlv,
);

typedef _dart_snd_hctl_elem_tlv_command = int Function(
  ffi.Pointer<snd_hctl_elem_> elem,
  ffi.Pointer<ffi.Uint32> tlv,
);

typedef _c_snd_hctl_elem_get_hctl = ffi.Pointer<snd_hctl_> Function(
  ffi.Pointer<snd_hctl_elem_> elem,
);

typedef _dart_snd_hctl_elem_get_hctl = ffi.Pointer<snd_hctl_> Function(
  ffi.Pointer<snd_hctl_elem_> elem,
);

typedef _c_snd_hctl_elem_get_id = ffi.Void Function(
  ffi.Pointer<snd_hctl_elem_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _dart_snd_hctl_elem_get_id = void Function(
  ffi.Pointer<snd_hctl_elem_> obj,
  ffi.Pointer<snd_ctl_elem_id_> ptr,
);

typedef _c_snd_hctl_elem_get_numid = ffi.Uint32 Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _dart_snd_hctl_elem_get_numid = int Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _c_snd_hctl_elem_get_interface = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _dart_snd_hctl_elem_get_interface = int Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _c_snd_hctl_elem_get_device = ffi.Uint32 Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _dart_snd_hctl_elem_get_device = int Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _c_snd_hctl_elem_get_subdevice = ffi.Uint32 Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _dart_snd_hctl_elem_get_subdevice = int Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _c_snd_hctl_elem_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _dart_snd_hctl_elem_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _c_snd_hctl_elem_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _dart_snd_hctl_elem_get_index = int Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef snd_hctl_elem_callback_t = ffi.Int32 Function(
  ffi.Pointer<snd_hctl_elem_>,
  ffi.Uint32,
);

typedef _c_snd_hctl_elem_set_callback = ffi.Void Function(
  ffi.Pointer<snd_hctl_elem_> obj,
  ffi.Pointer<ffi.NativeFunction<snd_hctl_elem_callback_t>> val,
);

typedef _dart_snd_hctl_elem_set_callback = void Function(
  ffi.Pointer<snd_hctl_elem_> obj,
  ffi.Pointer<ffi.NativeFunction<snd_hctl_elem_callback_t>> val,
);

typedef _c_snd_hctl_elem_get_callback_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _dart_snd_hctl_elem_get_callback_private = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<snd_hctl_elem_> obj,
);

typedef _c_snd_hctl_elem_set_callback_private = ffi.Void Function(
  ffi.Pointer<snd_hctl_elem_> obj,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_snd_hctl_elem_set_callback_private = void Function(
  ffi.Pointer<snd_hctl_elem_> obj,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_snd_sctl_build = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_sctl_>> ctl,
  ffi.Pointer<snd_ctl_> handle,
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_config_> private_data,
  ffi.Int32 mode,
);

typedef _dart_snd_sctl_build = int Function(
  ffi.Pointer<ffi.Pointer<snd_sctl_>> ctl,
  ffi.Pointer<snd_ctl_> handle,
  ffi.Pointer<snd_config_> config,
  ffi.Pointer<snd_config_> private_data,
  int mode,
);

typedef _c_snd_sctl_free = ffi.Int32 Function(
  ffi.Pointer<snd_sctl_> handle,
);

typedef _dart_snd_sctl_free = int Function(
  ffi.Pointer<snd_sctl_> handle,
);

typedef _c_snd_sctl_install = ffi.Int32 Function(
  ffi.Pointer<snd_sctl_> handle,
);

typedef _dart_snd_sctl_install = int Function(
  ffi.Pointer<snd_sctl_> handle,
);

typedef _c_snd_sctl_remove = ffi.Int32 Function(
  ffi.Pointer<snd_sctl_> handle,
);

typedef _dart_snd_sctl_remove = int Function(
  ffi.Pointer<snd_sctl_> handle,
);

typedef _c_snd_mixer_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_mixer_>> mixer,
  ffi.Int32 mode,
);

typedef _dart_snd_mixer_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_mixer_>> mixer,
  int mode,
);

typedef _c_snd_mixer_close = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _dart_snd_mixer_close = int Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _c_snd_mixer_first_elem = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _dart_snd_mixer_first_elem = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _c_snd_mixer_last_elem = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _dart_snd_mixer_last_elem = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _c_snd_mixer_handle_events = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _dart_snd_mixer_handle_events = int Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _c_snd_mixer_attach = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_mixer_attach = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_mixer_attach_hctl = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_mixer_attach_hctl = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_mixer_detach = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_mixer_detach = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_mixer_detach_hctl = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _dart_snd_mixer_detach_hctl = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<snd_hctl_> hctl,
);

typedef _c_snd_mixer_get_hctl = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<snd_hctl_>> hctl,
);

typedef _dart_snd_mixer_get_hctl = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<snd_hctl_>> hctl,
);

typedef _c_snd_mixer_poll_descriptors_count = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _dart_snd_mixer_poll_descriptors_count = int Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _c_snd_mixer_poll_descriptors = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 space,
);

typedef _dart_snd_mixer_poll_descriptors = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<pollfd> pfds,
  int space,
);

typedef _c_snd_mixer_poll_descriptors_revents = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _dart_snd_mixer_poll_descriptors_revents = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<pollfd> pfds,
  int nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _c_snd_mixer_load = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _dart_snd_mixer_load = int Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _c_snd_mixer_free = ffi.Void Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _dart_snd_mixer_free = void Function(
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _c_snd_mixer_wait = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Int32 timeout,
);

typedef _dart_snd_mixer_wait = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  int timeout,
);

typedef snd_mixer_compare_t = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_>,
  ffi.Pointer<snd_mixer_elem_>,
);

typedef _c_snd_mixer_set_compare = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>> msort,
);

typedef _dart_snd_mixer_set_compare = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>> msort,
);

typedef snd_mixer_callback_t = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_>,
  ffi.Uint32,
  ffi.Pointer<snd_mixer_elem_>,
);

typedef _c_snd_mixer_set_callback = ffi.Void Function(
  ffi.Pointer<snd_mixer_> obj,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_callback_t>> val,
);

typedef _dart_snd_mixer_set_callback = void Function(
  ffi.Pointer<snd_mixer_> obj,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_callback_t>> val,
);

typedef _c_snd_mixer_get_callback_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_mixer_> obj,
);

typedef _dart_snd_mixer_get_callback_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_mixer_> obj,
);

typedef _c_snd_mixer_set_callback_private = ffi.Void Function(
  ffi.Pointer<snd_mixer_> obj,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_snd_mixer_set_callback_private = void Function(
  ffi.Pointer<snd_mixer_> obj,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_snd_mixer_get_count = ffi.Uint32 Function(
  ffi.Pointer<snd_mixer_> obj,
);

typedef _dart_snd_mixer_get_count = int Function(
  ffi.Pointer<snd_mixer_> obj,
);

typedef _c_snd_mixer_class_unregister = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_class_> clss,
);

typedef _dart_snd_mixer_class_unregister = int Function(
  ffi.Pointer<snd_mixer_class_> clss,
);

typedef _c_snd_mixer_elem_next = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_elem_next = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_elem_prev = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_elem_prev = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef snd_mixer_elem_callback_t = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_>,
  ffi.Uint32,
);

typedef _c_snd_mixer_elem_set_callback = ffi.Void Function(
  ffi.Pointer<snd_mixer_elem_> obj,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_elem_callback_t>> val,
);

typedef _dart_snd_mixer_elem_set_callback = void Function(
  ffi.Pointer<snd_mixer_elem_> obj,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_elem_callback_t>> val,
);

typedef _c_snd_mixer_elem_get_callback_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_mixer_elem_> obj,
);

typedef _dart_snd_mixer_elem_get_callback_private = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<snd_mixer_elem_> obj,
);

typedef _c_snd_mixer_elem_set_callback_private = ffi.Void Function(
  ffi.Pointer<snd_mixer_elem_> obj,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_snd_mixer_elem_set_callback_private = void Function(
  ffi.Pointer<snd_mixer_elem_> obj,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_snd_mixer_elem_get_type = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> obj,
);

typedef _dart_snd_mixer_elem_get_type = int Function(
  ffi.Pointer<snd_mixer_elem_> obj,
);

typedef _c_snd_mixer_class_register = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _dart_snd_mixer_class_register = int Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<snd_mixer_> mixer,
);

typedef _typedefC_11 = ffi.Void Function(
  ffi.Pointer<snd_mixer_elem_>,
);

typedef _c_snd_mixer_elem_new = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_mixer_elem_>> elem,
  ffi.Int32 type,
  ffi.Int32 compare_weight,
  ffi.Pointer<ffi.Void> private_data,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> private_free,
);

typedef _dart_snd_mixer_elem_new = int Function(
  ffi.Pointer<ffi.Pointer<snd_mixer_elem_>> elem,
  int type,
  int compare_weight,
  ffi.Pointer<ffi.Void> private_data,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> private_free,
);

typedef _c_snd_mixer_elem_add = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _dart_snd_mixer_elem_add = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _c_snd_mixer_elem_remove = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_elem_remove = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_elem_free = ffi.Void Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_elem_free = void Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_elem_info = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_elem_info = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_elem_value = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_elem_value = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_elem_attach = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> melem,
  ffi.Pointer<snd_hctl_elem_> helem,
);

typedef _dart_snd_mixer_elem_attach = int Function(
  ffi.Pointer<snd_mixer_elem_> melem,
  ffi.Pointer<snd_hctl_elem_> helem,
);

typedef _c_snd_mixer_elem_detach = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> melem,
  ffi.Pointer<snd_hctl_elem_> helem,
);

typedef _dart_snd_mixer_elem_detach = int Function(
  ffi.Pointer<snd_mixer_elem_> melem,
  ffi.Pointer<snd_hctl_elem_> helem,
);

typedef _c_snd_mixer_elem_empty = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> melem,
);

typedef _dart_snd_mixer_elem_empty = int Function(
  ffi.Pointer<snd_mixer_elem_> melem,
);

typedef _c_snd_mixer_elem_get_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_mixer_elem_> melem,
);

typedef _dart_snd_mixer_elem_get_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_mixer_elem_> melem,
);

typedef _c_snd_mixer_class_sizeof = ffi.Int32 Function();

typedef _dart_snd_mixer_class_sizeof = int Function();

typedef _c_snd_mixer_class_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_mixer_class_>> ptr,
);

typedef _dart_snd_mixer_class_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_mixer_class_>> ptr,
);

typedef _c_snd_mixer_class_free = ffi.Void Function(
  ffi.Pointer<snd_mixer_class_> obj,
);

typedef _dart_snd_mixer_class_free = void Function(
  ffi.Pointer<snd_mixer_class_> obj,
);

typedef _c_snd_mixer_class_copy = ffi.Void Function(
  ffi.Pointer<snd_mixer_class_> dst,
  ffi.Pointer<snd_mixer_class_> src,
);

typedef _dart_snd_mixer_class_copy = void Function(
  ffi.Pointer<snd_mixer_class_> dst,
  ffi.Pointer<snd_mixer_class_> src,
);

typedef _c_snd_mixer_class_get_mixer = ffi.Pointer<snd_mixer_> Function(
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _dart_snd_mixer_class_get_mixer = ffi.Pointer<snd_mixer_> Function(
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef snd_mixer_event_t = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_class_>,
  ffi.Uint32,
  ffi.Pointer<snd_hctl_elem_>,
  ffi.Pointer<snd_mixer_elem_>,
);

typedef _c_snd_mixer_class_get_event
    = ffi.Pointer<ffi.NativeFunction<snd_mixer_event_t>> Function(
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _dart_snd_mixer_class_get_event
    = ffi.Pointer<ffi.NativeFunction<snd_mixer_event_t>> Function(
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _c_snd_mixer_class_get_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _dart_snd_mixer_class_get_private = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _c_snd_mixer_class_get_compare
    = ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>> Function(
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _dart_snd_mixer_class_get_compare
    = ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>> Function(
  ffi.Pointer<snd_mixer_class_> class_,
);

typedef _c_snd_mixer_class_set_event = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_event_t>> event,
);

typedef _dart_snd_mixer_class_set_event = int Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_event_t>> event,
);

typedef _c_snd_mixer_class_set_private = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _dart_snd_mixer_class_set_private = int Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<ffi.Void> private_data,
);

typedef _typedefC_12 = ffi.Void Function(
  ffi.Pointer<snd_mixer_class_>,
);

typedef _c_snd_mixer_class_set_private_free = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> private_free,
);

typedef _dart_snd_mixer_class_set_private_free = int Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> private_free,
);

typedef _c_snd_mixer_class_set_compare = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>> compare,
);

typedef _dart_snd_mixer_class_set_compare = int Function(
  ffi.Pointer<snd_mixer_class_> class_,
  ffi.Pointer<ffi.NativeFunction<snd_mixer_compare_t>> compare,
);

typedef _c_snd_mixer_selem_channel_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 channel,
);

typedef _dart_snd_mixer_selem_channel_name = ffi.Pointer<ffi.Int8> Function(
  int channel,
);

typedef _c_snd_mixer_selem_register = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<snd_mixer_selem_regopt> options,
  ffi.Pointer<ffi.Pointer<snd_mixer_class_>> classp,
);

typedef _dart_snd_mixer_selem_register = int Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<snd_mixer_selem_regopt> options,
  ffi.Pointer<ffi.Pointer<snd_mixer_class_>> classp,
);

typedef _c_snd_mixer_selem_get_id = ffi.Void Function(
  ffi.Pointer<snd_mixer_elem_> element,
  ffi.Pointer<snd_mixer_selem_id_> id,
);

typedef _dart_snd_mixer_selem_get_id = void Function(
  ffi.Pointer<snd_mixer_elem_> element,
  ffi.Pointer<snd_mixer_selem_id_> id,
);

typedef _c_snd_mixer_selem_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_get_index = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_find_selem = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<snd_mixer_selem_id_> id,
);

typedef _dart_snd_mixer_find_selem = ffi.Pointer<snd_mixer_elem_> Function(
  ffi.Pointer<snd_mixer_> mixer,
  ffi.Pointer<snd_mixer_selem_id_> id,
);

typedef _c_snd_mixer_selem_is_active = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_is_active = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_is_playback_mono = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_is_playback_mono = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_playback_channel = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> obj,
  ffi.Int32 channel,
);

typedef _dart_snd_mixer_selem_has_playback_channel = int Function(
  ffi.Pointer<snd_mixer_elem_> obj,
  int channel,
);

typedef _c_snd_mixer_selem_is_capture_mono = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_is_capture_mono = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_capture_channel = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> obj,
  ffi.Int32 channel,
);

typedef _dart_snd_mixer_selem_has_capture_channel = int Function(
  ffi.Pointer<snd_mixer_elem_> obj,
  int channel,
);

typedef _c_snd_mixer_selem_get_capture_group = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_get_capture_group = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_common_volume = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_common_volume = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_playback_volume = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_playback_volume = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_playback_volume_joined = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_playback_volume_joined = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_capture_volume = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_capture_volume = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_capture_volume_joined = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_capture_volume_joined = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_common_switch = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_common_switch = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_playback_switch = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_playback_switch = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_playback_switch_joined = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_playback_switch_joined = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_capture_switch = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_capture_switch = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_capture_switch_joined = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_capture_switch_joined = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_has_capture_switch_exclusive = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_has_capture_switch_exclusive = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_ask_playback_vol_dB = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 value,
  ffi.Pointer<ffi.Int64> dBvalue,
);

typedef _dart_snd_mixer_selem_ask_playback_vol_dB = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int value,
  ffi.Pointer<ffi.Int64> dBvalue,
);

typedef _c_snd_mixer_selem_ask_capture_vol_dB = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 value,
  ffi.Pointer<ffi.Int64> dBvalue,
);

typedef _dart_snd_mixer_selem_ask_capture_vol_dB = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int value,
  ffi.Pointer<ffi.Int64> dBvalue,
);

typedef _c_snd_mixer_selem_ask_playback_dB_vol = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 dBvalue,
  ffi.Int32 dir,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_snd_mixer_selem_ask_playback_dB_vol = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int dBvalue,
  int dir,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_snd_mixer_selem_ask_capture_dB_vol = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 dBvalue,
  ffi.Int32 dir,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_snd_mixer_selem_ask_capture_dB_vol = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int dBvalue,
  int dir,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_snd_mixer_selem_get_playback_volume = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_snd_mixer_selem_get_playback_volume = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_snd_mixer_selem_get_capture_volume = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_snd_mixer_selem_get_capture_volume = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_snd_mixer_selem_get_playback_dB = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_snd_mixer_selem_get_playback_dB = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_snd_mixer_selem_get_capture_dB = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Pointer<ffi.Int64> value,
);

typedef _dart_snd_mixer_selem_get_capture_dB = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  ffi.Pointer<ffi.Int64> value,
);

typedef _c_snd_mixer_selem_get_playback_switch = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_snd_mixer_selem_get_playback_switch = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_snd_mixer_selem_get_capture_switch = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_snd_mixer_selem_get_capture_switch = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_snd_mixer_selem_set_playback_volume = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Int64 value,
);

typedef _dart_snd_mixer_selem_set_playback_volume = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  int value,
);

typedef _c_snd_mixer_selem_set_capture_volume = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Int64 value,
);

typedef _dart_snd_mixer_selem_set_capture_volume = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  int value,
);

typedef _c_snd_mixer_selem_set_playback_dB = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Int64 value,
  ffi.Int32 dir,
);

typedef _dart_snd_mixer_selem_set_playback_dB = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  int value,
  int dir,
);

typedef _c_snd_mixer_selem_set_capture_dB = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Int64 value,
  ffi.Int32 dir,
);

typedef _dart_snd_mixer_selem_set_capture_dB = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  int value,
  int dir,
);

typedef _c_snd_mixer_selem_set_playback_volume_all = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 value,
);

typedef _dart_snd_mixer_selem_set_playback_volume_all = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int value,
);

typedef _c_snd_mixer_selem_set_capture_volume_all = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 value,
);

typedef _dart_snd_mixer_selem_set_capture_volume_all = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int value,
);

typedef _c_snd_mixer_selem_set_playback_dB_all = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 value,
  ffi.Int32 dir,
);

typedef _dart_snd_mixer_selem_set_playback_dB_all = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int value,
  int dir,
);

typedef _c_snd_mixer_selem_set_capture_dB_all = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 value,
  ffi.Int32 dir,
);

typedef _dart_snd_mixer_selem_set_capture_dB_all = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int value,
  int dir,
);

typedef _c_snd_mixer_selem_set_playback_switch = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Int32 value,
);

typedef _dart_snd_mixer_selem_set_playback_switch = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  int value,
);

typedef _c_snd_mixer_selem_set_capture_switch = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Int32 value,
);

typedef _dart_snd_mixer_selem_set_capture_switch = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  int value,
);

typedef _c_snd_mixer_selem_set_playback_switch_all = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 value,
);

typedef _dart_snd_mixer_selem_set_playback_switch_all = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int value,
);

typedef _c_snd_mixer_selem_set_capture_switch_all = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 value,
);

typedef _dart_snd_mixer_selem_set_capture_switch_all = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int value,
);

typedef _c_snd_mixer_selem_get_playback_volume_range = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _dart_snd_mixer_selem_get_playback_volume_range = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _c_snd_mixer_selem_get_playback_dB_range = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _dart_snd_mixer_selem_get_playback_dB_range = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _c_snd_mixer_selem_set_playback_volume_range = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 min,
  ffi.Int64 max,
);

typedef _dart_snd_mixer_selem_set_playback_volume_range = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int min,
  int max,
);

typedef _c_snd_mixer_selem_get_capture_volume_range = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _dart_snd_mixer_selem_get_capture_volume_range = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _c_snd_mixer_selem_get_capture_dB_range = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _dart_snd_mixer_selem_get_capture_dB_range = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Pointer<ffi.Int64> min,
  ffi.Pointer<ffi.Int64> max,
);

typedef _c_snd_mixer_selem_set_capture_volume_range = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int64 min,
  ffi.Int64 max,
);

typedef _dart_snd_mixer_selem_set_capture_volume_range = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int min,
  int max,
);

typedef _c_snd_mixer_selem_is_enumerated = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_is_enumerated = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_is_enum_playback = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_is_enum_playback = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_is_enum_capture = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_is_enum_capture = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_get_enum_items = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _dart_snd_mixer_selem_get_enum_items = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
);

typedef _c_snd_mixer_selem_get_enum_item_name = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Uint32 idx,
  ffi.Int32 maxlen,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_snd_mixer_selem_get_enum_item_name = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int idx,
  int maxlen,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_snd_mixer_selem_get_enum_item = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Pointer<ffi.Uint32> idxp,
);

typedef _dart_snd_mixer_selem_get_enum_item = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  ffi.Pointer<ffi.Uint32> idxp,
);

typedef _c_snd_mixer_selem_set_enum_item = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  ffi.Int32 channel,
  ffi.Uint32 idx,
);

typedef _dart_snd_mixer_selem_set_enum_item = int Function(
  ffi.Pointer<snd_mixer_elem_> elem,
  int channel,
  int idx,
);

typedef _c_snd_mixer_selem_id_sizeof = ffi.Int32 Function();

typedef _dart_snd_mixer_selem_id_sizeof = int Function();

typedef _c_snd_mixer_selem_id_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_mixer_selem_id_>> ptr,
);

typedef _dart_snd_mixer_selem_id_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_mixer_selem_id_>> ptr,
);

typedef _c_snd_mixer_selem_id_free = ffi.Void Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
);

typedef _dart_snd_mixer_selem_id_free = void Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
);

typedef _c_snd_mixer_selem_id_copy = ffi.Void Function(
  ffi.Pointer<snd_mixer_selem_id_> dst,
  ffi.Pointer<snd_mixer_selem_id_> src,
);

typedef _dart_snd_mixer_selem_id_copy = void Function(
  ffi.Pointer<snd_mixer_selem_id_> dst,
  ffi.Pointer<snd_mixer_selem_id_> src,
);

typedef _c_snd_mixer_selem_id_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
);

typedef _dart_snd_mixer_selem_id_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
);

typedef _c_snd_mixer_selem_id_get_index = ffi.Uint32 Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
);

typedef _dart_snd_mixer_selem_id_get_index = int Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
);

typedef _c_snd_mixer_selem_id_set_name = ffi.Void Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart_snd_mixer_selem_id_set_name = void Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c_snd_mixer_selem_id_set_index = ffi.Void Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
  ffi.Uint32 val,
);

typedef _dart_snd_mixer_selem_id_set_index = void Function(
  ffi.Pointer<snd_mixer_selem_id_> obj,
  int val,
);

typedef _c_snd_mixer_selem_id_parse = ffi.Int32 Function(
  ffi.Pointer<snd_mixer_selem_id_> dst,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_snd_mixer_selem_id_parse = int Function(
  ffi.Pointer<snd_mixer_selem_id_> dst,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_snd_seq_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_>> handle,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 streams,
  ffi.Int32 mode,
);

typedef _dart_snd_seq_open = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_>> handle,
  ffi.Pointer<ffi.Int8> name,
  int streams,
  int mode,
);

typedef _c_snd_seq_open_lconf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_>> handle,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 streams,
  ffi.Int32 mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _dart_snd_seq_open_lconf = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_>> handle,
  ffi.Pointer<ffi.Int8> name,
  int streams,
  int mode,
  ffi.Pointer<snd_config_> lconf,
);

typedef _c_snd_seq_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _dart_snd_seq_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _c_snd_seq_type = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _dart_snd_seq_type = int Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _c_snd_seq_close = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_close = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_poll_descriptors_count = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int16 events,
);

typedef _dart_snd_seq_poll_descriptors_count = int Function(
  ffi.Pointer<snd_seq_> handle,
  int events,
);

typedef _c_snd_seq_poll_descriptors = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 space,
  ffi.Int16 events,
);

typedef _dart_snd_seq_poll_descriptors = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<pollfd> pfds,
  int space,
  int events,
);

typedef _c_snd_seq_poll_descriptors_revents = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<pollfd> pfds,
  ffi.Uint32 nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _dart_snd_seq_poll_descriptors_revents = int Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<pollfd> pfds,
  int nfds,
  ffi.Pointer<ffi.Uint16> revents,
);

typedef _c_snd_seq_nonblock = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 nonblock,
);

typedef _dart_snd_seq_nonblock = int Function(
  ffi.Pointer<snd_seq_> handle,
  int nonblock,
);

typedef _c_snd_seq_client_id = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_client_id = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_get_output_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_get_output_buffer_size = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_get_input_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_get_input_buffer_size = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_set_output_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 size,
);

typedef _dart_snd_seq_set_output_buffer_size = int Function(
  ffi.Pointer<snd_seq_> handle,
  int size,
);

typedef _c_snd_seq_set_input_buffer_size = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 size,
);

typedef _dart_snd_seq_set_input_buffer_size = int Function(
  ffi.Pointer<snd_seq_> handle,
  int size,
);

typedef _c_snd_seq_system_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_system_info_sizeof = int Function();

typedef _c_snd_seq_system_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_system_info_>> ptr,
);

typedef _dart_snd_seq_system_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_system_info_>> ptr,
);

typedef _c_snd_seq_system_info_free = ffi.Void Function(
  ffi.Pointer<snd_seq_system_info_> ptr,
);

typedef _dart_snd_seq_system_info_free = void Function(
  ffi.Pointer<snd_seq_system_info_> ptr,
);

typedef _c_snd_seq_system_info_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_system_info_> dst,
  ffi.Pointer<snd_seq_system_info_> src,
);

typedef _dart_snd_seq_system_info_copy = void Function(
  ffi.Pointer<snd_seq_system_info_> dst,
  ffi.Pointer<snd_seq_system_info_> src,
);

typedef _c_snd_seq_system_info_get_queues = ffi.Int32 Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _dart_snd_seq_system_info_get_queues = int Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _c_snd_seq_system_info_get_clients = ffi.Int32 Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _dart_snd_seq_system_info_get_clients = int Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _c_snd_seq_system_info_get_ports = ffi.Int32 Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _dart_snd_seq_system_info_get_ports = int Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _c_snd_seq_system_info_get_channels = ffi.Int32 Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _dart_snd_seq_system_info_get_channels = int Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _c_snd_seq_system_info_get_cur_clients = ffi.Int32 Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _dart_snd_seq_system_info_get_cur_clients = int Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _c_snd_seq_system_info_get_cur_queues = ffi.Int32 Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _dart_snd_seq_system_info_get_cur_queues = int Function(
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _c_snd_seq_system_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _dart_snd_seq_system_info = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_system_info_> info,
);

typedef _c_snd_seq_client_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_client_info_sizeof = int Function();

typedef _c_snd_seq_client_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_client_info_>> ptr,
);

typedef _dart_snd_seq_client_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_client_info_>> ptr,
);

typedef _c_snd_seq_client_info_free = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> ptr,
);

typedef _dart_snd_seq_client_info_free = void Function(
  ffi.Pointer<snd_seq_client_info_> ptr,
);

typedef _c_snd_seq_client_info_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> dst,
  ffi.Pointer<snd_seq_client_info_> src,
);

typedef _dart_snd_seq_client_info_copy = void Function(
  ffi.Pointer<snd_seq_client_info_> dst,
  ffi.Pointer<snd_seq_client_info_> src,
);

typedef _c_snd_seq_client_info_get_client = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_client = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_type = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_type = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_broadcast_filter = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_broadcast_filter = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_error_bounce = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_error_bounce = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_card = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_card = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_pid = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_pid = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_event_filter = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_event_filter = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_num_ports = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_num_ports = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_get_event_lost = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_get_event_lost = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_set_client = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Int32 client,
);

typedef _dart_snd_seq_client_info_set_client = void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  int client,
);

typedef _c_snd_seq_client_info_set_name = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_seq_client_info_set_name = void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_seq_client_info_set_broadcast_filter = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Int32 val,
);

typedef _dart_snd_seq_client_info_set_broadcast_filter = void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  int val,
);

typedef _c_snd_seq_client_info_set_error_bounce = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Int32 val,
);

typedef _dart_snd_seq_client_info_set_error_bounce = void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  int val,
);

typedef _c_snd_seq_client_info_set_event_filter = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Pointer<ffi.Uint8> filter,
);

typedef _dart_snd_seq_client_info_set_event_filter = void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Pointer<ffi.Uint8> filter,
);

typedef _c_snd_seq_client_info_event_filter_clear = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_client_info_event_filter_clear = void Function(
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_info_event_filter_add = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Int32 event_type,
);

typedef _dart_snd_seq_client_info_event_filter_add = void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  int event_type,
);

typedef _c_snd_seq_client_info_event_filter_del = ffi.Void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Int32 event_type,
);

typedef _dart_snd_seq_client_info_event_filter_del = void Function(
  ffi.Pointer<snd_seq_client_info_> info,
  int event_type,
);

typedef _c_snd_seq_client_info_event_filter_check = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_info_> info,
  ffi.Int32 event_type,
);

typedef _dart_snd_seq_client_info_event_filter_check = int Function(
  ffi.Pointer<snd_seq_client_info_> info,
  int event_type,
);

typedef _c_snd_seq_get_client_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_get_client_info = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_get_any_client_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 client,
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_get_any_client_info = int Function(
  ffi.Pointer<snd_seq_> handle,
  int client,
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_set_client_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_set_client_info = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_query_next_client = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _dart_snd_seq_query_next_client = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_info_> info,
);

typedef _c_snd_seq_client_pool_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_client_pool_sizeof = int Function();

typedef _c_snd_seq_client_pool_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_client_pool_>> ptr,
);

typedef _dart_snd_seq_client_pool_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_client_pool_>> ptr,
);

typedef _c_snd_seq_client_pool_free = ffi.Void Function(
  ffi.Pointer<snd_seq_client_pool_> ptr,
);

typedef _dart_snd_seq_client_pool_free = void Function(
  ffi.Pointer<snd_seq_client_pool_> ptr,
);

typedef _c_snd_seq_client_pool_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_client_pool_> dst,
  ffi.Pointer<snd_seq_client_pool_> src,
);

typedef _dart_snd_seq_client_pool_copy = void Function(
  ffi.Pointer<snd_seq_client_pool_> dst,
  ffi.Pointer<snd_seq_client_pool_> src,
);

typedef _c_snd_seq_client_pool_get_client = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _dart_snd_seq_client_pool_get_client = int Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _c_snd_seq_client_pool_get_output_pool = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _dart_snd_seq_client_pool_get_output_pool = int Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _c_snd_seq_client_pool_get_input_pool = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _dart_snd_seq_client_pool_get_input_pool = int Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _c_snd_seq_client_pool_get_output_room = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _dart_snd_seq_client_pool_get_output_room = int Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _c_snd_seq_client_pool_get_output_free = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _dart_snd_seq_client_pool_get_output_free = int Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _c_snd_seq_client_pool_get_input_free = ffi.Int32 Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _dart_snd_seq_client_pool_get_input_free = int Function(
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _c_snd_seq_client_pool_set_output_pool = ffi.Void Function(
  ffi.Pointer<snd_seq_client_pool_> info,
  ffi.Int32 size,
);

typedef _dart_snd_seq_client_pool_set_output_pool = void Function(
  ffi.Pointer<snd_seq_client_pool_> info,
  int size,
);

typedef _c_snd_seq_client_pool_set_input_pool = ffi.Void Function(
  ffi.Pointer<snd_seq_client_pool_> info,
  ffi.Int32 size,
);

typedef _dart_snd_seq_client_pool_set_input_pool = void Function(
  ffi.Pointer<snd_seq_client_pool_> info,
  int size,
);

typedef _c_snd_seq_client_pool_set_output_room = ffi.Void Function(
  ffi.Pointer<snd_seq_client_pool_> info,
  ffi.Int32 size,
);

typedef _dart_snd_seq_client_pool_set_output_room = void Function(
  ffi.Pointer<snd_seq_client_pool_> info,
  int size,
);

typedef _c_snd_seq_get_client_pool = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _dart_snd_seq_get_client_pool = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _c_snd_seq_set_client_pool = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _dart_snd_seq_set_client_pool = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_client_pool_> info,
);

typedef _c_snd_seq_port_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_port_info_sizeof = int Function();

typedef _c_snd_seq_port_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_port_info_>> ptr,
);

typedef _dart_snd_seq_port_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_port_info_>> ptr,
);

typedef _c_snd_seq_port_info_free = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> ptr,
);

typedef _dart_snd_seq_port_info_free = void Function(
  ffi.Pointer<snd_seq_port_info_> ptr,
);

typedef _c_snd_seq_port_info_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> dst,
  ffi.Pointer<snd_seq_port_info_> src,
);

typedef _dart_snd_seq_port_info_copy = void Function(
  ffi.Pointer<snd_seq_port_info_> dst,
  ffi.Pointer<snd_seq_port_info_> src,
);

typedef _c_snd_seq_port_info_get_client = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_client = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_port = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_addr = ffi.Pointer<snd_seq_addr_t> Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_addr = ffi.Pointer<snd_seq_addr_t> Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_capability = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_capability = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_type = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_type = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_midi_channels = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_midi_channels = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_midi_voices = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_midi_voices = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_synth_voices = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_synth_voices = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_read_use = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_read_use = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_write_use = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_write_use = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_port_specified = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_port_specified = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_timestamping = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_timestamping = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_timestamp_real = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_timestamp_real = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_get_timestamp_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_port_info_get_timestamp_queue = int Function(
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_info_set_client = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 client,
);

typedef _dart_snd_seq_port_info_set_client = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int client,
);

typedef _c_snd_seq_port_info_set_port = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 port,
);

typedef _dart_snd_seq_port_info_set_port = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int port,
);

typedef _c_snd_seq_port_info_set_addr = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _dart_snd_seq_port_info_set_addr = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _c_snd_seq_port_info_set_name = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_seq_port_info_set_name = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_seq_port_info_set_capability = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Uint32 capability,
);

typedef _dart_snd_seq_port_info_set_capability = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int capability,
);

typedef _c_snd_seq_port_info_set_type = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Uint32 type,
);

typedef _dart_snd_seq_port_info_set_type = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int type,
);

typedef _c_snd_seq_port_info_set_midi_channels = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 channels,
);

typedef _dart_snd_seq_port_info_set_midi_channels = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int channels,
);

typedef _c_snd_seq_port_info_set_midi_voices = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 voices,
);

typedef _dart_snd_seq_port_info_set_midi_voices = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int voices,
);

typedef _c_snd_seq_port_info_set_synth_voices = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 voices,
);

typedef _dart_snd_seq_port_info_set_synth_voices = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int voices,
);

typedef _c_snd_seq_port_info_set_port_specified = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 val,
);

typedef _dart_snd_seq_port_info_set_port_specified = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int val,
);

typedef _c_snd_seq_port_info_set_timestamping = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 enable,
);

typedef _dart_snd_seq_port_info_set_timestamping = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int enable,
);

typedef _c_snd_seq_port_info_set_timestamp_real = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 realtime,
);

typedef _dart_snd_seq_port_info_set_timestamp_real = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int realtime,
);

typedef _c_snd_seq_port_info_set_timestamp_queue = ffi.Void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  ffi.Int32 queue,
);

typedef _dart_snd_seq_port_info_set_timestamp_queue = void Function(
  ffi.Pointer<snd_seq_port_info_> info,
  int queue,
);

typedef _c_snd_seq_create_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_create_port = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_delete_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 port,
);

typedef _dart_snd_seq_delete_port = int Function(
  ffi.Pointer<snd_seq_> handle,
  int port,
);

typedef _c_snd_seq_get_port_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 port,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_get_port_info = int Function(
  ffi.Pointer<snd_seq_> handle,
  int port,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_get_any_port_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 client,
  ffi.Int32 port,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_get_any_port_info = int Function(
  ffi.Pointer<snd_seq_> handle,
  int client,
  int port,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_set_port_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 port,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_set_port_info = int Function(
  ffi.Pointer<snd_seq_> handle,
  int port,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_query_next_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _dart_snd_seq_query_next_port = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_info_> info,
);

typedef _c_snd_seq_port_subscribe_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_port_subscribe_sizeof = int Function();

typedef _c_snd_seq_port_subscribe_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_port_subscribe_>> ptr,
);

typedef _dart_snd_seq_port_subscribe_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_port_subscribe_>> ptr,
);

typedef _c_snd_seq_port_subscribe_free = ffi.Void Function(
  ffi.Pointer<snd_seq_port_subscribe_> ptr,
);

typedef _dart_snd_seq_port_subscribe_free = void Function(
  ffi.Pointer<snd_seq_port_subscribe_> ptr,
);

typedef _c_snd_seq_port_subscribe_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_port_subscribe_> dst,
  ffi.Pointer<snd_seq_port_subscribe_> src,
);

typedef _dart_snd_seq_port_subscribe_copy = void Function(
  ffi.Pointer<snd_seq_port_subscribe_> dst,
  ffi.Pointer<snd_seq_port_subscribe_> src,
);

typedef _c_snd_seq_port_subscribe_get_sender = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _dart_snd_seq_port_subscribe_get_sender = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _c_snd_seq_port_subscribe_get_dest = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _dart_snd_seq_port_subscribe_get_dest = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _c_snd_seq_port_subscribe_get_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _dart_snd_seq_port_subscribe_get_queue = int Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _c_snd_seq_port_subscribe_get_exclusive = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _dart_snd_seq_port_subscribe_get_exclusive = int Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _c_snd_seq_port_subscribe_get_time_update = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _dart_snd_seq_port_subscribe_get_time_update = int Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _c_snd_seq_port_subscribe_get_time_real = ffi.Int32 Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _dart_snd_seq_port_subscribe_get_time_real = int Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
);

typedef _c_snd_seq_port_subscribe_set_sender = ffi.Void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _dart_snd_seq_port_subscribe_set_sender = void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _c_snd_seq_port_subscribe_set_dest = ffi.Void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _dart_snd_seq_port_subscribe_set_dest = void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _c_snd_seq_port_subscribe_set_queue = ffi.Void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  ffi.Int32 q,
);

typedef _dart_snd_seq_port_subscribe_set_queue = void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  int q,
);

typedef _c_snd_seq_port_subscribe_set_exclusive = ffi.Void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  ffi.Int32 val,
);

typedef _dart_snd_seq_port_subscribe_set_exclusive = void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  int val,
);

typedef _c_snd_seq_port_subscribe_set_time_update = ffi.Void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  ffi.Int32 val,
);

typedef _dart_snd_seq_port_subscribe_set_time_update = void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  int val,
);

typedef _c_snd_seq_port_subscribe_set_time_real = ffi.Void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  ffi.Int32 val,
);

typedef _dart_snd_seq_port_subscribe_set_time_real = void Function(
  ffi.Pointer<snd_seq_port_subscribe_> info,
  int val,
);

typedef _c_snd_seq_get_port_subscription = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_subscribe_> sub,
);

typedef _dart_snd_seq_get_port_subscription = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_subscribe_> sub,
);

typedef _c_snd_seq_subscribe_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_subscribe_> sub,
);

typedef _dart_snd_seq_subscribe_port = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_subscribe_> sub,
);

typedef _c_snd_seq_unsubscribe_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_subscribe_> sub,
);

typedef _dart_snd_seq_unsubscribe_port = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_port_subscribe_> sub,
);

typedef _c_snd_seq_query_subscribe_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_query_subscribe_sizeof = int Function();

typedef _c_snd_seq_query_subscribe_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_query_subscribe_>> ptr,
);

typedef _dart_snd_seq_query_subscribe_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_query_subscribe_>> ptr,
);

typedef _c_snd_seq_query_subscribe_free = ffi.Void Function(
  ffi.Pointer<snd_seq_query_subscribe_> ptr,
);

typedef _dart_snd_seq_query_subscribe_free = void Function(
  ffi.Pointer<snd_seq_query_subscribe_> ptr,
);

typedef _c_snd_seq_query_subscribe_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_query_subscribe_> dst,
  ffi.Pointer<snd_seq_query_subscribe_> src,
);

typedef _dart_snd_seq_query_subscribe_copy = void Function(
  ffi.Pointer<snd_seq_query_subscribe_> dst,
  ffi.Pointer<snd_seq_query_subscribe_> src,
);

typedef _c_snd_seq_query_subscribe_get_client = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_client = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_port = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_root = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_root = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_type = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_type = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_index = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_index = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_num_subs = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_num_subs = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_addr = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_addr = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_queue = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_exclusive = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_exclusive = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_time_update = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_time_update = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_get_time_real = ffi.Int32 Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _dart_snd_seq_query_subscribe_get_time_real = int Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
);

typedef _c_snd_seq_query_subscribe_set_client = ffi.Void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  ffi.Int32 client,
);

typedef _dart_snd_seq_query_subscribe_set_client = void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  int client,
);

typedef _c_snd_seq_query_subscribe_set_port = ffi.Void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  ffi.Int32 port,
);

typedef _dart_snd_seq_query_subscribe_set_port = void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  int port,
);

typedef _c_snd_seq_query_subscribe_set_root = ffi.Void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _dart_snd_seq_query_subscribe_set_root = void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _c_snd_seq_query_subscribe_set_type = ffi.Void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  ffi.Int32 type,
);

typedef _dart_snd_seq_query_subscribe_set_type = void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  int type,
);

typedef _c_snd_seq_query_subscribe_set_index = ffi.Void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  ffi.Int32 _index,
);

typedef _dart_snd_seq_query_subscribe_set_index = void Function(
  ffi.Pointer<snd_seq_query_subscribe_> info,
  int _index,
);

typedef _c_snd_seq_query_port_subscribers = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<snd_seq_query_subscribe_> subs,
);

typedef _dart_snd_seq_query_port_subscribers = int Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<snd_seq_query_subscribe_> subs,
);

typedef _c_snd_seq_queue_info_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_queue_info_sizeof = int Function();

typedef _c_snd_seq_queue_info_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_queue_info_>> ptr,
);

typedef _dart_snd_seq_queue_info_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_queue_info_>> ptr,
);

typedef _c_snd_seq_queue_info_free = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_info_> ptr,
);

typedef _dart_snd_seq_queue_info_free = void Function(
  ffi.Pointer<snd_seq_queue_info_> ptr,
);

typedef _c_snd_seq_queue_info_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_info_> dst,
  ffi.Pointer<snd_seq_queue_info_> src,
);

typedef _dart_snd_seq_queue_info_copy = void Function(
  ffi.Pointer<snd_seq_queue_info_> dst,
  ffi.Pointer<snd_seq_queue_info_> src,
);

typedef _c_snd_seq_queue_info_get_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _dart_snd_seq_queue_info_get_queue = int Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _c_snd_seq_queue_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _dart_snd_seq_queue_info_get_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _c_snd_seq_queue_info_get_owner = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _dart_snd_seq_queue_info_get_owner = int Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _c_snd_seq_queue_info_get_locked = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _dart_snd_seq_queue_info_get_locked = int Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _c_snd_seq_queue_info_get_flags = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _dart_snd_seq_queue_info_get_flags = int Function(
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _c_snd_seq_queue_info_set_name = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_info_> info,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_seq_queue_info_set_name = void Function(
  ffi.Pointer<snd_seq_queue_info_> info,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_seq_queue_info_set_owner = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_info_> info,
  ffi.Int32 owner,
);

typedef _dart_snd_seq_queue_info_set_owner = void Function(
  ffi.Pointer<snd_seq_queue_info_> info,
  int owner,
);

typedef _c_snd_seq_queue_info_set_locked = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_info_> info,
  ffi.Int32 locked,
);

typedef _dart_snd_seq_queue_info_set_locked = void Function(
  ffi.Pointer<snd_seq_queue_info_> info,
  int locked,
);

typedef _c_snd_seq_queue_info_set_flags = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_info_> info,
  ffi.Uint32 flags,
);

typedef _dart_snd_seq_queue_info_set_flags = void Function(
  ffi.Pointer<snd_seq_queue_info_> info,
  int flags,
);

typedef _c_snd_seq_create_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _dart_snd_seq_create_queue = int Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _c_snd_seq_alloc_named_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_seq_alloc_named_queue = int Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_seq_alloc_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_alloc_queue = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_free_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 q,
);

typedef _dart_snd_seq_free_queue = int Function(
  ffi.Pointer<snd_seq_> handle,
  int q,
);

typedef _c_snd_seq_get_queue_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 q,
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _dart_snd_seq_get_queue_info = int Function(
  ffi.Pointer<snd_seq_> seq,
  int q,
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _c_snd_seq_set_queue_info = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 q,
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _dart_snd_seq_set_queue_info = int Function(
  ffi.Pointer<snd_seq_> seq,
  int q,
  ffi.Pointer<snd_seq_queue_info_> info,
);

typedef _c_snd_seq_query_named_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_seq_query_named_queue = int Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_seq_get_queue_usage = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 q,
);

typedef _dart_snd_seq_get_queue_usage = int Function(
  ffi.Pointer<snd_seq_> handle,
  int q,
);

typedef _c_snd_seq_set_queue_usage = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 q,
  ffi.Int32 used,
);

typedef _dart_snd_seq_set_queue_usage = int Function(
  ffi.Pointer<snd_seq_> handle,
  int q,
  int used,
);

typedef _c_snd_seq_queue_status_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_queue_status_sizeof = int Function();

typedef _c_snd_seq_queue_status_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_queue_status_>> ptr,
);

typedef _dart_snd_seq_queue_status_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_queue_status_>> ptr,
);

typedef _c_snd_seq_queue_status_free = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_status_> ptr,
);

typedef _dart_snd_seq_queue_status_free = void Function(
  ffi.Pointer<snd_seq_queue_status_> ptr,
);

typedef _c_snd_seq_queue_status_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_status_> dst,
  ffi.Pointer<snd_seq_queue_status_> src,
);

typedef _dart_snd_seq_queue_status_copy = void Function(
  ffi.Pointer<snd_seq_queue_status_> dst,
  ffi.Pointer<snd_seq_queue_status_> src,
);

typedef _c_snd_seq_queue_status_get_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _dart_snd_seq_queue_status_get_queue = int Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _c_snd_seq_queue_status_get_events = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _dart_snd_seq_queue_status_get_events = int Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _c_snd_seq_queue_status_get_tick_time = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _dart_snd_seq_queue_status_get_tick_time = int Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _c_snd_seq_queue_status_get_real_time = ffi.Pointer<snd_seq_real_time_t>
    Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _dart_snd_seq_queue_status_get_real_time
    = ffi.Pointer<snd_seq_real_time_t> Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _c_snd_seq_queue_status_get_status = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _dart_snd_seq_queue_status_get_status = int Function(
  ffi.Pointer<snd_seq_queue_status_> info,
);

typedef _c_snd_seq_get_queue_status = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 q,
  ffi.Pointer<snd_seq_queue_status_> status,
);

typedef _dart_snd_seq_get_queue_status = int Function(
  ffi.Pointer<snd_seq_> handle,
  int q,
  ffi.Pointer<snd_seq_queue_status_> status,
);

typedef _c_snd_seq_queue_tempo_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_queue_tempo_sizeof = int Function();

typedef _c_snd_seq_queue_tempo_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_queue_tempo_>> ptr,
);

typedef _dart_snd_seq_queue_tempo_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_queue_tempo_>> ptr,
);

typedef _c_snd_seq_queue_tempo_free = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_tempo_> ptr,
);

typedef _dart_snd_seq_queue_tempo_free = void Function(
  ffi.Pointer<snd_seq_queue_tempo_> ptr,
);

typedef _c_snd_seq_queue_tempo_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_tempo_> dst,
  ffi.Pointer<snd_seq_queue_tempo_> src,
);

typedef _dart_snd_seq_queue_tempo_copy = void Function(
  ffi.Pointer<snd_seq_queue_tempo_> dst,
  ffi.Pointer<snd_seq_queue_tempo_> src,
);

typedef _c_snd_seq_queue_tempo_get_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _dart_snd_seq_queue_tempo_get_queue = int Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _c_snd_seq_queue_tempo_get_tempo = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _dart_snd_seq_queue_tempo_get_tempo = int Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _c_snd_seq_queue_tempo_get_ppq = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _dart_snd_seq_queue_tempo_get_ppq = int Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _c_snd_seq_queue_tempo_get_skew = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _dart_snd_seq_queue_tempo_get_skew = int Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _c_snd_seq_queue_tempo_get_skew_base = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _dart_snd_seq_queue_tempo_get_skew_base = int Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
);

typedef _c_snd_seq_queue_tempo_set_tempo = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
  ffi.Uint32 tempo,
);

typedef _dart_snd_seq_queue_tempo_set_tempo = void Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
  int tempo,
);

typedef _c_snd_seq_queue_tempo_set_ppq = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
  ffi.Int32 ppq,
);

typedef _dart_snd_seq_queue_tempo_set_ppq = void Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
  int ppq,
);

typedef _c_snd_seq_queue_tempo_set_skew = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
  ffi.Uint32 skew,
);

typedef _dart_snd_seq_queue_tempo_set_skew = void Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
  int skew,
);

typedef _c_snd_seq_queue_tempo_set_skew_base = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
  ffi.Uint32 base,
);

typedef _dart_snd_seq_queue_tempo_set_skew_base = void Function(
  ffi.Pointer<snd_seq_queue_tempo_> info,
  int base,
);

typedef _c_snd_seq_get_queue_tempo = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 q,
  ffi.Pointer<snd_seq_queue_tempo_> tempo,
);

typedef _dart_snd_seq_get_queue_tempo = int Function(
  ffi.Pointer<snd_seq_> handle,
  int q,
  ffi.Pointer<snd_seq_queue_tempo_> tempo,
);

typedef _c_snd_seq_set_queue_tempo = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 q,
  ffi.Pointer<snd_seq_queue_tempo_> tempo,
);

typedef _dart_snd_seq_set_queue_tempo = int Function(
  ffi.Pointer<snd_seq_> handle,
  int q,
  ffi.Pointer<snd_seq_queue_tempo_> tempo,
);

typedef _c_snd_seq_queue_timer_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_queue_timer_sizeof = int Function();

typedef _c_snd_seq_queue_timer_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_queue_timer_>> ptr,
);

typedef _dart_snd_seq_queue_timer_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_queue_timer_>> ptr,
);

typedef _c_snd_seq_queue_timer_free = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_timer_> ptr,
);

typedef _dart_snd_seq_queue_timer_free = void Function(
  ffi.Pointer<snd_seq_queue_timer_> ptr,
);

typedef _c_snd_seq_queue_timer_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_timer_> dst,
  ffi.Pointer<snd_seq_queue_timer_> src,
);

typedef _dart_snd_seq_queue_timer_copy = void Function(
  ffi.Pointer<snd_seq_queue_timer_> dst,
  ffi.Pointer<snd_seq_queue_timer_> src,
);

typedef _c_snd_seq_queue_timer_get_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
);

typedef _dart_snd_seq_queue_timer_get_queue = int Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
);

typedef _c_snd_seq_queue_timer_get_type = ffi.Int32 Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
);

typedef _dart_snd_seq_queue_timer_get_type = int Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
);

typedef _c_snd_seq_queue_timer_get_id = ffi.Pointer<snd_timer_id_> Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
);

typedef _dart_snd_seq_queue_timer_get_id = ffi.Pointer<snd_timer_id_> Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
);

typedef _c_snd_seq_queue_timer_get_resolution = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
);

typedef _dart_snd_seq_queue_timer_get_resolution = int Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
);

typedef _c_snd_seq_queue_timer_set_type = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
  ffi.Int32 type,
);

typedef _dart_snd_seq_queue_timer_set_type = void Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
  int type,
);

typedef _c_snd_seq_queue_timer_set_id = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
  ffi.Pointer<snd_timer_id_> id,
);

typedef _dart_snd_seq_queue_timer_set_id = void Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
  ffi.Pointer<snd_timer_id_> id,
);

typedef _c_snd_seq_queue_timer_set_resolution = ffi.Void Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
  ffi.Uint32 resolution,
);

typedef _dart_snd_seq_queue_timer_set_resolution = void Function(
  ffi.Pointer<snd_seq_queue_timer_> info,
  int resolution,
);

typedef _c_snd_seq_get_queue_timer = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 q,
  ffi.Pointer<snd_seq_queue_timer_> timer,
);

typedef _dart_snd_seq_get_queue_timer = int Function(
  ffi.Pointer<snd_seq_> handle,
  int q,
  ffi.Pointer<snd_seq_queue_timer_> timer,
);

typedef _c_snd_seq_set_queue_timer = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Int32 q,
  ffi.Pointer<snd_seq_queue_timer_> timer,
);

typedef _dart_snd_seq_set_queue_timer = int Function(
  ffi.Pointer<snd_seq_> handle,
  int q,
  ffi.Pointer<snd_seq_queue_timer_> timer,
);

typedef _c_snd_seq_free_event = ffi.Int32 Function(
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_seq_free_event = int Function(
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _c_snd_seq_event_length = ffi.Int64 Function(
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_seq_event_length = int Function(
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _c_snd_seq_event_output = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_seq_event_output = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _c_snd_seq_event_output_buffer = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_seq_event_output_buffer = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _c_snd_seq_event_output_direct = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_seq_event_output_direct = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _c_snd_seq_event_input = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<ffi.Pointer<snd_seq_event_t>> ev,
);

typedef _dart_snd_seq_event_input = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<ffi.Pointer<snd_seq_event_t>> ev,
);

typedef _c_snd_seq_event_input_pending = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 fetch_sequencer,
);

typedef _dart_snd_seq_event_input_pending = int Function(
  ffi.Pointer<snd_seq_> seq,
  int fetch_sequencer,
);

typedef _c_snd_seq_drain_output = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_drain_output = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_event_output_pending = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _dart_snd_seq_event_output_pending = int Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _c_snd_seq_extract_output = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<ffi.Pointer<snd_seq_event_t>> ev,
);

typedef _dart_snd_seq_extract_output = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<ffi.Pointer<snd_seq_event_t>> ev,
);

typedef _c_snd_seq_drop_output = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_drop_output = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_drop_output_buffer = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_drop_output_buffer = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_drop_input = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_drop_input = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_drop_input_buffer = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _dart_snd_seq_drop_input_buffer = int Function(
  ffi.Pointer<snd_seq_> handle,
);

typedef _c_snd_seq_remove_events_sizeof = ffi.Int32 Function();

typedef _dart_snd_seq_remove_events_sizeof = int Function();

typedef _c_snd_seq_remove_events_malloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<snd_seq_remove_events_>> ptr,
);

typedef _dart_snd_seq_remove_events_malloc = int Function(
  ffi.Pointer<ffi.Pointer<snd_seq_remove_events_>> ptr,
);

typedef _c_snd_seq_remove_events_free = ffi.Void Function(
  ffi.Pointer<snd_seq_remove_events_> ptr,
);

typedef _dart_snd_seq_remove_events_free = void Function(
  ffi.Pointer<snd_seq_remove_events_> ptr,
);

typedef _c_snd_seq_remove_events_copy = ffi.Void Function(
  ffi.Pointer<snd_seq_remove_events_> dst,
  ffi.Pointer<snd_seq_remove_events_> src,
);

typedef _dart_snd_seq_remove_events_copy = void Function(
  ffi.Pointer<snd_seq_remove_events_> dst,
  ffi.Pointer<snd_seq_remove_events_> src,
);

typedef _c_snd_seq_remove_events_get_condition = ffi.Uint32 Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _dart_snd_seq_remove_events_get_condition = int Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _c_snd_seq_remove_events_get_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _dart_snd_seq_remove_events_get_queue = int Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _c_snd_seq_remove_events_get_dest = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _dart_snd_seq_remove_events_get_dest = ffi.Pointer<snd_seq_addr_t>
    Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _c_snd_seq_remove_events_get_channel = ffi.Int32 Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _dart_snd_seq_remove_events_get_channel = int Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _c_snd_seq_remove_events_get_event_type = ffi.Int32 Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _dart_snd_seq_remove_events_get_event_type = int Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _c_snd_seq_remove_events_get_tag = ffi.Int32 Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _dart_snd_seq_remove_events_get_tag = int Function(
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _c_snd_seq_remove_events_set_condition = ffi.Void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  ffi.Uint32 flags,
);

typedef _dart_snd_seq_remove_events_set_condition = void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  int flags,
);

typedef _c_snd_seq_remove_events_set_queue = ffi.Void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  ffi.Int32 queue,
);

typedef _dart_snd_seq_remove_events_set_queue = void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  int queue,
);

typedef _c_snd_seq_remove_events_set_dest = ffi.Void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _dart_snd_seq_remove_events_set_dest = void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  ffi.Pointer<snd_seq_addr_t> addr,
);

typedef _c_snd_seq_remove_events_set_channel = ffi.Void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  ffi.Int32 channel,
);

typedef _dart_snd_seq_remove_events_set_channel = void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  int channel,
);

typedef _c_snd_seq_remove_events_set_event_type = ffi.Void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  ffi.Int32 type,
);

typedef _dart_snd_seq_remove_events_set_event_type = void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  int type,
);

typedef _c_snd_seq_remove_events_set_tag = ffi.Void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  ffi.Int32 tag,
);

typedef _dart_snd_seq_remove_events_set_tag = void Function(
  ffi.Pointer<snd_seq_remove_events_> info,
  int tag,
);

typedef _c_snd_seq_remove_events = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _dart_snd_seq_remove_events = int Function(
  ffi.Pointer<snd_seq_> handle,
  ffi.Pointer<snd_seq_remove_events_> info,
);

typedef _c_snd_seq_set_bit = ffi.Void Function(
  ffi.Int32 nr,
  ffi.Pointer<ffi.Void> array,
);

typedef _dart_snd_seq_set_bit = void Function(
  int nr,
  ffi.Pointer<ffi.Void> array,
);

typedef _c_snd_seq_unset_bit = ffi.Void Function(
  ffi.Int32 nr,
  ffi.Pointer<ffi.Void> array,
);

typedef _dart_snd_seq_unset_bit = void Function(
  int nr,
  ffi.Pointer<ffi.Void> array,
);

typedef _c_snd_seq_change_bit = ffi.Int32 Function(
  ffi.Int32 nr,
  ffi.Pointer<ffi.Void> array,
);

typedef _dart_snd_seq_change_bit = int Function(
  int nr,
  ffi.Pointer<ffi.Void> array,
);

typedef _c_snd_seq_get_bit = ffi.Int32 Function(
  ffi.Int32 nr,
  ffi.Pointer<ffi.Void> array,
);

typedef _dart_snd_seq_get_bit = int Function(
  int nr,
  ffi.Pointer<ffi.Void> array,
);

typedef _c_snd_seq_control_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 q,
  ffi.Int32 type,
  ffi.Int32 value,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_seq_control_queue = int Function(
  ffi.Pointer<snd_seq_> seq,
  int q,
  int type,
  int value,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _c_snd_seq_create_simple_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint32 caps,
  ffi.Uint32 type,
);

typedef _dart_snd_seq_create_simple_port = int Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<ffi.Int8> name,
  int caps,
  int type,
);

typedef _c_snd_seq_delete_simple_port = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 port,
);

typedef _dart_snd_seq_delete_simple_port = int Function(
  ffi.Pointer<snd_seq_> seq,
  int port,
);

typedef _c_snd_seq_connect_from = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 my_port,
  ffi.Int32 src_client,
  ffi.Int32 src_port,
);

typedef _dart_snd_seq_connect_from = int Function(
  ffi.Pointer<snd_seq_> seq,
  int my_port,
  int src_client,
  int src_port,
);

typedef _c_snd_seq_connect_to = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 my_port,
  ffi.Int32 dest_client,
  ffi.Int32 dest_port,
);

typedef _dart_snd_seq_connect_to = int Function(
  ffi.Pointer<snd_seq_> seq,
  int my_port,
  int dest_client,
  int dest_port,
);

typedef _c_snd_seq_disconnect_from = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 my_port,
  ffi.Int32 src_client,
  ffi.Int32 src_port,
);

typedef _dart_snd_seq_disconnect_from = int Function(
  ffi.Pointer<snd_seq_> seq,
  int my_port,
  int src_client,
  int src_port,
);

typedef _c_snd_seq_disconnect_to = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 my_port,
  ffi.Int32 dest_client,
  ffi.Int32 dest_port,
);

typedef _dart_snd_seq_disconnect_to = int Function(
  ffi.Pointer<snd_seq_> seq,
  int my_port,
  int dest_client,
  int dest_port,
);

typedef _c_snd_seq_set_client_name = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_snd_seq_set_client_name = int Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_snd_seq_set_client_event_filter = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 event_type,
);

typedef _dart_snd_seq_set_client_event_filter = int Function(
  ffi.Pointer<snd_seq_> seq,
  int event_type,
);

typedef _c_snd_seq_set_client_pool_output = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 size,
);

typedef _dart_snd_seq_set_client_pool_output = int Function(
  ffi.Pointer<snd_seq_> seq,
  int size,
);

typedef _c_snd_seq_set_client_pool_output_room = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 size,
);

typedef _dart_snd_seq_set_client_pool_output_room = int Function(
  ffi.Pointer<snd_seq_> seq,
  int size,
);

typedef _c_snd_seq_set_client_pool_input = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Int32 size,
);

typedef _dart_snd_seq_set_client_pool_input = int Function(
  ffi.Pointer<snd_seq_> seq,
  int size,
);

typedef _c_snd_seq_sync_output_queue = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _dart_snd_seq_sync_output_queue = int Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _c_snd_seq_parse_address = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<snd_seq_addr_t> addr,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_snd_seq_parse_address = int Function(
  ffi.Pointer<snd_seq_> seq,
  ffi.Pointer<snd_seq_addr_t> addr,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_snd_seq_reset_pool_output = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _dart_snd_seq_reset_pool_output = int Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _c_snd_seq_reset_pool_input = ffi.Int32 Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _dart_snd_seq_reset_pool_input = int Function(
  ffi.Pointer<snd_seq_> seq,
);

typedef _c_snd_midi_event_new = ffi.Int32 Function(
  ffi.Int32 bufsize,
  ffi.Pointer<ffi.Pointer<snd_midi_event>> rdev,
);

typedef _dart_snd_midi_event_new = int Function(
  int bufsize,
  ffi.Pointer<ffi.Pointer<snd_midi_event>> rdev,
);

typedef _c_snd_midi_event_resize_buffer = ffi.Int32 Function(
  ffi.Pointer<snd_midi_event> dev,
  ffi.Int32 bufsize,
);

typedef _dart_snd_midi_event_resize_buffer = int Function(
  ffi.Pointer<snd_midi_event> dev,
  int bufsize,
);

typedef _c_snd_midi_event_free = ffi.Void Function(
  ffi.Pointer<snd_midi_event> dev,
);

typedef _dart_snd_midi_event_free = void Function(
  ffi.Pointer<snd_midi_event> dev,
);

typedef _c_snd_midi_event_init = ffi.Void Function(
  ffi.Pointer<snd_midi_event> dev,
);

typedef _dart_snd_midi_event_init = void Function(
  ffi.Pointer<snd_midi_event> dev,
);

typedef _c_snd_midi_event_reset_encode = ffi.Void Function(
  ffi.Pointer<snd_midi_event> dev,
);

typedef _dart_snd_midi_event_reset_encode = void Function(
  ffi.Pointer<snd_midi_event> dev,
);

typedef _c_snd_midi_event_reset_decode = ffi.Void Function(
  ffi.Pointer<snd_midi_event> dev,
);

typedef _dart_snd_midi_event_reset_decode = void Function(
  ffi.Pointer<snd_midi_event> dev,
);

typedef _c_snd_midi_event_no_status = ffi.Void Function(
  ffi.Pointer<snd_midi_event> dev,
  ffi.Int32 on_1,
);

typedef _dart_snd_midi_event_no_status = void Function(
  ffi.Pointer<snd_midi_event> dev,
  int on_1,
);

typedef _c_snd_midi_event_encode = ffi.Int64 Function(
  ffi.Pointer<snd_midi_event> dev,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Int64 count,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_midi_event_encode = int Function(
  ffi.Pointer<snd_midi_event> dev,
  ffi.Pointer<ffi.Uint8> buf,
  int count,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _c_snd_midi_event_encode_byte = ffi.Int32 Function(
  ffi.Pointer<snd_midi_event> dev,
  ffi.Int32 c,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_midi_event_encode_byte = int Function(
  ffi.Pointer<snd_midi_event> dev,
  int c,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _c_snd_midi_event_decode = ffi.Int64 Function(
  ffi.Pointer<snd_midi_event> dev,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Int64 count,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _dart_snd_midi_event_decode = int Function(
  ffi.Pointer<snd_midi_event> dev,
  ffi.Pointer<ffi.Uint8> buf,
  int count,
  ffi.Pointer<snd_seq_event_t> ev,
);

typedef _typedefC_4 = ffi.Int32 Function(
  ffi.Pointer<snd_pcm_scope_>,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_>,
);

typedef _typedefC_6 = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_>,
);

typedef _typedefC_7 = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_>,
);

typedef _typedefC_8 = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_>,
);

typedef _typedefC_9 = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_>,
);

typedef _typedefC_10 = ffi.Void Function(
  ffi.Pointer<snd_pcm_scope_>,
);
